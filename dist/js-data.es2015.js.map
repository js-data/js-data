{"version":3,"file":"js-data.es2015.js","sources":["../src/utils.js","../src/Settable.js","../src/Component.js","../src/Query.js","../src/Relation.js","../src/Relation/BelongsTo.js","../src/Relation/HasMany.js","../src/Relation/HasOne.js","../src/relations.js","../src/decorators.js","../src/Record.js","../lib/mindex/_utils.js","../lib/mindex/index.js","../src/Collection.js","../src/Schema.js","../src/Mapper.js","../src/Container.js","../src/SimpleStore.js","../src/LinkedCollection.js","../src/DataStore.js","../src/index.js"],"sourcesContent":["/**\n * Utility methods used by JSData.\n *\n * @example\n * import { utils } from 'js-data';\n * console.log(utils.isString('foo')); // true\n *\n * @namespace utils\n * @type {Object}\n */\n\nconst DOMAIN = 'utils'\n\nconst INFINITY = 1 / 0\nconst MAX_INTEGER = 1.7976931348623157e308\nconst BOOL_TAG = '[object Boolean]'\nconst DATE_TAG = '[object Date]'\nconst FUNC_TAG = '[object Function]'\nconst NUMBER_TAG = '[object Number]'\nconst OBJECT_TAG = '[object Object]'\nconst REGEXP_TAG = '[object RegExp]'\nconst STRING_TAG = '[object String]'\nconst objToString = Object.prototype.toString\nconst PATH = /^(.+)\\.(.+)$/\n\nconst ERRORS = {\n  '400' () {\n    return `expected: ${arguments[0]}, found: ${\n      arguments[2] ? arguments[1] : typeof arguments[1]\n    }`\n  },\n  '404' () {\n    return `${arguments[0]} not found`\n  }\n}\n\nconst toInteger = function (value) {\n  if (!value) {\n    return 0\n  }\n  // Coerce to number\n  value = +value\n  if (value === INFINITY || value === -INFINITY) {\n    const sign = value < 0 ? -1 : 1\n    return sign * MAX_INTEGER\n  }\n  const remainder = value % 1\n  return value === value ? (remainder ? value - remainder : value) : 0 // eslint-disable-line\n}\n\nconst toStr = function (value) {\n  return objToString.call(value)\n}\n\nconst isPlainObject = function (value) {\n  return !!value && typeof value === 'object' && value.constructor === Object\n}\n\nconst mkdirP = function (object, path) {\n  if (!path) {\n    return object\n  }\n  const parts = path.split('.')\n  parts.forEach(function (key) {\n    if (!object[key]) {\n      object[key] = {}\n    }\n    object = object[key]\n  })\n  return object\n}\n\nconst utils = {\n  /**\n   * Reference to the Promise constructor used by JSData. Defaults to\n   * `window.Promise` or `global.Promise`.\n   *\n   * @example <caption>Make JSData use a different `Promise` constructor</caption>\n   * import Promise from 'bluebird';\n   * import { utils } from 'js-data';\n   * utils.Promise = Promise;\n   *\n   * @name utils.Promise\n   * @since 3.0.0\n   * @type {Function}\n   */\n  Promise: Promise,\n\n  /**\n   * Shallow copy properties that meet the following criteria from `src` to\n   * `dest`:\n   *\n   * - own enumerable\n   * - not a function\n   * - does not start with \"_\"\n   *\n   * @method utils._\n   * @param {object} dest Destination object.\n   * @param {object} src Source object.\n   * @private\n   * @since 3.0.0\n   */\n  _ (dest, src) {\n    utils.forOwn(src, function (value, key) {\n      if (\n        key &&\n        dest[key] === undefined &&\n        !utils.isFunction(value) &&\n        key.indexOf('_') !== 0\n      ) {\n        dest[key] = value\n      }\n    })\n  },\n\n  /**\n   * Recursively iterates over relations found in `opts.with`.\n   *\n   * @method utils._forRelation\n   * @param {object} opts Configuration options.\n   * @param {Relation} def Relation definition.\n   * @param {Function} fn Callback function.\n   * @param {*} [thisArg] Execution context for the callback function.\n   * @private\n   * @since 3.0.0\n   */\n  _forRelation (opts = {}, def, fn, thisArg) {\n    const relationName = def.relation\n    let containedName = null\n    let index\n    opts.with || (opts.with = [])\n\n    if ((index = utils._getIndex(opts.with, relationName)) >= 0) {\n      containedName = relationName\n    } else if ((index = utils._getIndex(opts.with, def.localField)) >= 0) {\n      containedName = def.localField\n    }\n\n    if (opts.withAll) {\n      fn.call(thisArg, def, {})\n      return\n    } else if (!containedName) {\n      return\n    }\n    const optsCopy = {}\n    utils.fillIn(optsCopy, def.getRelation())\n    utils.fillIn(optsCopy, opts)\n    optsCopy.with = opts.with.slice()\n    optsCopy._activeWith = optsCopy.with.splice(index, 1)[0]\n    optsCopy.with.forEach(function (relation, i) {\n      if (\n        relation &&\n        relation.indexOf(containedName) === 0 &&\n        relation.length >= containedName.length &&\n        relation[containedName.length] === '.'\n      ) {\n        optsCopy.with[i] = relation.substr(containedName.length + 1)\n      } else {\n        optsCopy.with[i] = ''\n      }\n    })\n    fn.call(thisArg, def, optsCopy)\n  },\n\n  /**\n   * Find the index of a relation in the given list\n   *\n   * @method utils._getIndex\n   * @param {string[]} list List to search.\n   * @param {string} relation Relation to find.\n   * @private\n   * @returns {number}\n   */\n  _getIndex (list, relation) {\n    let index = -1\n    list.forEach(function (_relation, i) {\n      if (_relation === relation) {\n        index = i\n        return false\n      } else if (utils.isObject(_relation)) {\n        if (_relation.relation === relation) {\n          index = i\n          return false\n        }\n      }\n    })\n    return index\n  },\n\n  /**\n   * Define hidden (non-enumerable), writable properties on `target` from the\n   * provided `props`.\n   *\n   * @example\n   * import { utils } from 'js-data';\n   * function Cat () {}\n   * utils.addHiddenPropsToTarget(Cat.prototype, {\n   *   say () {\n   *     console.log('meow');\n   *   }\n   * });\n   * const cat = new Cat();\n   * cat.say(); // \"meow\"\n   *\n   * @method utils.addHiddenPropsToTarget\n   * @param {object} target That to which `props` should be added.\n   * @param {object} props Properties to be added to `target`.\n   * @since 3.0.0\n   */\n  addHiddenPropsToTarget (target, props) {\n    const map = {}\n    Object.keys(props).forEach(function (propName) {\n      const descriptor = Object.getOwnPropertyDescriptor(props, propName)\n\n      descriptor.enumerable = false\n      map[propName] = descriptor\n    })\n    Object.defineProperties(target, map)\n  },\n\n  /**\n   * Return whether the two objects are deeply different.\n   *\n   * @example\n   * import { utils } from 'js-data';\n   * utils.areDifferent({}, {}); // false\n   * utils.areDifferent({ a: 1 }, { a: 1 }); // false\n   * utils.areDifferent({ foo: 'bar' }, {}); // true\n   *\n   * @method utils.areDifferent\n   * @param {object} a Base object.\n   * @param {object} b Comparison object.\n   * @param {object} [opts] Configuration options.\n   * @param {Function} [opts.equalsFn={@link utils.deepEqual}] Equality function.\n   * @param {array} [opts.ignore=[]] Array of strings or RegExp of fields to ignore.\n   * @returns {boolean} Whether the two objects are deeply different.\n   * @see utils.diffObjects\n   * @since 3.0.0\n   */\n  areDifferent (newObject, oldObject, opts = {}) {\n    const diff = utils.diffObjects(newObject, oldObject, opts)\n    const diffCount =\n      Object.keys(diff.added).length +\n      Object.keys(diff.removed).length +\n      Object.keys(diff.changed).length\n    return diffCount > 0\n  },\n\n  /**\n   * Deep copy a value.\n   *\n   * @example\n   * import { utils } from 'js-data';\n   * const a = { foo: { bar: 'baz' } };\n   * const b = utils.copy(a);\n   * a === b; // false\n   * utils.areDifferent(a, b); // false\n   *\n   * @param {*} from Value to deep copy.\n   * @param {*} [to] Destination object for the copy operation.\n   * @param {*} [stackFrom] For internal use.\n   * @param {*} [stackTo] For internal use.\n   * @param {string[]|RegExp[]} [blacklist] List of strings or RegExp of\n   * properties to skip.\n   * @param {boolean} [plain] Whether to make a plain copy (don't try to use\n   * original prototype).\n   * @returns {*} Deep copy of `from`.\n   * @since 3.0.0\n   */\n  copy (from, to, stackFrom, stackTo, blacklist, plain) {\n    if (!to) {\n      to = from\n      if (from) {\n        if (utils.isArray(from)) {\n          to = utils.copy(from, [], stackFrom, stackTo, blacklist, plain)\n        } else if (utils.isDate(from)) {\n          to = new Date(from.getTime())\n        } else if (utils.isRegExp(from)) {\n          to = new RegExp(from.source, from.toString().match(/[^/]*$/)[0])\n          to.lastIndex = from.lastIndex\n        } else if (utils.isObject(from)) {\n          if (plain) {\n            to = utils.copy(from, {}, stackFrom, stackTo, blacklist, plain)\n          } else {\n            to = utils.copy(\n              from,\n              Object.create(Object.getPrototypeOf(from)),\n              stackFrom,\n              stackTo,\n              blacklist,\n              plain\n            )\n          }\n        }\n      }\n    } else {\n      if (from === to) {\n        throw utils.err(`${DOMAIN}.copy`)(\n          500,\n          'Cannot copy! Source and destination are identical.'\n        )\n      }\n\n      stackFrom = stackFrom || []\n      stackTo = stackTo || []\n\n      if (utils.isObject(from)) {\n        const index = stackFrom.indexOf(from)\n        if (index !== -1) {\n          return stackTo[index]\n        }\n\n        stackFrom.push(from)\n        stackTo.push(to)\n      }\n\n      let result\n      if (utils.isArray(from)) {\n        let i\n        to.length = 0\n        for (i = 0; i < from.length; i++) {\n          result = utils.copy(\n            from[i],\n            null,\n            stackFrom,\n            stackTo,\n            blacklist,\n            plain\n          )\n          if (utils.isObject(from[i])) {\n            stackFrom.push(from[i])\n            stackTo.push(result)\n          }\n          to.push(result)\n        }\n      } else {\n        if (utils.isArray(to)) {\n          to.length = 0\n        } else {\n          utils.forOwn(to, function (value, key) {\n            delete to[key]\n          })\n        }\n        for (var key in from) {\n          if (Object.hasOwnProperty.call(from, key)) {\n            if (utils.isBlacklisted(key, blacklist)) {\n              continue\n            }\n            result = utils.copy(\n              from[key],\n              null,\n              stackFrom,\n              stackTo,\n              blacklist,\n              plain\n            )\n            if (utils.isObject(from[key])) {\n              stackFrom.push(from[key])\n              stackTo.push(result)\n            }\n            to[key] = result\n          }\n        }\n      }\n    }\n    return to\n  },\n\n  /**\n   * Recursively shallow fill in own enumerable properties from `source` to\n   * `dest`.\n   *\n   * @example\n   * import { utils } from 'js-data';\n   * const a = { foo: { bar: 'baz' }, beep: 'boop' };\n   * const b = { beep: 'bip' };\n   * utils.deepFillIn(b, a);\n   * console.log(b); // {\"foo\":{\"bar\":\"baz\"},\"beep\":\"bip\"}\n   *\n   * @method utils.deepFillIn\n   * @param {object} dest The destination object.\n   * @param {object} source The source object.\n   * @see utils.fillIn\n   * @see utils.deepMixIn\n   * @since 3.0.0\n   */\n  deepFillIn (dest, source) {\n    if (source) {\n      utils.forOwn(source, function (value, key) {\n        const existing = dest[key]\n        if (isPlainObject(value) && isPlainObject(existing)) {\n          utils.deepFillIn(existing, value)\n        } else if (!Object.hasOwnProperty.call(dest, key) || dest[key] === undefined) {\n          dest[key] = value\n        }\n      })\n    }\n    return dest\n  },\n\n  /**\n   * Recursively shallow copy enumerable properties from `source` to `dest`.\n   *\n   * @example\n   * import { utils } from 'js-data';\n   * const a = { foo: { bar: 'baz' }, beep: 'boop' };\n   * const b = { beep: 'bip' };\n   * utils.deepFillIn(b, a);\n   * console.log(b); // {\"foo\":{\"bar\":\"baz\"},\"beep\":\"boop\"}\n   *\n   * @method utils.deepMixIn\n   * @param {object} dest The destination object.\n   * @param {object} source The source object.\n   * @see utils.fillIn\n   * @see utils.deepFillIn\n   * @since 3.0.0\n   */\n  deepMixIn (dest, source) {\n    if (source) {\n      for (var key in source) {\n        const value = source[key]\n        const existing = dest[key]\n        if (isPlainObject(value) && isPlainObject(existing)) {\n          utils.deepMixIn(existing, value)\n        } else {\n          dest[key] = value\n        }\n      }\n    }\n    return dest\n  },\n\n  /**\n   * Return a diff of the base object to the comparison object.\n   *\n   * @example\n   * import { utils } from 'js-data';\n   * const oldObject = { foo: 'bar', a: 1234 };\n   * const newObject = { beep: 'boop', a: 5678 };\n   * const diff = utils.diffObjects(oldObject, newObject);\n   * console.log(diff.added); // {\"beep\":\"boop\"}\n   * console.log(diff.changed); // {\"a\":5678}\n   * console.log(diff.removed); // {\"foo\":undefined}\n   *\n   * @method utils.diffObjects\n   * @param {object} newObject Comparison object.\n   * @param {object} oldObject Base object.\n   * @param {object} [opts] Configuration options.\n   * @param {Function} [opts.equalsFn={@link utils.deepEqual}] Equality function.\n   * @param {array} [opts.ignore=[]] Array of strings or RegExp of fields to ignore.\n   * @returns {Object} The diff from the base object to the comparison object.\n   * @see utils.areDifferent\n   * @since 3.0.0\n   */\n  diffObjects (newObject, oldObject, opts = {}) {\n    let equalsFn = opts.equalsFn\n    const blacklist = opts.ignore\n    const diff = {\n      added: {},\n      changed: {},\n      removed: {}\n    }\n    if (!utils.isFunction(equalsFn)) {\n      equalsFn = utils.deepEqual\n    }\n\n    const newKeys = Object.keys(newObject).filter(function (key) {\n      return !utils.isBlacklisted(key, blacklist)\n    })\n    const oldKeys = Object.keys(oldObject).filter(function (key) {\n      return !utils.isBlacklisted(key, blacklist)\n    })\n\n    // Check for properties that were added or changed\n    newKeys.forEach(function (key) {\n      const oldValue = oldObject[key]\n      const newValue = newObject[key]\n      if (equalsFn(oldValue, newValue)) {\n        return\n      }\n      if (oldValue === undefined) {\n        diff.added[key] = newValue\n      } else {\n        diff.changed[key] = newValue\n      }\n    })\n\n    // Check for properties that were removed\n    oldKeys.forEach(function (key) {\n      const oldValue = oldObject[key]\n      const newValue = newObject[key]\n      if (newValue === undefined && oldValue !== undefined) {\n        diff.removed[key] = undefined\n      }\n    })\n\n    return diff\n  },\n\n  /**\n   * Return whether the two values are equal according to the `==` operator.\n   *\n   * @example\n   * import { utils } from 'js-data';\n   * console.log(utils.equal(1,1)); // true\n   * console.log(utils.equal(1,'1')); // true\n   * console.log(utils.equal(93, 66)); // false\n   *\n   * @method utils.equal\n   * @param {*} a First value in the comparison.\n   * @param {*} b Second value in the comparison.\n   * @returns {boolean} Whether the two values are equal according to `==`.\n   * @since 3.0.0\n   */\n  equal (a, b) {\n    return a == b // eslint-disable-line\n  },\n\n  /**\n   * Produce a factory function for making Error objects with the provided\n   * metadata. Used throughout the various js-data components.\n   *\n   * @example\n   * import { utils } from 'js-data';\n   * const errorFactory = utils.err('domain', 'target');\n   * const error400 = errorFactory(400, 'expected type', 'actual type');\n   * console.log(error400); // [Error: [domain:target] expected: expected type, found: string\nhttp://www.js-data.io/v3.0/docs/errors#400]\n   * @method utils.err\n   * @param {string} domain Namespace.\n   * @param {string} target Target.\n   * @returns {Function} Factory function.\n   * @since 3.0.0\n   */\n  err (domain, target) {\n    return function (code) {\n      const prefix = `[${domain}:${target}] `\n      let message = ERRORS[code].apply(\n        null,\n        Array.prototype.slice.call(arguments, 1)\n      )\n      message = `${prefix}${message}\nhttp://www.js-data.io/v3.0/docs/errors#${code}`\n      return new Error(message)\n    }\n  },\n\n  /**\n   * Add eventing capabilities into the target object.\n   *\n   * @example\n   * import { utils } from 'js-data';\n   * const user = { name: 'John' };\n   * utils.eventify(user);\n   * user.on('foo', () => console.log(arguments));\n   * user.emit('foo', 1, 'bar'); // should log to console values (1, \"bar\")\n   *\n   * @method utils.eventify\n   * @param {object} target Target object.\n   * @param {Function} [getter] Custom getter for retrieving the object's event\n   * listeners.\n   * @param {Function} [setter] Custom setter for setting the object's event\n   * listeners.\n   * @since 3.0.0\n   */\n  eventify (target, getter, setter) {\n    target = target || this\n    let _events = {}\n    if (!getter && !setter) {\n      getter = function () {\n        return _events\n      }\n      setter = function (value) {\n        _events = value\n      }\n    }\n    Object.defineProperties(target, {\n      emit: {\n        value (...args) {\n          const events = getter.call(this) || {}\n          const type = args.shift()\n          let listeners = events[type] || []\n          let i\n          for (i = 0; i < listeners.length; i++) {\n            listeners[i].f.apply(listeners[i].c, args)\n          }\n          listeners = events.all || []\n          args.unshift(type)\n          for (i = 0; i < listeners.length; i++) {\n            listeners[i].f.apply(listeners[i].c, args)\n          }\n        }\n      },\n      off: {\n        value (type, func) {\n          const events = getter.call(this)\n          const listeners = events[type]\n          if (!listeners) {\n            setter.call(this, {})\n          } else if (func) {\n            for (let i = 0; i < listeners.length; i++) {\n              if (listeners[i].f === func) {\n                listeners.splice(i, 1)\n                break\n              }\n            }\n          } else {\n            listeners.splice(0, listeners.length)\n          }\n        }\n      },\n      on: {\n        value (type, func, thisArg) {\n          if (!getter.call(this)) {\n            setter.call(this, {})\n          }\n          const events = getter.call(this)\n          events[type] = events[type] || []\n          events[type].push({\n            c: thisArg,\n            f: func\n          })\n        }\n      }\n    })\n  },\n\n  /**\n   * Shallow copy own enumerable properties from `src` to `dest` that are on\n   * `src` but are missing from `dest.\n   *\n   * @example\n   * import { utils } from 'js-data';\n   * const a = { foo: 'bar', beep: 'boop' };\n   * const b = { beep: 'bip' };\n   * utils.fillIn(b, a);\n   * console.log(b); // {\"foo\":\"bar\",\"beep\":\"bip\"}\n   *\n   * @method utils.fillIn\n   * @param {object} dest The destination object.\n   * @param {object} source The source object.\n   * @see utils.deepFillIn\n   * @see utils.deepMixIn\n   * @since 3.0.0\n   */\n  fillIn (dest, src) {\n    utils.forOwn(src, function (value, key) {\n      if (!Object.hasOwnProperty.call(dest, key) || dest[key] === undefined) {\n        dest[key] = value\n      }\n    })\n  },\n\n  /**\n   * Find the last index of an item in an array according to the given checker function.\n   *\n   * @example\n   * import { utils } from 'js-data';\n   *\n   * const john = { name: 'John', age: 20 };\n   * const sara = { name: 'Sara', age: 25 };\n   * const dan = { name: 'Dan', age: 20 };\n   * const users = [john, sara, dan];\n   *\n   * console.log(utils.findIndex(users, (user) => user.age === 25)); // 1\n   * console.log(utils.findIndex(users, (user) => user.age > 19)); // 2\n   * console.log(utils.findIndex(users, (user) => user.name === 'John')); // 0\n   * console.log(utils.findIndex(users, (user) => user.name === 'Jimmy')); // -1\n   *\n   * @method utils.findIndex\n   * @param {array} array The array to search.\n   * @param {Function} fn Checker function.\n   * @returns {number} Index if found or -1 if not found.\n   * @since 3.0.0\n   */\n  findIndex (array, fn) {\n    let index = -1\n    if (!array) {\n      return index\n    }\n    array.forEach(function (record, i) {\n      if (fn(record)) {\n        index = i\n        return false\n      }\n    })\n    return index\n  },\n\n  /**\n   * Recursively iterate over a {@link Mapper}'s relations according to\n   * `opts.with`.\n   *\n   * @method utils.forEachRelation\n   * @param {Mapper} mapper Mapper.\n   * @param {object} opts Configuration options.\n   * @param {Function} fn Callback function.\n   * @param {*} thisArg Execution context for the callback function.\n   * @since 3.0.0\n   */\n  forEachRelation (mapper, opts, fn, thisArg) {\n    const relationList = mapper.relationList || []\n    if (!relationList.length) {\n      return\n    }\n    relationList.forEach(function (def) {\n      utils._forRelation(opts, def, fn, thisArg)\n    })\n  },\n\n  /**\n   * Iterate over an object's own enumerable properties.\n   *\n   * @example\n   * import { utils } from 'js-data';\n   * const a = { b: 1, c: 4 };\n   * let sum = 0;\n   * utils.forOwn(a, function (value, key) {\n   *   sum += value;\n   * });\n   * console.log(sum); // 5\n   *\n   * @method utils.forOwn\n   * @param {object} object The object whose properties are to be enumerated.\n   * @param {Function} fn Iteration function.\n   * @param {object} [thisArg] Content to which to bind `fn`.\n   * @since 3.0.0\n   */\n  forOwn (obj, fn, thisArg) {\n    const keys = Object.keys(obj)\n    const len = keys.length\n    let i\n    for (i = 0; i < len; i++) {\n      if (fn.call(thisArg, obj[keys[i]], keys[i], obj) === false) {\n        break\n      }\n    }\n  },\n\n  /**\n   * Proxy for `JSON.parse`.\n   *\n   * @example\n   * import { utils } from 'js-data';\n   *\n   * const a = utils.fromJson('{\"name\" : \"John\"}');\n   * console.log(a); // { name: 'John' }\n   *\n   * @method utils.fromJson\n   * @param {string} json JSON to parse.\n   * @returns {Object} Parsed object.\n   * @see utils.toJson\n   * @since 3.0.0\n   */\n  fromJson (json) {\n    return utils.isString(json) ? JSON.parse(json) : json\n  },\n\n  /**\n   * Retrieve the specified property from the given object. Supports retrieving\n   * nested properties.\n   *\n   * @example\n   * import { utils } from 'js-data';\n   * const a = { foo: { bar: 'baz' }, beep: 'boop' };\n   * console.log(utils.get(a, 'beep')); // \"boop\"\n   * console.log(utils.get(a, 'foo.bar')); // \"baz\"\n   *\n   * @method utils.get\n   * @param {object} object Object from which to retrieve a property's value.\n   * @param {string} prop Property to retrieve.\n   * @returns {*} Value of the specified property.\n   * @see utils.set\n   * @since 3.0.0\n   */\n  get: function (object, prop) {\n    if (!prop) {\n      return\n    }\n    const parts = prop.split('.')\n    const last = parts.pop()\n\n    while ((prop = parts.shift())) {\n      // eslint-disable-line\n      object = object[prop]\n      if (object == null) {\n        // eslint-disable-line\n        return\n      }\n    }\n\n    return object[last]\n  },\n\n  /**\n   * Return the superclass for the given instance or subclass. If an instance is\n   * provided, then finds the parent class of the instance's constructor.\n   *\n   * @example\n   * import { utils } from 'js-data';\n   * // using ES2015 classes\n   * class Foo {}\n   * class Bar extends Foo {}\n   * const barInstance = new Bar();\n   * let baseType = utils.getSuper(barInstance);\n   * console.log(Foo === baseType); // true\n   *\n   * // using Function constructor with utils.extend\n   * function Foo () {}\n   * Foo.extend = utils.extend;\n   * const Bar = Foo.extend();\n   * const barInstance = new Bar();\n   * let baseType = utils.getSuper(barInstance);\n   * console.log(Foo === baseType); // true\n   *\n   * @method utils.getSuper\n   * @param {Object|Function} instance Instance or constructor.\n   * @param {boolean} [isCtor=false] Whether `instance` is a constructor.\n   * @returns {Constructor} The superclass (grandparent constructor).\n   * @since 3.0.0\n   */\n  getSuper (instance, isCtor) {\n    const ctor = isCtor ? instance : instance.constructor\n    if (Object.hasOwnProperty.call(ctor, '__super__')) {\n      return ctor.__super__\n    }\n    return Object.getPrototypeOf(ctor) || ctor.__proto__ // eslint-disable-line\n  },\n\n  /**\n   * Return the intersection of two arrays.\n   *\n   * @example\n   * import { utils } from 'js-data';\n   * const arrA = ['green', 'red', 'blue', 'red'];\n   * const arrB = ['green', 'yellow', 'red'];\n   * const intersected = utils.intersection(arrA, arrB);\n   *\n   * console.log(intersected); // ['green', 'red'])\n   *\n   * @method utils.intersection\n   * @param {array} array1 First array.\n   * @param {array} array2 Second array.\n   * @returns {Array} Array of elements common to both arrays.\n   * @since 3.0.0\n   */\n  intersection (array1, array2) {\n    if (!array1 || !array2) {\n      return []\n    }\n    array1 = Array.isArray(array1) ? array1 : [array1]\n    array2 = Array.isArray(array2) ? array2 : [array2]\n    const result = []\n    let item\n    let i\n    const len = array1.length\n    for (i = 0; i < len; i++) {\n      item = array1[i]\n      if (result.indexOf(item) !== -1) {\n        continue\n      }\n      if (array2.indexOf(item) !== -1) {\n        result.push(item)\n      }\n    }\n    return result\n  },\n\n  /**\n   * Proxy for `Array.isArray`.\n   *\n   * @example\n   * import { utils } from 'js-data';\n   * const a = [1,2,3,4,5];\n   * const b = { foo: \"bar\" };\n   * console.log(utils.isArray(a)); // true\n   * console.log(utils.isArray(b)); // false\n   *\n   * @method utils.isArray\n   * @param {*} value The value to test.\n   * @returns {boolean} Whether the provided value is an array.\n   * @since 3.0.0\n   */\n  isArray: Array.isArray,\n\n  /**\n   * Return whether `prop` is matched by any string or regular expression in\n   * `blacklist`.\n   *\n   * @example\n   * import { utils } from 'js-data';\n   * const blacklist = [/^\\$hashKey/g, /^_/g, 'id'];\n   * console.log(utils.isBlacklisted(\"$hashKey\", blacklist)); // true\n   * console.log(utils.isBlacklisted(\"id\", blacklist)); // true\n   * console.log(utils.isBlacklisted(\"_myProp\", blacklist)); // true\n   * console.log(utils.isBlacklisted(\"my_id\", blacklist)); // false\n   *\n   * @method utils.isBlacklisted\n   * @param {string} prop The name of a property to check.\n   * @param {array} blacklist Array of strings and regular expressions.\n   * @returns {boolean} Whether `prop` was matched.\n   * @since 3.0.0\n   */\n  isBlacklisted (prop, blacklist) {\n    if (!blacklist || !blacklist.length) {\n      return false\n    }\n    let matches\n    for (var i = 0; i < blacklist.length; i++) {\n      if (\n        (toStr(blacklist[i]) === REGEXP_TAG && blacklist[i].test(prop)) ||\n        blacklist[i] === prop\n      ) {\n        matches = prop\n        return !!matches\n      }\n    }\n    return !!matches\n  },\n\n  /**\n   * Return whether the provided value is a boolean.\n   *\n   * @example\n   * import { utils } from 'js-data';\n   * const a = true;\n   * const b = { foo: \"bar\" };\n   * console.log(utils.isBoolean(a)); // true\n   * console.log(utils.isBoolean(b)); // false\n   *\n   * @method utils.isBoolean\n   * @param {*} value The value to test.\n   * @returns {boolean} Whether the provided value is a boolean.\n   * @since 3.0.0\n   */\n  isBoolean (value) {\n    return toStr(value) === BOOL_TAG\n  },\n\n  /**\n   * Return whether the provided value is a date.\n   *\n   * @example\n   * import { utils } from 'js-data';\n   * const a = new Date();\n   * const b = { foo: \"bar\" };\n   * console.log(utils.isDate(a)); // true\n   * console.log(utils.isDate(b)); // false\n   *\n   * @method utils.isDate\n   * @param {*} value The value to test.\n   * @returns {Date} Whether the provided value is a date.\n   * @since 3.0.0\n   */\n  isDate (value) {\n    return value && typeof value === 'object' && toStr(value) === DATE_TAG\n  },\n\n  /**\n   * Return whether the provided value is a function.\n   *\n   * @example\n   * import { utils } from 'js-data';\n   * const a = function () { console.log('foo bar'); };\n   * const b = { foo: \"bar\" };\n   * console.log(utils.isFunction(a)); // true\n   * console.log(utils.isFunction(b)); // false\n   *\n   * @method utils.isFunction\n   * @param {*} value The value to test.\n   * @returns {boolean} Whether the provided value is a function.\n   * @since 3.0.0\n   */\n  isFunction (value) {\n    return typeof value === 'function' || (value && toStr(value) === FUNC_TAG)\n  },\n\n  /**\n   * Return whether the provided value is an integer.\n   *\n   * @example\n   * import { utils } from 'js-data';\n   * const a = 1;\n   * const b = 1.25;\n   * const c = '1';\n   * console.log(utils.isInteger(a)); // true\n   * console.log(utils.isInteger(b)); // false\n   * console.log(utils.isInteger(c)); // false\n   *\n   * @method utils.isInteger\n   * @param {*} value The value to test.\n   * @returns {boolean} Whether the provided value is an integer.\n   * @since 3.0.0\n   */\n  isInteger (value) {\n    return toStr(value) === NUMBER_TAG && value == toInteger(value) // eslint-disable-line\n  },\n\n  /**\n   * Return whether the provided value is `null`.\n   *\n   * @example\n   * import { utils } from 'js-data';\n   * const a = null;\n   * const b = { foo: \"bar\" };\n   * console.log(utils.isNull(a)); // true\n   * console.log(utils.isNull(b)); // false\n   *\n   * @method utils.isNull\n   * @param {*} value The value to test.\n   * @returns {boolean} Whether the provided value is `null`.\n   * @since 3.0.0\n   */\n  isNull (value) {\n    return value === null\n  },\n\n  /**\n   * Return whether the provided value is a number.\n   *\n   * @example\n   * import { utils } from 'js-data';\n   * const a = 1;\n   * const b = -1.25;\n   * const c = '1';\n   * console.log(utils.isNumber(a)); // true\n   * console.log(utils.isNumber(b)); // true\n   * console.log(utils.isNumber(c)); // false\n   *\n   * @method utils.isNumber\n   * @param {*} value The value to test.\n   * @returns {boolean} Whether the provided value is a number.\n   * @since 3.0.0\n   */\n  isNumber (value) {\n    const type = typeof value\n    return (\n      type === 'number' ||\n      (value && type === 'object' && toStr(value) === NUMBER_TAG)\n    )\n  },\n\n  /**\n   * Return whether the provided value is an object.\n   *\n   * @example\n   * import { utils } from 'js-data';\n   * const a = { foo: \"bar\" };\n   * const b = 'foo bar';\n   * console.log(utils.isObject(a)); // true\n   * console.log(utils.isObject(b)); // false\n   *\n   * @method utils.isObject\n   * @param {*} value The value to test.\n   * @returns {boolean} Whether the provided value is an object.\n   * @since 3.0.0\n   */\n  isObject (value) {\n    return toStr(value) === OBJECT_TAG\n  },\n\n  /**\n   * Return whether the provided value is a regular expression.\n   *\n   * @example\n   * import { utils } from 'js-data';\n   * const a = /^\\$.+$/ig;\n   * const b = new RegExp('^\\$.+$', 'ig');\n   * const c = { foo: \"bar\" };\n   * console.log(utils.isRegExp(a)); // true\n   * console.log(utils.isRegExp(b)); // true\n   * console.log(utils.isRegExp(c)); // false\n   *\n   * @method utils.isRegExp\n   * @param {*} value The value to test.\n   * @returns {boolean} Whether the provided value is a regular expression.\n   * @since 3.0.0\n   */\n  isRegExp (value) {\n    return toStr(value) === REGEXP_TAG\n  },\n\n  /**\n   * Return whether the provided value is a string or a number.\n   *\n   * @example\n   * import { utils } from 'js-data';\n   * console.log(utils.isSorN('')); // true\n   * console.log(utils.isSorN(-1.65)); // true\n   * console.log(utils.isSorN('my string')); // true\n   * console.log(utils.isSorN({})); // false\n   * console.log(utils.isSorN([1,2,4])); // false\n   *\n   * @method utils.isSorN\n   * @param {*} value The value to test.\n   * @returns {boolean} Whether the provided value is a string or a number.\n   * @since 3.0.0\n   */\n  isSorN (value) {\n    return utils.isString(value) || utils.isNumber(value)\n  },\n\n  /**\n   * Return whether the provided value is a string.\n   *\n   * @example\n   * import { utils } from 'js-data';\n   * console.log(utils.isString('')); // true\n   * console.log(utils.isString('my string')); // true\n   * console.log(utils.isString(100)); // false\n   * console.log(utils.isString([1,2,4])); // false\n   *\n   * @method utils.isString\n   * @param {*} value The value to test.\n   * @returns {boolean} Whether the provided value is a string.\n   * @since 3.0.0\n   */\n  isString (value) {\n    return (\n      typeof value === 'string' ||\n      (value && typeof value === 'object' && toStr(value) === STRING_TAG)\n    )\n  },\n\n  /**\n   * Return whether the provided value is a `undefined`.\n   *\n   * @example\n   * import { utils } from 'js-data';\n   * const a = undefined;\n   * const b = { foo: \"bar\"};\n   * console.log(utils.isUndefined(a)); // true\n   * console.log(utils.isUndefined(b.baz)); // true\n   * console.log(utils.isUndefined(b)); // false\n   * console.log(utils.isUndefined(b.foo)); // false\n   *\n   * @method utils.isUndefined\n   * @param {*} value The value to test.\n   * @returns {boolean} Whether the provided value is a `undefined`.\n   * @since 3.0.0\n   */\n  isUndefined (value) {\n    return value === undefined\n  },\n\n  /**\n   * Mix in logging capabilities to the target.\n   *\n   * @example\n   * import { utils } from 'js-data';\n   * const a = { foo: \"bar\"};\n   *\n   * // Add standard logging to an object\n   * utils.logify(a);\n   * a.log('info', 'test log info'); // output 'test log info' to console.\n   *\n   * // Toggle debug output of an object\n   * a.dbg('test debug output'); // does not output because debug is off.\n   * a.debug = true;\n   * a.dbg('test debug output'); // output 'test debug output' to console.\n   *\n   * @method utils.logify\n   * @param {*} target The target.\n   * @since 3.0.0\n   */\n  logify (target) {\n    utils.addHiddenPropsToTarget(target, {\n      dbg (...args) {\n        if (utils.isFunction(this.log)) {\n          this.log('debug', ...args)\n        }\n      },\n      log (level, ...args) {\n        if (level && !args.length) {\n          args.push(level)\n          level = 'debug'\n        }\n        if (level === 'debug' && !this.debug) {\n          return\n        }\n        const prefix = `${level.toUpperCase()}: (${this.name ||\n          this.constructor.name})`\n        if (utils.isFunction(console[level])) {\n          console[level](prefix, ...args)\n        } else {\n          console.log(prefix, ...args)\n        }\n      }\n    })\n  },\n\n  /**\n   * Adds the given record to the provided array only if it's not already in the\n   * array.\n   *\n   * @example\n   * import { utils } from 'js-data';\n   * const colors = ['red', 'green', 'yellow'];\n   *\n   * console.log(colors.length); // 3\n   * utils.noDupeAdd(colors, 'red');\n   * console.log(colors.length); // 3, red already exists\n   *\n   * utils.noDupeAdd(colors, 'blue');\n   * console.log(colors.length); // 4, blue was added\n   *\n   * @method utils.noDupeAdd\n   * @param {array} array The array.\n   * @param {*} record The value to add.\n   * @param {Function} fn Callback function passed to {@link utils.findIndex}.\n   * @since 3.0.0\n   */\n  noDupeAdd (array, record, fn) {\n    if (!array) {\n      return\n    }\n    const index = this.findIndex(array, fn)\n    if (index < 0) {\n      array.push(record)\n    }\n  },\n\n  /**\n   * Return a shallow copy of the provided object, minus the properties\n   * specified in `keys`.\n   *\n   * @example\n   * import { utils } from 'js-data';\n   * const a = { name: 'John', $hashKey: 1214910 };\n   *\n   * let b = utils.omit(a, ['$hashKey']);\n   * console.log(b); // { name: 'John' }\n   *\n   * @method utils.omit\n   * @param {object} props The object to copy.\n   * @param {string[]} keys Array of strings, representing properties to skip.\n   * @returns {Object} Shallow copy of `props`, minus `keys`.\n   * @since 3.0.0\n   */\n  omit (props, keys) {\n    const _props = {}\n    utils.forOwn(props, function (value, key) {\n      if (keys.indexOf(key) === -1) {\n        _props[key] = value\n      }\n    })\n    return _props\n  },\n\n  /**\n   * Return a shallow copy of the provided object, but only include the\n   * properties specified in `keys`.\n   *\n   * @example\n   * import { utils } from 'js-data';\n   * const a = { name: 'John', $hashKey: 1214910 };\n   *\n   * let b = utils.pick(a, ['$hashKey']);\n   * console.log(b); // { $hashKey: 1214910 }\n   *\n   * @method utils.pick\n   * @param {object} props The object to copy.\n   * @param {string[]} keys Array of strings, representing properties to keep.\n   * @returns {Object} Shallow copy of `props`, but only including `keys`.\n   * @since 3.0.0\n   */\n  pick (props, keys) {\n    return keys.reduce((map, key) => {\n      map[key] = props[key]\n      return map\n    }, {})\n  },\n\n  /**\n   * Return a plain copy of the given value.\n   *\n   * @example\n   * import { utils } from 'js-data';\n   * const a = { name: 'John' };\n   * let b = utils.plainCopy(a);\n   * console.log(a === b); // false\n   *\n   * @method utils.plainCopy\n   * @param {*} value The value to copy.\n   * @returns {*} Plain copy of `value`.\n   * @see utils.copy\n   * @since 3.0.0\n   */\n  plainCopy (value) {\n    return utils.copy(value, undefined, undefined, undefined, undefined, true)\n  },\n\n  /**\n   * Shortcut for `utils.Promise.reject(value)`.\n   *\n   * @example\n   * import { utils } from 'js-data';\n   *\n   * utils.reject(\"Testing static reject\").then(function (data) {\n   *   // not called\n   * }).catch(function (reason) {\n   *   console.log(reason); // \"Testing static reject\"\n   * });\n   *\n   * @method utils.reject\n   * @param {*} [value] Value with which to reject the Promise.\n   * @returns {Promise} Promise reject with `value`.\n   * @see utils.Promise\n   * @since 3.0.0\n   */\n  reject (value) {\n    return utils.Promise.reject(value)\n  },\n\n  /**\n   * Remove the last item found in array according to the given checker function.\n   *\n   * @example\n   * import { utils } from 'js-data';\n   *\n   * const colors = ['red', 'green', 'yellow', 'red'];\n   * utils.remove(colors, (color) => color === 'red');\n   * console.log(colors); // ['red', 'green', 'yellow']\n   *\n   * @method utils.remove\n   * @param {array} array The array to search.\n   * @param {Function} fn Checker function.\n   */\n  remove (array, fn) {\n    if (!array || !array.length) {\n      return\n    }\n    const index = this.findIndex(array, fn)\n    if (index >= 0) {\n      array.splice(index, 1) // todo should this be recursive?\n    }\n  },\n\n  /**\n   * Shortcut for `utils.Promise.resolve(value)`.\n   *\n   * @example\n   * import { utils } from 'js-data';\n   *\n   * utils.resolve(\"Testing static resolve\").then(function (data) {\n   *   console.log(data); // \"Testing static resolve\"\n   * }).catch(function (reason) {\n   *   // not called\n   * });\n   *\n   * @param {*} [value] Value with which to resolve the Promise.\n   * @returns {Promise} Promise resolved with `value`.\n   * @see utils.Promise\n   * @since 3.0.0\n   */\n  resolve (value) {\n    return utils.Promise.resolve(value)\n  },\n\n  /**\n   * Set the value at the provided key or path.\n   *\n   * @example\n   * import { utils } from 'js-data';\n   *\n   * const john = {\n   *   name: 'John',\n   *   age: 25,\n   *   parent: {\n   *     name: 'John's Mom',\n   *     age: 50\n   *   }\n   * };\n   * // set value by key\n   * utils.set(john, 'id', 98);\n   * console.log(john.id); // 98\n   *\n   * // set value by path\n   * utils.set(john, 'parent.id', 20);\n   * console.log(john.parent.id); // 20\n   *\n   * // set value by path/value map\n   * utils.set(john, {\n   *   'id': 1098,\n   *   'parent': { id: 1020 },\n   *   'parent.age': '55'\n   * });\n   * console.log(john.id); // 1098\n   * console.log(john.parent.id); // 1020\n   * console.log(john.parent.age); // 55\n   *\n   * @method utils.set\n   * @param {object} object The object on which to set a property.\n   * @param {(string|Object)} path The key or path to the property. Can also\n   * pass in an object of path/value pairs, which will all be set on the target\n   * object.\n   * @param {*} [value] The value to set.\n   */\n  set: function (object, path, value) {\n    if (utils.isObject(path)) {\n      utils.forOwn(path, function (value, _path) {\n        utils.set(object, _path, value)\n      })\n    } else {\n      const parts = PATH.exec(path)\n      if (parts) {\n        mkdirP(object, parts[1])[parts[2]] = value\n      } else {\n        object[path] = value\n      }\n    }\n  },\n\n  /**\n   * Check whether the two provided objects are deeply equal.\n   *\n   * @example\n   * import { utils } from 'js-data';\n   *\n   * const objA = {\n   *   name: 'John',\n   *   id: 27,\n   *   nested: {\n   *     item: 'item 1',\n   *     colors: ['red', 'green', 'blue']\n   *   }\n   * };\n   *\n   * const objB = {\n   *   name: 'John',\n   *   id: 27,\n   *   nested: {\n   *     item: 'item 1',\n   *     colors: ['red', 'green', 'blue']\n   *   }\n   * };\n   *\n   * console.log(utils.deepEqual(a,b)); // true\n   * objB.nested.colors.add('yellow'); // make a change to a nested object's array\n   * console.log(utils.deepEqual(a,b)); // false\n   *\n   * @method utils.deepEqual\n   * @param {object} a First object in the comparison.\n   * @param {object} b Second object in the comparison.\n   * @returns {boolean} Whether the two provided objects are deeply equal.\n   * @see utils.equal\n   * @since 3.0.0\n   */\n  deepEqual (a, b) {\n    if (a === b) {\n      return true\n    }\n    let _equal = true\n    if (utils.isArray(a) && utils.isArray(b)) {\n      if (a.length !== b.length) {\n        return false\n      }\n      for (let i = a.length; i--;) {\n        if (!utils.deepEqual(a[i], b[i])) {\n          // Exit loop early\n          return false\n        }\n      }\n    } else if (utils.isObject(a) && utils.isObject(b)) {\n      utils.forOwn(a, function (value, key) {\n        if (!(_equal = utils.deepEqual(value, b[key]))) {\n          // Exit loop early\n          return false\n        }\n      })\n      if (_equal) {\n        utils.forOwn(b, function (value, key) {\n          if (!(_equal = utils.deepEqual(value, a[key]))) {\n            // Exit loop early\n            return false\n          }\n        })\n      }\n    } else {\n      return false\n    }\n    return _equal\n  },\n\n  /**\n   * Proxy for `JSON.stringify`.\n   *\n   * @example\n   * import { utils } from 'js-data';\n   *\n   * const a = { name: 'John' };\n   * let jsonVal = utils.toJson(a);\n   * console.log(jsonVal); // '{\"name\" : \"John\"}'\n   *\n   * @method utils.toJson\n   * @param {*} value Value to serialize to JSON.\n   * @returns {string} JSON string.\n   * @see utils.fromJson\n   * @since 3.0.0\n   */\n  toJson: JSON.stringify,\n\n  /**\n   * Unset the value at the provided key or path.\n   *\n   * @example\n   * import { utils } from 'js-data';\n   *\n   * const john = {\n   *   name: 'John',\n   *   age: 25,\n   *   parent: {\n   *     name: 'John's Mom',\n   *     age: 50\n   *   }\n   * };\n   *\n   * utils.unset(john, age);\n   * utils.unset(john, parent.age);\n   *\n   * console.log(john.age); // null\n   * console.log(john.parent.age); // null\n   *\n   * @method utils.unset\n   * @param {object} object The object from which to delete the property.\n   * @param {string} path The key or path to the property.\n   * @see utils.set\n   * @since 3.0.0\n   */\n  unset (object, path) {\n    const parts = path.split('.')\n    const last = parts.pop()\n\n    while ((path = parts.shift())) {\n      // eslint-disable-line\n      object = object[path]\n      if (object == null) {\n        // eslint-disable-line\n        return\n      }\n    }\n\n    object[last] = undefined\n  }\n}\n\nexport const safeSetProp = function (record, field, value) {\n  if (record && record._set) {\n    record._set(`props.${field}`, value)\n  } else {\n    utils.set(record, field, value)\n  }\n}\n\nexport const safeSetLink = function (record, field, value) {\n  if (record && record._set) {\n    record._set(`links.${field}`, value)\n  } else {\n    utils.set(record, field, value)\n  }\n}\n\nexport default utils\n","import utils from './utils'\n\n/**\n * A base class which gives instances private properties.\n *\n * Typically you won't instantiate this class directly, but you may find it\n * useful as an abstract class for your own components.\n *\n *```javascript\n * import {Settable} from 'js-data'\n *\n * class CustomSettableClass extends Settable {\n *   foo () { return 'bar'; }\n *   static beep () { return 'boop'; }\n * }\n *\n * const customSettable = new CustomSettableClass();\n * console.log(customSettable.foo());\n * console.log(CustomSettableClass.beep());\n *\n * ```\n *\n * @class Settable\n * @returns {Settable} A new {@link Settable} instance.\n * @since 3.0.0\n */\nexport default class Settable {\n  constructor () {\n    const _props = {}\n    Object.defineProperties(this, {\n      /**\n       * Get a private property of this instance.\n       *\n       * __Don't use the method unless you know what you're doing.__\n       *\n       * @method Settable#_get\n       * @param {string} key The property to retrieve.\n       * @returns {*} The value of the property.\n       * @since 3.0.0\n       */\n      _get: { value (key) { return utils.get(_props, key) } },\n\n      /**\n       * Set a private property of this instance.\n       *\n       * __Don't use the method unless you know what you're doing.__\n       *\n       * @method __Don't use the method unless you know what you're doing.__#_set\n       * @param {(string|Object)} key The key or path to the property. Can also\n       * pass in an object of key/value pairs, which will all be set on the instance.\n       * @param {*} [value] The value to set.\n       * @since 3.0.0\n       */\n      _set: { value (key, value) { return utils.set(_props, key, value) } },\n\n      /**\n       * Unset a private property of this instance.\n       *\n       * __Don't use the method unless you know what you're doing.__\n       *\n       * @method __Don't use the method unless you know what you're doing.__#_unset\n       * @param {string} key The property to unset.\n       * @since 3.0.0\n       */\n      _unset: { value (key) { return utils.unset(_props, key) } }\n    })\n  }\n}\n","import utils from './utils'\nimport Settable from './Settable'\n\n/**\n * The base class from which all JSData components inherit some basic\n * functionality.\n *\n * Typically you won't instantiate this class directly, but you may find it\n * useful as an abstract class for your own components.\n *\n *```javascript\n * import {Component} from 'js-data'\n *\n * class CustomComponentClass extends Component {\n *   foo () { return 'bar'; }\n *   static beep () { return 'boop'; }\n * }\n * const customComponent = new CustomComponentClass();\n * console.log(customComponent.foo());\n * console.log(CustomComponentClass.beep());\n * ```\n *\n * @class Component\n * @param {object} [opts] Configuration options.\n * @param {boolean} [opts.debug=false] See {@link Component#debug}.\n * @returns {Component} A new {@link Component} instance.\n * @since 3.0.0\n */\nexport default class Component extends Settable {\n  constructor (opts = {}) {\n    super()\n\n    /**\n   * Whether to enable debug-level logs for this component. Anything that\n   * extends `Component` inherits this option and the corresponding logging\n   * functionality.\n   *\n   * @example <caption>Component#debug</caption>\n   * const JSData = require('js-data');\n   * const { Component } = JSData;\n   * console.log('Using JSData v' + JSData.version.full);\n   *\n   * const component = new Component();\n   * component.log('debug', 'some message'); // nothing gets logged\n   * // Display debug logs:\n   * component.debug = true;\n   * component.log('debug', 'other message'); // this DOES get logged\n   *\n   * @default false\n   * @name Component#debug\n   * @since 3.0.0\n   * @type {boolean}\n   */\n    this.debug = Object.hasOwnProperty.call(opts, 'debug') ? !!opts.debug : false\n\n    /**\n     * Event listeners attached to this Component. __Do not modify.__ Use\n     * {@link Component#on} and {@link Component#off} instead.\n     *\n     * @name Component#_listeners\n     * @private\n     * @instance\n     * @since 3.0.0\n     * @type {Object}\n     */\n    Object.defineProperty(this, '_listeners', { value: {}, writable: true })\n  }\n}\n\n/**\n * Log the provided values at the \"debug\" level. Debug-level logs are only\n * logged if {@link Component#debug} is `true`.\n *\n * `.dbg(...)` is shorthand for `.log('debug', ...)`.\n *\n * @method Component#dbg\n * @param {...*} [args] Values to log.\n * @since 3.0.0\n */\n/**\n * Log the provided values. By default sends values to `console[level]`.\n * Debug-level logs are only logged if {@link Component#debug} is `true`.\n *\n * Will attempt to use appropriate `console` methods if they are available.\n *\n * @method Component#log\n * @param {string} level Log level.\n * @param {...*} [args] Values to log.\n * @since 3.0.0\n */\nutils.logify(Component.prototype)\n\n/**\n * Register a new event listener on this Component.\n *\n * @example\n * // Listen for all \"afterCreate\" events in a DataStore\n * store.on('afterCreate', (mapperName, props, opts, result) => {\n *   console.log(mapperName); // \"post\"\n *   console.log(props.id); // undefined\n *   console.log(result.id); // 1234\n * });\n * store.create('post', { title: 'Modeling your data' }).then((post) => {\n *   console.log(post.id); // 1234\n * });\n *\n * @example\n * // Listen for the \"add\" event on a collection\n * collection.on('add', (records) => {\n *   console.log(records); // [...]\n * });\n *\n * @example\n * // Listen for \"change\" events on a record\n * post.on('change', (record, changes) => {\n *   console.log(changes); // { changed: { title: 'Modeling your data' } }\n * });\n * post.title = 'Modeling your data';\n *\n * @method Component#on\n * @param {string} event Name of event to subsribe to.\n * @param {Function} listener Listener function to handle the event.\n * @param {*} [ctx] Optional content in which to invoke the listener.\n * @since 3.0.0\n */\n/**\n * Remove an event listener from this Component. If no listener is provided,\n * then all listeners for the specified event will be removed. If no event is\n * specified then all listeners for all events will be removed.\n *\n * @example\n * // Remove a particular listener for a particular event\n * collection.off('add', handler);\n *\n * @example\n * // Remove all listeners for a particular event\n * record.off('change');\n *\n * @example\n * // Remove all listeners to all events\n * store.off();\n *\n * @method Component#off\n * @param {string} [event] Name of event to unsubsribe to.\n * @param {Function} [listener] Listener to remove.\n * @since 3.0.0\n */\n/**\n * Trigger an event on this Component.\n *\n * @example <caption>Component#emit</caption>\n * // import { Collection, DataStore } from 'js-data';\n * const JSData = require('js-data');\n * const { Collection, DataStore } = JSData;\n *\n * const collection = new Collection();\n * collection.on('foo', function (msg) {\n *   console.log(msg);\n * });\n * collection.emit('foo', 'bar');\n *\n * const store = new DataStore();\n * store.on('beep', function (msg) {\n *   console.log(msg);\n * });\n * store.emit('beep', 'boop');\n *\n * @method Component#emit\n * @param {string} event Name of event to emit.\n * @param {...*} [args] Arguments to pass to any listeners.\n * @since 3.0.0\n */\nutils.eventify(\n  Component.prototype,\n  function () {\n    return this._listeners\n  },\n  function (value) {\n    this._listeners = value\n  }\n)\n","import utils from './utils'\nimport Component from './Component'\n\nconst DOMAIN = 'Query'\nconst INDEX_ERR = 'Index inaccessible after first operation'\n\n// Reserved words used by JSData's Query Syntax\nconst reserved = {\n  limit: '',\n  offset: '',\n  orderBy: '',\n  skip: '',\n  sort: '',\n  where: ''\n}\n\n// Used by our JavaScript implementation of the LIKE operator\nconst escapeRegExp = /([.*+?^=!:${}()|[\\]/\\\\])/g\nconst percentRegExp = /%/g\nconst underscoreRegExp = /_/g\nconst escape = function (pattern) {\n  return pattern.replace(escapeRegExp, '\\\\$1')\n}\n\n/**\n * A class used by the {@link Collection} class to build queries to be executed\n * against the collection's data. An instance of `Query` is returned by\n * {@link Collection#query}. Query instances are typically short-lived, and you\n * shouldn't have to create them yourself. Just use {@link Collection#query}.\n *\n * ```javascript\n * import { Query } from 'js-data';\n * ```\n *\n * @example <caption>Query intro</caption>\n * const JSData = require('js-data');\n * const { DataStore } = JSData;\n * console.log('Using JSData v' + JSData.version.full);\n *\n * const store = new DataStore();\n * store.defineMapper('post');\n * const posts = [\n *   { author: 'John', age: 30, status: 'published', id: 1 },\n *   { author: 'Sally', age: 31, status: 'draft', id: 2 },\n *   { author: 'Mike', age: 32, status: 'draft', id: 3 },\n *   { author: 'Adam', age: 33, status: 'deleted', id: 4 },\n *   { author: 'Adam', age: 33, status: 'draft', id: 5 }\n * ]\n * store.add('post', posts);\n * const drafts = store.query('post').filter({ status: 'draft' }).limit(2).run();\n * console.log(drafts);\n *\n * @class Query\n * @extends Component\n * @param {Collection} collection The collection on which this query operates.\n * @since 3.0.0\n */\nexport default class Query extends Component {\n  constructor (collection) {\n    super()\n\n    /**\n     * The {@link Collection} on which this query operates.\n     *\n     * @name Query#collection\n     * @since 3.0.0\n     * @type {Collection}\n     */\n    this.collection = collection\n\n    /**\n     * The current data result of this query.\n     *\n     * @name Query#data\n     * @since 3.0.0\n     * @type {Array}\n     */\n    this.data = null\n  }\n\n  _applyWhereFromObject (where) {\n    const fields = []\n    const ops = []\n    const predicates = []\n    utils.forOwn(where, (clause, field) => {\n      if (!utils.isObject(clause)) {\n        clause = {\n          '==': clause\n        }\n      }\n      utils.forOwn(clause, (expr, op) => {\n        fields.push(field)\n        ops.push(op)\n        predicates.push(expr)\n      })\n    })\n    return {\n      fields,\n      ops,\n      predicates\n    }\n  }\n\n  _applyWhereFromArray (where) {\n    const groups = []\n    where.forEach((_where, i) => {\n      if (utils.isString(_where)) {\n        return\n      }\n      const prev = where[i - 1]\n      const parser = utils.isArray(_where) ? this._applyWhereFromArray : this._applyWhereFromObject\n      const group = parser.call(this, _where)\n      if (prev === 'or') {\n        group.isOr = true\n      }\n      groups.push(group)\n    })\n    groups.isArray = true\n    return groups\n  }\n\n  _testObjectGroup (keep, first, group, item) {\n    let i\n    const fields = group.fields\n    const ops = group.ops\n    const predicates = group.predicates\n    const len = ops.length\n    for (i = 0; i < len; i++) {\n      let op = ops[i]\n      const isOr = op.charAt(0) === '|'\n      op = isOr ? op.substr(1) : op\n      const expr = this.evaluate(utils.get(item, fields[i]), op, predicates[i])\n      if (expr !== undefined) {\n        keep = first ? expr : (isOr ? keep || expr : keep && expr)\n      }\n      first = false\n    }\n    return { keep, first }\n  }\n\n  _testArrayGroup (keep, first, groups, item) {\n    let i\n    const len = groups.length\n    for (i = 0; i < len; i++) {\n      const group = groups[i]\n      const parser = group.isArray ? this._testArrayGroup : this._testObjectGroup\n      const result = parser.call(this, true, true, group, item)\n      if (groups[i - 1]) {\n        if (group.isOr) {\n          keep = keep || result.keep\n        } else {\n          keep = keep && result.keep\n        }\n      } else {\n        keep = result.keep\n      }\n      first = result.first\n    }\n    return { keep, first }\n  }\n\n  /**\n   * Find all entities between two boundaries.\n   *\n   * @example <caption>Get the users ages 18 to 30.</caption>\n   * const JSData = require('js-data');\n   * const { DataStore } = JSData;\n   * console.log('Using JSData v' + JSData.version.full);\n   *\n   * const store = new DataStore();\n   * store.defineMapper('user');\n   * const users = [\n   *   { name: 'Peter', age: 25, id: 1 },\n   *   { name: 'Jim', age: 19, id: 2 },\n   *   { name: 'Mike', age: 17, id: 3 },\n   *   { name: 'Alan', age: 29, id: 4 },\n   *   { name: 'Katie', age: 33, id: 5 }\n   * ];\n   * store.add('user', users)\n   * const filteredUsers = store\n   *   .query('user')\n   *   .between(18, 30, { index: 'age' })\n   *   .run();\n   * console.log(filteredUsers);\n   *\n   * @example <caption>Same as above.</caption>\n   * const JSData = require('js-data');\n   * const { DataStore } = JSData;\n   * console.log('Using JSData v' + JSData.version.full);\n   *\n   * const store = new DataStore();\n   * store.defineMapper('user');\n   * const users = [\n   *   { name: 'Peter', age: 25, id: 1 },\n   *   { name: 'Jim', age: 19, id: 2 },\n   *   { name: 'Mike', age: 17, id: 3 },\n   *   { name: 'Alan', age: 29, id: 4 },\n   *   { name: 'Katie', age: 33, id: 5 }\n   * ];\n   * store.add('user', users)\n   * const filteredUsers = store\n   *   .query('user')\n   *   .between([18], [30], { index: 'age' })\n   *   .run();\n   * console.log(filteredUsers);\n   *\n   * @method Query#between\n   * @param {array} leftKeys Keys defining the left boundary.\n   * @param {array} rightKeys Keys defining the right boundary.\n   * @param {object} [opts] Configuration options.\n   * @param {string} [opts.index] Name of the secondary index to use in the\n   * query. If no index is specified, the main index is used.\n   * @param {boolean} [opts.leftInclusive=true] Whether to include entities\n   * on the left boundary.\n   * @param {boolean} [opts.rightInclusive=false] Whether to include entities\n   * on the left boundary.\n   * @param {boolean} [opts.limit] Limit the result to a certain number.\n   * @param {boolean} [opts.offset] The number of resulting entities to skip.\n   * @returns {Query} A reference to itself for chaining.\n   * @since 3.0.0\n   */\n  between (leftKeys, rightKeys, opts = {}) {\n    if (this.data) {\n      throw utils.err(`${DOMAIN}#between`)(500, 'Cannot access index')\n    }\n    this.data = this.collection.getIndex(opts.index).between(leftKeys, rightKeys, opts)\n    return this\n  }\n\n  /**\n   * The comparison function used by the {@link Query} class.\n   *\n   * @method Query#compare\n   * @param {array} orderBy An orderBy clause used for sorting and sub-sorting.\n   * @param {number} index The index of the current orderBy clause being used.\n   * @param {*} a The first item in the comparison.\n   * @param {*} b The second item in the comparison.\n   * @returns {number} -1 if `b` should preceed `a`. 0 if `a` and `b` are equal.\n   * 1 if `a` should preceed `b`.\n   * @since 3.0.0\n   */\n  compare (orderBy, index, a, b) {\n    const def = orderBy[index]\n    let cA = utils.get(a, def[0])\n    let cB = utils.get(b, def[0])\n    if (cA && utils.isString(cA)) {\n      cA = cA.toUpperCase()\n    }\n    if (cB && utils.isString(cB)) {\n      cB = cB.toUpperCase()\n    }\n    if (a === undefined) {\n      a = null\n    }\n    if (b === undefined) {\n      b = null\n    }\n    if (def[1].toUpperCase() === 'DESC') {\n      const temp = cB\n      cB = cA\n      cA = temp\n    }\n    if (cA < cB) {\n      return -1\n    } else if (cA > cB) {\n      return 1\n    } else {\n      if (index < orderBy.length - 1) {\n        return this.compare(orderBy, index + 1, a, b)\n      } else {\n        return 0\n      }\n    }\n  }\n\n  /**\n   * Predicate evaluation function used by the {@link Query} class.\n   *\n   * @method Query#evaluate\n   * @param {*} value The value to evaluate.\n   * @param {string} op The operator to use in this evaluation.\n   * @param {*} predicate The predicate to use in this evaluation.\n   * @returns {boolean} Whether the value passed the evaluation or not.\n   * @since 3.0.0\n   */\n  evaluate (value, op, predicate) {\n    const ops = Query.ops\n    if (ops[op]) {\n      return ops[op](value, predicate)\n    }\n    if (op.indexOf('like') === 0) {\n      return this.like(predicate, op.substr(4)).exec(value) !== null\n    } else if (op.indexOf('notLike') === 0) {\n      return this.like(predicate, op.substr(7)).exec(value) === null\n    }\n  }\n\n  /**\n   * Find the record or records that match the provided query or are accepted by\n   * the provided filter function.\n   *\n   * @example <caption>Get the draft posts by authors younger than 30</caption>\n   * const JSData = require('js-data');\n   * const { DataStore } = JSData;\n   * console.log('Using JSData v' + JSData.version.full);\n   *\n   * const store = new DataStore();\n   * store.defineMapper('post')\n   * const posts = [\n   *   { author: 'John', age: 30, status: 'published', id: 1 },\n   *   { author: 'Sally', age: 31, status: 'published', id: 2 },\n   *   { author: 'Mike', age: 32, status: 'draft', id: 3 },\n   *   { author: 'Adam', age: 33, status: 'deleted', id: 4 },\n   *   { author: 'Adam', age: 33, status: 'published', id: 5 }\n   *   { author: 'Peter', age: 25, status: 'deleted', id: 6 },\n   *   { author: 'Sally', age: 21, status: 'draft', id: 7 },\n   *   { author: 'Jim', age: 27, status: 'draft', id: 8 },\n   *   { author: 'Jim', age: 27, status: 'published', id: 9 },\n   *   { author: 'Jason', age: 55, status: 'published', id: 10 }\n   * ];\n   * store.add('post', posts);\n   * const results = store\n   *   .query('post')\n   *   .filter({\n   *     where: {\n   *       status: {\n   *         '==': 'draft'\n   *       },\n   *       age: {\n   *         '<': 30\n   *       }\n   *     }\n   *   })\n   *   .run();\n   * console.log(results);\n   *\n   * @example <caption>Use a custom filter function</caption>\n   * const posts = query\n   *   .filter(function (post) {\n   *     return post.isReady();\n   *   })\n   *   .run();\n   *\n   * @method Query#filter\n   * @param {(Object|Function)} [queryOrFn={}] Selection query or filter\n   * function.\n   * @param {Function} [thisArg] Context to which to bind `queryOrFn` if\n   * `queryOrFn` is a function.\n   * @returns {Query} A reference to itself for chaining.\n   * @since 3.0.0\n   */\n  filter (query, thisArg) {\n    /**\n     * Selection query as defined by JSData's [Query Syntax][querysyntax].\n     *\n     * [querysyntax]: http://www.js-data.io/v3.0/docs/query-syntax\n     *\n     * @example <caption>Empty \"findAll\" query</caption>\n     * const JSData = require('js-data');\n     * const { DataStore } = JSData;\n     * console.log('Using JSData v' + JSData.version.full);\n     *\n     * const store = new DataStore();\n     * store.defineMapper('post')\n     * store.findAll('post').then((posts) => {\n     *   console.log(posts); // [...]\n     * });\n     *\n     * @example <caption>Empty \"filter\" query</caption>\n     * const JSData = require('js-data');\n     * const { DataStore } = JSData;\n     * console.log('Using JSData v' + JSData.version.full);\n     *\n     * const store = new DataStore();\n     * store.defineMapper('post');\n     * const posts = store.filter('post');\n     * console.log(posts); // [...]\n     *\n     * @example <caption>Complex \"filter\" query</caption>\n     * const JSData = require('js-data');\n     * const { DataStore } = JSData;\n     * console.log('Using JSData v' + JSData.version.full);\n     *\n     * const store = new DataStore();\n     * const PAGE_SIZE = 2;\n     * let currentPage = 3;\n     *\n     * store.defineMapper('post');\n     * const posts = [\n     *   { author: 'John', age: 30, status: 'published', id: 1 },\n     *   { author: 'Sally', age: 31, status: 'published', id: 2 },\n     *   { author: 'Mike', age: 32, status: 'draft', id: 3 },\n     *   { author: 'Adam', age: 33, status: 'deleted', id: 4 },\n     *   { author: 'Adam', age: 33, status: 'published', id: 5 }\n     *   { author: 'Peter', age: 25, status: 'deleted', id: 6 },\n     *   { author: 'Sally', age: 21, status: 'draft', id: 7 },\n     *   { author: 'Jim', age: 27, status: 'draft', id: 8 },\n     *   { author: 'Jim', age: 27, status: 'published', id: 9 },\n     *   { author: 'Jason', age: 55, status: 'published', id: 10 }\n     * ];\n     * store.add('post', posts);\n     * // Retrieve a filtered page of blog posts\n     * // Would typically replace filter with findAll\n     * const results = store.filter('post', {\n     *   where: {\n     *     status: {\n     *       // WHERE status = 'published'\n     *       '==': 'published'\n     *     },\n     *     author: {\n     *       // AND author IN ('bob', 'alice')\n     *       'in': ['bob', 'alice'],\n     *       // OR author IN ('karen')\n     *       '|in': ['karen']\n     *     }\n     *   },\n     *   orderBy: [\n     *     // ORDER BY date_published DESC,\n     *     ['date_published', 'DESC'],\n     *     // ORDER BY title ASC\n     *     ['title', 'ASC']\n     *   ],\n     *   // LIMIT 2\n     *   limit: PAGE_SIZE,\n     *   // SKIP 4\n     *   offset: PAGE_SIZE * (currentPage - 1)\n     * });\n     * console.log(results);\n     *\n     * @namespace query\n     * @property {number} [limit] See {@link query.limit}.\n     * @property {number} [offset] See {@link query.offset}.\n     * @property {string|Array[]} [orderBy] See {@link query.orderBy}.\n     * @property {number} [skip] Alias for {@link query.offset}.\n     * @property {string|Array[]} [sort] Alias for {@link query.orderBy}.\n     * @property {Object} [where] See {@link query.where}.\n     * @since 3.0.0\n     * @tutorial [\"http://www.js-data.io/v3.0/docs/query-syntax\",\"JSData's Query Syntax\"]\n     */\n    query || (query = {})\n    this.getData()\n    if (utils.isObject(query)) {\n      let where = {}\n\n      /**\n       * Filtering criteria. Records that do not meet this criteria will be exluded\n       * from the result.\n       *\n       * @example <caption>Return posts where author is at least 32 years old</caption>\n       * const JSData = require('js-data');\n       * const { DataStore } = JSData;\n       * console.log('Using JSData v' + JSData.version.full);\n       *\n       * const store = new DataStore();\n       * store.defineMapper('post')\n       * const posts = [\n       *   { author: 'John', age: 30, id: 5 },\n       *   { author: 'Sally', age: 31, id: 6 },\n       *   { author: 'Mike', age: 32, id: 7 },\n       *   { author: 'Adam', age: 33, id: 8 },\n       *   { author: 'Adam', age: 33, id: 9 }\n       * ];\n       * store.add('post', posts);\n       * const results = store.filter('post', {\n       *   where: {\n       *     age: {\n       *       '>=': 30\n       *     }\n       *   }\n       * });\n       * console.log(results);\n       *\n       * @name query.where\n       * @type {Object}\n       * @see http://www.js-data.io/v3.0/docs/query-syntax\n       * @since 3.0.0\n       */\n      if (utils.isObject(query.where) || utils.isArray(query.where)) {\n        where = query.where\n      }\n      utils.forOwn(query, function (value, key) {\n        if (!(key in reserved) && !(key in where)) {\n          where[key] = {\n            '==': value\n          }\n        }\n      })\n      let groups\n\n      // Apply filter for each field\n      if (utils.isObject(where) && Object.keys(where).length !== 0) {\n        groups = this._applyWhereFromArray([where])\n      } else if (utils.isArray(where)) {\n        groups = this._applyWhereFromArray(where)\n      }\n\n      if (groups) {\n        this.data = this.data.filter((item, i) => this._testArrayGroup(true, true, groups, item).keep)\n      }\n\n      // Sort\n      let orderBy = query.orderBy || query.sort\n\n      if (utils.isString(orderBy)) {\n        orderBy = [\n          [orderBy, 'ASC']\n        ]\n      }\n      if (!utils.isArray(orderBy)) {\n        orderBy = null\n      }\n\n      /**\n       * Determines how records should be ordered in the result.\n       *\n       * @example <caption>Order posts by `author` then by `id` descending </caption>\n       * const JSData = require('js-data');\n       * const { DataStore } = JSData;\n       * console.log('Using JSData v' + JSData.version.full);\n       *\n       * const store = new DataStore();\n       * store.defineMapper('post')\n       * const posts = [\n       *   { author: 'John', age: 30, id: 5 },\n       *   { author: 'Sally', age: 31, id: 6 },\n       *   { author: 'Mike', age: 32, id: 7 },\n       *   { author: 'Adam', age: 33, id: 8 },\n       *   { author: 'Adam', age: 33, id: 9 }\n       * ];\n       * store.add('post', posts);\n       * const results = store.filter('post', {\n       *     orderBy:[['author','ASC'],['id','DESC']]\n       * });\n       * console.log(results);\n       *\n       * @name query.orderBy\n       * @type {string|Array[]}\n       * @see http://www.js-data.io/v3.0/docs/query-syntax\n       * @since 3.0.0\n       */\n      if (orderBy) {\n        const index = 0\n        orderBy.forEach(function (def, i) {\n          if (utils.isString(def)) {\n            orderBy[i] = [def, 'ASC']\n          }\n        })\n        this.data.sort((a, b) => this.compare(orderBy, index, a, b))\n      }\n\n      /**\n       * Number of records to skip.\n       *\n       * @example <caption>Retrieve the first \"page\" of blog posts using findAll</caption>\n       * const JSData = require('js-data');\n       * const { DataStore } = JSData;\n       * console.log('Using JSData v' + JSData.version.full);\n       *\n       * const store = new DataStore();\n       * store.defineMapper('post');\n       * const PAGE_SIZE = 10;\n       * let currentPage = 1;\n       * store.findAll('post', {\n       *   offset: PAGE_SIZE * (currentPage 1)\n       *   limit: PAGE_SIZE\n       * });\n       *\n       * @example <caption>Retrieve the last \"page\" of blog posts using filter</caption>\n       * const JSData = require('js-data');\n       * const { DataStore } = JSData;\n       * console.log('Using JSData v' + JSData.version.full);\n       *\n       * const store = new DataStore();\n       *\n       * const PAGE_SIZE = 5;\n       * let currentPage = 2;\n       * store.defineMapper('post');\n       * const posts = [\n       *   { author: 'John', age: 30, id: 1 },\n       *   { author: 'Sally', age: 31, id: 2 },\n       *   { author: 'Mike', age: 32, id: 3 },\n       *   { author: 'Adam', age: 33, id: 4 },\n       *   { author: 'Adam', age: 33, id: 5 },\n       *   { author: 'Peter', age: 25, id: 6 },\n       *   { author: 'Sally', age: 21, id: 7 },\n       *   { author: 'Jim', age: 27, id: 8 },\n       *   { author: 'Jim', age: 27, id: 9 },\n       *   { author: 'Jason', age: 55, id: 10 }\n       * ];\n       * store.add('post', posts);\n       * const results = store.filter('post', {\n       *   offset: PAGE_SIZE * (currentPage 1)\n       *   limit: PAGE_SIZE\n       * });\n       * console.log(results)\n       *\n       * @name query.offset\n       * @type {number}\n       * @see http://www.js-data.io/v3.0/docs/query-syntax\n       * @since 3.0.0\n       */\n      if (utils.isNumber(query.skip)) {\n        this.skip(query.skip)\n      } else if (utils.isNumber(query.offset)) {\n        this.skip(query.offset)\n      }\n\n      /**\n       * Maximum number of records to retrieve.\n       *\n       * @example <caption>Retrieve the first \"page\" of blog posts using findAll</caption>\n       * const JSData = require('js-data');\n       * const { DataStore } = JSData;\n       * console.log('Using JSData v' + JSData.version.full);\n       *\n       * const store = new DataStore();\n       * store.defineMapper('post');\n       *\n       * const PAGE_SIZE = 10\n       * let currentPage = 1\n       * store.findAll('post', {\n       *   offset: PAGE_SIZE * (currentPage 1)\n       *   limit: PAGE_SIZE\n       * });\n       *\n       * @example <caption>Retrieve the last \"page\" of blog posts using filter</caption>\n       * const JSData = require('js-data');\n       * const { DataStore } = JSData;\n       * console.log('Using JSData v' + JSData.version.full);\n       *\n       * const store = new DataStore();\n       *\n       * const PAGE_SIZE = 5\n       * let currentPage = 2\n       * store.defineMapper('post')\n       * const posts = [\n       *   { author: 'John', age: 30, id: 1 },\n       *   { author: 'Sally', age: 31, id: 2 },\n       *   { author: 'Mike', age: 32, id: 3 },\n       *   { author: 'Adam', age: 33, id: 4 },\n       *   { author: 'Adam', age: 33, id: 5 },\n       *   { author: 'Peter', age: 25, id: 6 },\n       *   { author: 'Sally', age: 21, id: 7 },\n       *   { author: 'Jim', age: 27, id: 8 },\n       *   { author: 'Jim', age: 27, id: 9 },\n       *   { author: 'Jason', age: 55, id: 10 }\n       * ];\n       * store.add('post', posts);\n       * const results = store.filter('post', {\n       *   offset: PAGE_SIZE * (currentPage 1)\n       *   limit: PAGE_SIZE\n       * });\n       * console.log(results)\n       *\n       * @name query.limit\n       * @type {number}\n       * @see http://www.js-data.io/v3.0/docs/query-syntax\n       * @since 3.0.0\n       */\n      if (utils.isNumber(query.limit)) {\n        this.limit(query.limit)\n      }\n    } else if (utils.isFunction(query)) {\n      this.data = this.data.filter(query, thisArg)\n    }\n    return this\n  }\n\n  /**\n   * Iterate over all entities.\n   *\n   * @method Query#forEach\n   * @param {Function} forEachFn Iteration function.\n   * @param {*} [thisArg] Context to which to bind `forEachFn`.\n   * @returns {Query} A reference to itself for chaining.\n   * @since 3.0.0\n   */\n  forEach (forEachFn, thisArg) {\n    this.getData().forEach(forEachFn, thisArg)\n    return this\n  }\n\n  /**\n   * Find the entity or entities that match the provided key.\n   *\n   * @example <caption>Get the entity whose primary key is 25.</caption>\n   * const entities = query.get(25).run();\n   *\n   * @example <caption>Same as above.</caption>\n   * const entities = query.get([25]).run();\n   *\n   * @example <caption>Get all users who are active and have the \"admin\" role.</caption>\n   * const activeAdmins = query.get(['active', 'admin'], {\n   *   index: 'activityAndRoles'\n   * }).run();\n   *\n   * @example <caption>Get all entities that match a certain weather condition.</caption>\n   * const niceDays = query.get(['sunny', 'humid', 'calm'], {\n   *   index: 'weatherConditions'\n   * }).run();\n   *\n   * @method Query#get\n   * @param {array} keyList Key(s) defining the entity to retrieve. If\n   * `keyList` is not an array (i.e. for a single-value key), it will be\n   * wrapped in an array.\n   * @param {object} [opts] Configuration options.\n   * @param {string} [opts.string] Name of the secondary index to use in the\n   * query. If no index is specified, the main index is used.\n   * @returns {Query} A reference to itself for chaining.\n   * @since 3.0.0\n   */\n  get (keyList = [], opts = {}) {\n    if (this.data) {\n      throw utils.err(`${DOMAIN}#get`)(500, INDEX_ERR)\n    }\n    if (keyList && !utils.isArray(keyList)) {\n      keyList = [keyList]\n    }\n    if (!keyList.length) {\n      this.getData()\n      return this\n    }\n    this.data = this.collection.getIndex(opts.index).get(keyList)\n    return this\n  }\n\n  /**\n   * Find the entity or entities that match the provided keyLists.\n   *\n   * @example <caption>Get the posts where \"status\" is \"draft\" or \"inReview\".</caption>\n   * const posts = query.getAll('draft', 'inReview', { index: 'status' }).run();\n   *\n   * @example <caption>Same as above.</caption>\n   * const posts = query.getAll(['draft'], ['inReview'], { index: 'status' }).run();\n   *\n   * @method Query#getAll\n   * @param {...Array} [keyList] Provide one or more keyLists, and all\n   * entities matching each keyList will be retrieved. If no keyLists are\n   * provided, all entities will be returned.\n   * @param {object} [opts] Configuration options.\n   * @param {string} [opts.index] Name of the secondary index to use in the\n   * query. If no index is specified, the main index is used.\n   * @returns {Query} A reference to itself for chaining.\n   * @since 3.0.0\n   */\n  getAll (...args) {\n    let opts = {}\n    if (this.data) {\n      throw utils.err(`${DOMAIN}#getAll`)(500, INDEX_ERR)\n    }\n    if (!args.length || (args.length === 1 && utils.isObject(args[0]))) {\n      this.getData()\n      return this\n    } else if (args.length && utils.isObject(args[args.length - 1])) {\n      opts = args[args.length - 1]\n      args.pop()\n    }\n    const collection = this.collection\n    const index = collection.getIndex(opts.index)\n    this.data = []\n    args.forEach((keyList) => {\n      this.data = this.data.concat(index.get(keyList))\n    })\n    return this\n  }\n\n  /**\n   * Return the current data result of this query.\n   *\n   * @method Query#getData\n   * @returns {Array} The data in this query.\n   * @since 3.0.0\n   */\n  getData () {\n    if (!this.data) {\n      this.data = this.collection.index.getAll()\n    }\n    return this.data\n  }\n\n  /**\n   * Implementation used by the `like` operator. Takes a pattern and flags and\n   * returns a `RegExp` instance that can test strings.\n   *\n   * @method Query#like\n   * @param {string} pattern Testing pattern.\n   * @param {string} flags Flags for the regular expression.\n   * @returns {RegExp} Regular expression for testing strings.\n   * @since 3.0.0\n   */\n  like (pattern, flags) {\n    return new RegExp(`^${(escape(pattern).replace(percentRegExp, '.*').replace(underscoreRegExp, '.'))}$`, flags)\n  }\n\n  /**\n   * Limit the result.\n   *\n   * @example <caption>Get only the first 2 posts.</caption>\n   * const store = new JSData.DataStore();\n   * store.defineMapper('post');\n   * const posts = [\n   *   { author: 'John', age: 30, status: 'published', id: 1 },\n   *   { author: 'Sally', age: 31, status: 'draft', id: 2 },\n   *   { author: 'Mike', age: 32, status: 'draft', id: 3 },\n   *   { author: 'Adam', age: 33, status: 'deleted', id: 4 },\n   *   { author: 'Adam', age: 33, status: 'draft', id: 5 }\n   * ];\n   * store.add('post', posts);\n   * const results = store.query('post').limit(2).run();\n   * console.log(results);\n   *\n   * @method Query#limit\n   * @param {number} num The maximum number of entities to keep in the result.\n   * @returns {Query} A reference to itself for chaining.\n   * @since 3.0.0\n   */\n  limit (num) {\n    if (!utils.isNumber(num)) {\n      throw utils.err(`${DOMAIN}#limit`, 'num')(400, 'number', num)\n    }\n    const data = this.getData()\n    this.data = data.slice(0, Math.min(data.length, num))\n    return this\n  }\n\n  /**\n   * Apply a mapping function to the result data.\n   *\n   * @example\n   * const JSData = require('js-data');\n   * const { DataStore } = JSData;\n   * console.log('Using JSData v' + JSData.version.full);\n   *\n   * const store = new DataStore();\n   * store.defineMapper('user');\n   * const users = [\n   *   { name: 'Peter', age: 25, id: 1 },\n   *   { name: 'Jim', age: 19, id: 2 },\n   *   { name: 'Mike', age: 17, id: 3 },\n   *   { name: 'Alan', age: 29, id: 4 },\n   *   { name: 'Katie', age: 33, id: 5 }\n   * ];\n   * store.add('user', users);\n   * const ages = store\n   *   .query('user')\n   *   .map(function (user) {\n   *     return user.age;\n   *   })\n   *   .run();\n   * console.log(ages);\n   *\n   * @method Query#map\n   * @param {Function} mapFn Mapping function.\n   * @param {*} [thisArg] Context to which to bind `mapFn`.\n   * @returns {Query} A reference to itself for chaining.\n   * @since 3.0.0\n   */\n  map (mapFn, thisArg) {\n    this.data = this.getData().map(mapFn, thisArg)\n    return this\n  }\n\n  /**\n   * Return the result of calling the specified function on each item in this\n   * collection's main index.\n   *\n   * @example\n   * const stringAges = UserCollection.query().mapCall('toString').run();\n   *\n   * @method Query#mapCall\n   * @param {string} funcName Name of function to call\n   * @parama {...*} [args] Remaining arguments to be passed to the function.\n   * @returns {Query} A reference to itself for chaining.\n   * @since 3.0.0\n   */\n  mapCall (funcName, ...args) {\n    this.data = this.getData().map(function (item) {\n      return item[funcName](...args)\n    })\n    return this\n  }\n\n  /**\n   * Complete the execution of the query and return the resulting data.\n   *\n   * @method Query#run\n   * @returns {Array} The result of executing this query.\n   * @since 3.0.0\n   */\n  run () {\n    const data = this.data\n    this.data = null\n    return data\n  }\n\n  /**\n   * Skip a number of results.\n   *\n   * @example <caption>Get all but the first 2 posts.</caption>\n   * const JSData = require('js-data');\n   * const { DataStore } = JSData;\n   * console.log('Using JSData v' + JSData.version.full);\n   *\n   * const store = new DataStore();\n   * store.defineMapper('post');\n   * const posts = [\n   *   { author: 'John', age: 30, status: 'published', id: 1 },\n   *   { author: 'Sally', age: 31, status: 'draft', id: 2 },\n   *   { author: 'Mike', age: 32, status: 'draft', id: 3 },\n   *   { author: 'Adam', age: 33, status: 'deleted', id: 4 },\n   *   { author: 'Adam', age: 33, status: 'draft', id: 5 }\n   * ];\n   * store.add('post', posts);\n   * const results = store.query('post').skip(2).run();\n   * console.log(results);\n   *\n   * @method Query#skip\n   * @param {number} num The number of entities to skip.\n   * @returns {Query} A reference to itself for chaining.\n   * @since 3.0.0\n   */\n  skip (num) {\n    if (!utils.isNumber(num)) {\n      throw utils.err(`${DOMAIN}#skip`, 'num')(400, 'number', num)\n    }\n    const data = this.getData()\n    if (num < data.length) {\n      this.data = data.slice(num)\n    } else {\n      this.data = []\n    }\n    return this\n  }\n\n  /**\n   * The filtering operators supported by {@link Query#filter}, and which are\n   * implemented by adapters (for the most part).\n   *\n   * @example <caption>Variant 1</caption>\n   * const JSData = require('js-data');\n   * const { DataStore } = JSData;\n   * console.log('Using JSData v' + JSData.version.full);\n   *\n   * const store = new DataStore();\n   * store.defineMapper('post');\n   * const posts = [\n   *   { author: 'John', age: 30, status: 'published', id: 1 },\n   *   { author: 'Sally', age: 31, status: 'published', id: 2 },\n   *   { author: 'Mike', age: 32, status: 'published', id: 3 },\n   *   { author: 'Adam', age: 33, status: 'deleted', id: 4 },\n   *   { author: 'Adam', age: 33, status: 'published', id: 5 }\n   * ];\n   * store.add('post', posts);\n   * const publishedPosts = store.filter('post', {\n   *   status: 'published',\n   *   limit: 2\n   * });\n   * console.log(publishedPosts);\n   *\n   *\n   * @example <caption>Variant 2</caption>\n   * const JSData = require('js-data');\n   * const { DataStore } = JSData;\n   * console.log('Using JSData v' + JSData.version.full);\n   *\n   * const store = new DataStore();\n   * store.defineMapper('post')\n   * const posts = [\n   *   { author: 'John', age: 30, status: 'published', id: 1 },\n   *   { author: 'Sally', age: 31, status: 'published', id: 2 },\n   *   { author: 'Mike', age: 32, status: 'published', id: 3 },\n   *   { author: 'Adam', age: 33, status: 'deleted', id: 4 },\n   *   { author: 'Adam', age: 33, status: 'published', id: 5 }\n   * ];\n   * store.add('post', posts);\n   * const publishedPosts = store.filter('post', {\n   *   where: {\n   *     status: {\n   *       '==': 'published'\n   *     }\n   *   },\n   *   limit: 2\n   * });\n   * console.log(publishedPosts);\n   *\n   * @example <caption>Variant 3</caption>\n   * const JSData = require('js-data');\n   * const { DataStore } = JSData;\n   * console.log('Using JSData v' + JSData.version.full);\n   *\n   * const store = new DataStore();\n   * store.defineMapper('post');\n   * const posts = [\n   *   { author: 'John', age: 30, status: 'published', id: 1 },\n   *   { author: 'Sally', age: 31, status: 'published', id: 2 },\n   *   { author: 'Mike', age: 32, status: 'published', id: 3 },\n   *   { author: 'Adam', age: 33, status: 'deleted', id: 4 },\n   *   { author: 'Adam', age: 33, status: 'published', id: 5 }\n   * ];\n   * store.add('post', posts);\n   * const publishedPosts = store\n   *   .query('post')\n   *   .filter({ status: 'published' })\n   *   .limit(2)\n   *   .run();\n   * console.log(publishedPosts);\n   *\n   * @example <caption>Variant 4</caption>\n   * const JSData = require('js-data');\n   * const { DataStore } = JSData;\n   * console.log('Using JSData v' + JSData.version.full);\n   *\n   * const store = new DataStore();\n   * store.defineMapper('post');\n   * const posts = [\n   *   { author: 'John', age: 30, status: 'published', id: 1 },\n   *   { author: 'Sally', age: 31, status: 'published', id: 2 },\n   *   { author: 'Mike', age: 32, status: 'published', id: 3 },\n   *   { author: 'Adam', age: 33, status: 'deleted', id: 4 },\n   *   { author: 'Adam', age: 33, status: 'published', id: 5 }\n   * ];\n   * store.add('post', posts);\n   * const publishedPosts = store\n   *   .query('post')\n   *   .filter({\n   *     where: {\n   *       status: {\n   *         '==': 'published'\n   *       }\n   *     }\n   *   })\n   *   .limit(2)\n   *   .run();\n   * console.log(publishedPosts);\n   *\n   * @example <caption>Multiple operators</caption>\n   * const JSData = require('js-data');\n   * const { DataStore } = JSData;\n   * console.log('Using JSData v' + JSData.version.full);\n   *\n   * const store = new DataStore();\n   * store.defineMapper('post');\n   * const posts = [\n   *   { author: 'John', age: 30, status: 'published', id: 1 },\n   *   { author: 'Sally', age: 31, status: 'published', id: 2 },\n   *   { author: 'Mike', age: 32, status: 'published', id: 3 },\n   *   { author: 'Adam', age: 33, status: 'deleted', id: 4 },\n   *   { author: 'Adam', age: 33, status: 'published', id: 5 }\n   * ];\n   * store.add('post', posts);\n   *\n   * const myPublishedPosts = store.filter('post', {\n   *   where: {\n   *     status: {\n   *       '==': 'published'\n   *     },\n   *     user_id: {\n   *       '==': currentUser.id\n   *     }\n   *   }\n   * });\n   *\n   * console.log(myPublishedPosts);\n   *\n   * @name Query.ops\n   * @property {Function} == Equality operator.\n   * @property {Function} != Inequality operator.\n   * @property {Function} > Greater than operator.\n   * @property {Function} >= Greater than (inclusive) operator.\n   * @property {Function} < Less than operator.\n   * @property {Function} <= Less than (inclusive) operator.\n   * @property {Function} isectEmpty Operator that asserts that the intersection\n   * between two arrays is empty.\n   * @property {Function} isectNotEmpty Operator that asserts that the\n   * intersection between two arrays is __not__ empty.\n   * @property {Function} in Operator that asserts whether a value is in an\n   * array.\n   * @property {Function} notIn Operator that asserts whether a value is __not__\n   * in an array.\n   * @property {Function} contains Operator that asserts whether an array\n   * contains a value.\n   * @property {Function} notContains Operator that asserts whether an array\n   * does __not__ contain a value.\n   * @since 3.0.0\n   * @type {Object}\n   */\n  static ops = {\n    '=': function (value, predicate) {\n      return value == predicate // eslint-disable-line\n    },\n    '==': function (value, predicate) {\n      return value == predicate // eslint-disable-line\n    },\n    '===': function (value, predicate) {\n      return value === predicate\n    },\n    '!=': function (value, predicate) {\n      return value != predicate // eslint-disable-line\n    },\n    '!==': function (value, predicate) {\n      return value !== predicate\n    },\n    '>': function (value, predicate) {\n      return value > predicate\n    },\n    '>=': function (value, predicate) {\n      return value >= predicate\n    },\n    '<': function (value, predicate) {\n      return value < predicate\n    },\n    '<=': function (value, predicate) {\n      return value <= predicate\n    },\n    isectEmpty: function (value, predicate) {\n      return !utils.intersection((value || []), (predicate || [])).length\n    },\n    isectNotEmpty: function (value, predicate) {\n      return utils.intersection((value || []), (predicate || [])).length\n    },\n    in: function (value, predicate) {\n      return predicate.indexOf(value) !== -1\n    },\n    notIn: function (value, predicate) {\n      return predicate.indexOf(value) === -1\n    },\n    contains: function (value, predicate) {\n      return (value || []).indexOf(predicate) !== -1\n    },\n    notContains: function (value, predicate) {\n      return (value || []).indexOf(predicate) === -1\n    }\n  }\n}\n","import utils from './utils'\n\n// TODO: remove this when the rest of the project is cleaned\nexport const belongsToType = 'belongsTo'\nexport const hasManyType = 'hasMany'\nexport const hasOneType = 'hasOne'\n\nconst DOMAIN = 'Relation'\n\nexport class Relation {\n  constructor (relatedMapper, options = {}) {\n    options.type = this.constructor.TYPE_NAME\n    this.validateOptions(relatedMapper, options)\n\n    if (typeof relatedMapper === 'object') {\n      Object.defineProperty(this, 'relatedMapper', { value: relatedMapper })\n    }\n\n    Object.defineProperty(this, 'inverse', { writable: true })\n    utils.fillIn(this, options)\n  }\n\n  // static extend = utils.extend\n\n  get canAutoAddLinks () {\n    return this.add === undefined || !!this.add\n  }\n\n  get relatedCollection () {\n    return this.mapper.datastore.getCollection(this.relation)\n  }\n\n  validateOptions (related, opts) {\n    const DOMAIN_ERR = `new ${DOMAIN}`\n\n    const localField = opts.localField\n    if (!localField) {\n      throw utils.err(DOMAIN_ERR, 'opts.localField')(400, 'string', localField)\n    }\n\n    const foreignKey = opts.foreignKey = opts.foreignKey || opts.localKey\n    if (!foreignKey && (opts.type === belongsToType || opts.type === hasOneType)) {\n      throw utils.err(DOMAIN_ERR, 'opts.foreignKey')(400, 'string', foreignKey)\n    }\n\n    if (utils.isString(related)) {\n      opts.relation = related\n      if (!utils.isFunction(opts.getRelation)) {\n        throw utils.err(DOMAIN_ERR, 'opts.getRelation')(400, 'function', opts.getRelation)\n      }\n    } else if (related) {\n      opts.relation = related.name\n    } else {\n      throw utils.err(DOMAIN_ERR, 'related')(400, 'Mapper or string', related)\n    }\n  }\n\n  assignTo (mapper) {\n    this.name = mapper.name\n    Object.defineProperty(this, 'mapper', { value: mapper })\n\n    mapper.relationList || Object.defineProperty(mapper, 'relationList', { value: [] })\n    mapper.relationFields || Object.defineProperty(mapper, 'relationFields', { value: [] })\n    mapper.relationList.push(this)\n    mapper.relationFields.push(this.localField)\n  }\n\n  canFindLinkFor () {\n    return !!(this.foreignKey || this.localKey)\n  }\n\n  getRelation () {\n    return this.relatedMapper\n  }\n\n  getForeignKey (record) {\n    return utils.get(record, this.mapper.idAttribute)\n  }\n\n  setForeignKey (record, relatedRecord) {\n    if (!record || !relatedRecord) {\n      return\n    }\n\n    this._setForeignKey(record, relatedRecord)\n  }\n\n  _setForeignKey (record, relatedRecords) {\n    const idAttribute = this.mapper.idAttribute\n\n    if (!utils.isArray(relatedRecords)) {\n      relatedRecords = [relatedRecords]\n    }\n\n    relatedRecords.forEach((relatedRecord) => {\n      utils.set(relatedRecord, this.foreignKey, utils.get(record, idAttribute))\n    })\n  }\n\n  getLocalField (record) {\n    return utils.get(record, this.localField)\n  }\n\n  setLocalField (record, relatedData) {\n    return utils.set(record, this.localField, relatedData)\n  }\n\n  getInverse (mapper) {\n    if (!this.inverse) {\n      this.findInverseRelation(mapper)\n    }\n\n    return this.inverse\n  }\n\n  findInverseRelation (mapper) {\n    this.getRelation().relationList.forEach((def) => {\n      if (def.getRelation() === mapper && this.isInversedTo(def) && this !== def) {\n        this.inverse = def\n        return true\n      }\n    })\n  }\n\n  isInversedTo (def) {\n    return !def.foreignKey || def.foreignKey === this.foreignKey\n  }\n\n  addLinkedRecords (records) {\n    const datastore = this.mapper.datastore\n\n    records.forEach((record) => {\n      let relatedData = this.getLocalField(record)\n\n      if (utils.isFunction(this.add)) {\n        relatedData = this.add(datastore, this, record)\n      } else if (relatedData) {\n        relatedData = this.linkRecord(record, relatedData)\n      }\n\n      const isEmptyLinks = !relatedData || (utils.isArray(relatedData) && !relatedData.length)\n\n      if (isEmptyLinks && this.canFindLinkFor(record)) {\n        relatedData = this.findExistingLinksFor(record)\n      }\n\n      if (relatedData) {\n        this.setLocalField(record, relatedData)\n      }\n    })\n  }\n\n  removeLinkedRecords (relatedMapper, records) {\n    const localField = this.localField\n    records.forEach((record) => {\n      utils.set(record, localField, undefined)\n    })\n  }\n\n  linkRecord (record, relatedRecord) {\n    const relatedId = utils.get(relatedRecord, this.mapper.idAttribute)\n\n    if (relatedId === undefined) {\n      const unsaved = this.relatedCollection.unsaved()\n      if (unsaved.indexOf(relatedRecord) === -1) {\n        if (this.canAutoAddLinks) {\n          relatedRecord = this.relatedCollection.add(relatedRecord)\n        }\n      }\n    } else {\n      if (relatedRecord !== this.relatedCollection.get(relatedId)) {\n        this.setForeignKey(record, relatedRecord)\n\n        if (this.canAutoAddLinks) {\n          relatedRecord = this.relatedCollection.add(relatedRecord)\n        }\n      }\n    }\n\n    return relatedRecord\n  }\n\n  // e.g. user hasMany post via \"foreignKey\", so find all posts of user\n  findExistingLinksByForeignKey (id) {\n    if (id === undefined || id === null) {\n      return\n    }\n    return this.relatedCollection.filter({\n      [this.foreignKey]: id\n    })\n  }\n\n  ensureLinkedDataHasProperType (props, opts) {\n    const relatedMapper = this.getRelation()\n    const relationData = this.getLocalField(props)\n\n    if (utils.isArray(relationData) && (!relationData.length || relatedMapper.is(relationData[0]))) {\n      return\n    }\n\n    if (relationData && !relatedMapper.is(relationData)) {\n      utils.set(props, this.localField, relatedMapper.createRecord(relationData, opts))\n    }\n  }\n\n  isRequiresParentId () {\n    return false\n  }\n\n  isRequiresChildId () {\n    return false\n  }\n\n  createChildRecord (props, relationData, opts) {\n    this.setForeignKey(props, relationData)\n\n    return this.createLinked(relationData, opts).then((result) => {\n      this.setLocalField(props, result)\n    })\n  }\n\n  createLinked (props, opts) {\n    const create = utils.isArray(props) ? 'createMany' : 'create'\n\n    return this.getRelation()[create](props, opts)\n  }\n}\n","import utils from '../utils'\nimport { Relation } from '../Relation'\n\nexport class BelongsToRelation extends Relation {\n  getForeignKey (record) {\n    return utils.get(record, this.foreignKey)\n  }\n\n  _setForeignKey (record, relatedRecord) {\n    utils.set(record, this.foreignKey, utils.get(relatedRecord, this.getRelation().idAttribute))\n  }\n\n  findExistingLinksFor (record) {\n    // console.log('\\tBelongsTo#findExistingLinksFor', record)\n    if (!record) {\n      return\n    }\n    const relatedId = utils.get(record, this.foreignKey)\n    if (relatedId !== undefined && relatedId !== null) {\n      return this.relatedCollection.get(relatedId)\n    }\n  }\n\n  isRequiresParentId () {\n    return true\n  }\n\n  createParentRecord (props, opts) {\n    const relationData = this.getLocalField(props)\n\n    return this.createLinked(relationData, opts).then((record) => {\n      this.setForeignKey(props, record)\n    })\n  }\n\n  createChildRecord () {\n    throw new Error('\"BelongsTo\" relation does not support child creation as it cannot have children.')\n  }\n\n  static TYPE_NAME = 'belongsTo'\n}\n","import utils from '../utils'\nimport { Relation } from '../Relation'\n\nexport class HasManyRelation extends Relation {\n  validateOptions (related, opts) {\n    super.validateOptions(related, opts)\n\n    const { localKeys, foreignKeys, foreignKey } = opts\n\n    if (!foreignKey && !localKeys && !foreignKeys) {\n      throw utils.err('new Relation', 'opts.<foreignKey|localKeys|foreignKeys>')(400, 'string', foreignKey)\n    }\n  }\n\n  canFindLinkFor (record) {\n    const hasForeignKeys = this.foreignKey || this.foreignKeys\n    return !!(hasForeignKeys || (this.localKeys && utils.get(record, this.localKeys)))\n  }\n\n  linkRecord (record, relatedRecords) {\n    const relatedCollection = this.relatedCollection\n    const canAutoAddLinks = this.canAutoAddLinks\n    const foreignKey = this.foreignKey\n    const unsaved = this.relatedCollection.unsaved()\n\n    return relatedRecords.map((relatedRecord) => {\n      const relatedId = relatedCollection.recordId(relatedRecord)\n\n      if ((relatedId === undefined && unsaved.indexOf(relatedRecord) === -1) || relatedRecord !== relatedCollection.get(relatedId)) {\n        if (foreignKey) {\n          // TODO: slow, could be optimized? But user loses hook\n          this.setForeignKey(record, relatedRecord)\n        }\n        if (canAutoAddLinks) {\n          relatedRecord = relatedCollection.add(relatedRecord)\n        }\n      }\n\n      return relatedRecord\n    })\n  }\n\n  findExistingLinksFor (record) {\n    const id = utils.get(record, this.mapper.idAttribute)\n    const ids = this.localKeys ? utils.get(record, this.localKeys) : null\n    let records\n\n    if (id !== undefined && this.foreignKey) {\n      records = this.findExistingLinksByForeignKey(id)\n    } else if (this.localKeys && ids) {\n      records = this.findExistingLinksByLocalKeys(ids)\n    } else if (id !== undefined && this.foreignKeys) {\n      records = this.findExistingLinksByForeignKeys(id)\n    }\n\n    if (records && records.length) {\n      return records\n    }\n  }\n\n  // e.g. user hasMany group via \"foreignKeys\", so find all users of a group\n  findExistingLinksByLocalKeys (ids) {\n    return this.relatedCollection.filter({\n      where: {\n        [this.relatedCollection.mapper.idAttribute]: {\n          in: ids\n        }\n      }\n    })\n  }\n\n  // e.g. group hasMany user via \"localKeys\", so find all groups that own a user\n  findExistingLinksByForeignKeys (id) {\n    return this.relatedCollection.filter({\n      where: {\n        [this.foreignKeys]: {\n          contains: id\n        }\n      }\n    })\n  }\n\n  isRequiresParentId () {\n    return !!this.localKeys && this.localKeys.length > 0\n  }\n\n  isRequiresChildId () {\n    return !!this.foreignKey\n  }\n\n  createParentRecord (props, opts) {\n    const relationData = this.getLocalField(props)\n    const foreignIdField = this.getRelation().idAttribute\n\n    return this.createLinked(relationData, opts).then((records) => {\n      utils.set(props, this.localKeys, records.map((record) => utils.get(record, foreignIdField)))\n    })\n  }\n\n  createLinked (props, opts) {\n    return this.getRelation().createMany(props, opts)\n  }\n\n  static TYPE_NAME = 'hasMany'\n}\n","import utils from '../utils'\nimport { Relation } from '../Relation'\n\nexport class HasOneRelation extends Relation {\n  findExistingLinksFor (relatedMapper, record) {\n    const recordId = utils.get(record, relatedMapper.idAttribute)\n    const records = this.findExistingLinksByForeignKey(recordId)\n\n    if (records && records.length) {\n      return records[0]\n    }\n  }\n\n  isRequiresChildId () {\n    return true\n  }\n\n  static TYPE_NAME = 'hasOne'\n}\n","import { Relation } from './Relation'\nimport { BelongsToRelation } from './Relation/BelongsTo'\nimport { HasManyRelation } from './Relation/HasMany'\nimport { HasOneRelation } from './Relation/HasOne'\n\n[BelongsToRelation, HasManyRelation, HasOneRelation].forEach(RelationType => {\n  Relation[RelationType.TYPE_NAME] = (related, options) => new RelationType(related, options)\n})\n\nexport { belongsToType, hasManyType, hasOneType, Relation } from './Relation'\n","import { Relation } from './relations'\n\nexport { belongsToType, hasManyType, hasOneType } from './relations'\n/**\n * BelongsTo relation decorator. You probably won't use this directly.\n *\n * @name module:js-data.belongsTo\n * @method\n * @param {Mapper} related The relation the target belongs to.\n * @param {object} opts Configuration options.\n * @param {string} opts.foreignKey The field that holds the primary key of the\n * related record.\n * @param {string} opts.localField The field that holds a reference to the\n * related record object.\n * @returns {Function} Invocation function, which accepts the target as the only\n * parameter.\n */\nexport const belongsTo = function (related, opts) {\n  return function (mapper) {\n    Relation.belongsTo(related, opts).assignTo(mapper)\n  }\n}\n\n/**\n * HasMany relation decorator. You probably won't use this directly.\n *\n * @name module:js-data.hasMany\n * @method\n * @param {Mapper} related The relation of which the target has many.\n * @param {object} opts Configuration options.\n * @param {string} [opts.foreignKey] The field that holds the primary key of the\n * related record.\n * @param {string} opts.localField The field that holds a reference to the\n * related record object.\n * @returns {Function} Invocation function, which accepts the target as the only\n * parameter.\n */\nexport const hasMany = function (related, opts) {\n  return function (mapper) {\n    Relation.hasMany(related, opts).assignTo(mapper)\n  }\n}\n\n/**\n * HasOne relation decorator. You probably won't use this directly.\n *\n * @name module:js-data.hasOne\n * @method\n * @param {Mapper} related The relation of which the target has one.\n * @param {object} opts Configuration options.\n * @param {string} [opts.foreignKey] The field that holds the primary key of the\n * related record.\n * @param {string} opts.localField The field that holds a reference to the\n * related record object.\n * @returns {Function} Invocation function, which accepts the target as the only\n * parameter.\n */\nexport const hasOne = function (related, opts) {\n  return function (mapper) {\n    Relation.hasOne(related, opts).assignTo(mapper)\n  }\n}\n","import utils, { safeSetLink } from './utils'\nimport Settable from './Settable'\nimport { hasManyType, hasOneType } from './decorators'\n\nconst DOMAIN = 'Record'\n\nconst superMethod = function (mapper, name) {\n  const store = mapper.datastore\n  if (store && store[name]) {\n    return function (...args) {\n      return store[name](mapper.name, ...args)\n    }\n  }\n  return mapper[name].bind(mapper)\n}\n\n// Cache these strings\nconst creatingPath = 'creating'\nconst noValidatePath = 'noValidate'\nconst keepChangeHistoryPath = 'keepChangeHistory'\nconst previousPath = 'previous'\n\n/**\n * js-data's Record class. An instance of `Record` corresponds to an in-memory\n * representation of a single row or document in a database, Firebase,\n * localstorage, etc. Basically, a `Record` instance represents whatever kind of\n * entity in your persistence layer that has a primary key.\n *\n * ```javascript\n * import {Record} from 'js-data'\n * ```\n *\n * @example <caption>Record#constructor</caption>\n * const JSData = require('js-data');\n * const { Record } = JSData;\n * console.log('Using JSData v' + JSData.version.full);\n *\n * // Instantiate a plain record\n * let record = new Record();\n * console.log('record: ' + JSON.stringify(record));\n *\n * // You can supply properties on instantiation\n * record = new Record({ name: 'John' });\n * console.log('record: ' + JSON.stringify(record));\n *\n * @example <caption>Record#constructor2</caption>\n * const JSData = require('js-data');\n * const { Mapper } = JSData;\n * console.log('Using JSData v' + JSData.version.full);\n *\n * // Instantiate a record that's associated with a Mapper:\n * const UserMapper = new Mapper({ name: 'user' });\n * const User = UserMapper.recordClass;\n * const user = UserMapper.createRecord({ name: 'John' });\n * const user2 = new User({ name: 'Sally' });\n * console.log('user: ' + JSON.stringify(user));\n * console.log('user2: ' + JSON.stringify(user2));\n *\n * @example <caption>Record#constructor3</caption>\n * const JSData = require('js-data');\n * const { Container } = JSData;\n * console.log('Using JSData v' + JSData.version.full);\n *\n * const store = new Container();\n * store.defineMapper('user');\n *\n * // Instantiate a record that's associated with a store's Mapper\n * const user = store.createRecord('user', { name: 'John' });\n * console.log('user: ' + JSON.stringify(user));\n *\n * @example <caption>Record#constructor4</caption>\n * const JSData = require('js-data');\n * const { Container } = JSData;\n * console.log('Using JSData v' + JSData.version.full);\n *\n * const store = new Container();\n * store.defineMapper('user', {\n *   schema: {\n *     properties: {\n *       name: { type: 'string' }\n *     }\n *   }\n * });\n *\n * // Validate on instantiation\n * const user = store.createRecord('user', { name: 1234 });\n * console.log('user: ' + JSON.stringify(user));\n *\n * @example <caption>Record#constructor5</caption>\n * const JSData = require('js-data');\n * const { Container } = JSData;\n * console.log('Using JSData v' + JSData.version.full);\n *\n * const store = new Container();\n * store.defineMapper('user', {\n *   schema: {\n *     properties: {\n *       name: { type: 'string' }\n *     }\n *   }\n * });\n *\n * // Skip validation on instantiation\n * const user = store.createRecord('user', { name: 1234 }, { noValidate: true });\n * console.log('user: ' + JSON.stringify(user));\n * console.log('user.isValid(): ' + user.isValid());\n *\n * @class Record\n * @extends Settable\n * @param {object} [props] The initial properties of the new Record instance.\n * @param {object} [opts] Configuration options.\n * @param {boolean} [opts.noValidate=false] Whether to skip validation on the\n * initial properties.\n * @param {boolean} [opts.validateOnSet=true] Whether to enable setter\n * validation on properties after the Record has been initialized.\n * @since 3.0.0\n */\nexport default class Record extends Settable {\n  constructor (props = {}, opts = {}) {\n    super()\n    const _set = this._set\n    const mapper = this.constructor.mapper\n\n    _set(creatingPath, true)\n    _set(noValidatePath, !!opts.noValidate)\n    _set(keepChangeHistoryPath, opts.keepChangeHistory === undefined ? (mapper ? mapper.keepChangeHistory : true) : opts.keepChangeHistory)\n\n    // Set the idAttribute value first, if it exists.\n    const id = mapper ? utils.get(props, mapper.idAttribute) : undefined\n    if (id !== undefined) {\n      utils.set(this, mapper.idAttribute, id)\n    }\n\n    utils.fillIn(this, props)\n    _set(creatingPath, false)\n    if (opts.validateOnSet !== undefined) {\n      _set(noValidatePath, !opts.validateOnSet)\n    } else if (mapper && mapper.validateOnSet !== undefined) {\n      _set(noValidatePath, !mapper.validateOnSet)\n    } else {\n      _set(noValidatePath, false)\n    }\n    _set(previousPath, mapper ? mapper.toJSON(props) : utils.plainCopy(props))\n  }\n\n  /**\n   * Returns the {@link Mapper} paired with this record's class, if any.\n   *\n   * @method Record#_mapper\n   * @returns {Mapper} The {@link Mapper} paired with this record's class, if any.\n   * @since 3.0.0\n   */\n  _mapper () {\n    const mapper = this.constructor.mapper\n    if (!mapper) {\n      throw utils.err(`${DOMAIN}#_mapper`, '')(404, 'mapper')\n    }\n    return mapper\n  }\n\n  /**\n   * Lifecycle hook.\n   *\n   * @method Record#afterLoadRelations\n   * @param {string[]} relations The `relations` argument passed to {@link Record#loadRelations}.\n   * @param {object} opts The `opts` argument passed to {@link Record#loadRelations}.\n   * @since 3.0.0\n   */\n  afterLoadRelations () {}\n\n  /**\n   * Lifecycle hook.\n   *\n   * @method Record#beforeLoadRelations\n   * @param {string[]} relations The `relations` argument passed to {@link Record#loadRelations}.\n   * @param {object} opts The `opts` argument passed to {@link Record#loadRelations}.\n   * @since 3.0.0\n   */\n  beforeLoadRelations () {}\n\n  /**\n   * Return the change history of this record since it was instantiated or\n   * {@link Record#commit} was called.\n   *\n   * @method Record#changeHistory\n   * @since 3.0.0\n   */\n  changeHistory () {\n    return (this._get('history') || []).slice()\n  }\n\n  /**\n   * Return changes to this record since it was instantiated or\n   * {@link Record#commit} was called.\n   *\n   * @example <caption>Record#changes</caption>\n   * const JSData = require('js-data');\n   * const { Container } = JSData;\n   * console.log('Using JSData v' + JSData.version.full);\n   *\n   * const store = new Container();\n   * store.defineMapper('user');\n   * const user = store.createRecord('user');\n   * console.log('user changes: ' + JSON.stringify(user.changes()));\n   * user.name = 'John';\n   * console.log('user changes: ' + JSON.stringify(user.changes()));\n   *\n   * @method Record#changes\n   * @param [opts] Configuration options.\n   * @param {Function} [opts.equalsFn={@link utils.deepEqual}] Equality function.\n   * @param {array} [opts.ignore=[]] Array of strings or RegExp of fields to ignore.\n   * @returns {Object} Object describing the changes to this record since it was\n   * instantiated or its {@link Record#commit} method was last called.\n   * @since 3.0.0\n   */\n  changes (opts = {}) {\n    return utils.diffObjects(typeof this.toJSON === 'function' ? this.toJSON(opts) : this, this._get('previous'), opts)\n  }\n\n  /**\n   * Make the record's current in-memory state it's only state, with any\n   * previous property values being set to current values.\n   *\n   * @example <caption>Record#commit</caption>\n   * const JSData = require('js-data');\n   * const { Container } = JSData;\n   * console.log('Using JSData v' + JSData.version.full);\n   *\n   * const store = new Container();\n   * store.defineMapper('user');\n   * const user = store.createRecord('user');\n   * console.log('user hasChanges: ' + user.hasChanges());\n   * user.name = 'John';\n   * console.log('user hasChanges: ' + user.hasChanges());\n   * user.commit();\n   * console.log('user hasChanges: ' + user.hasChanges());\n   *\n   * @method Record#commit\n   * @param {object} [opts] Configuration options. Passed to {@link Record#toJSON}.\n   * @since 3.0.0\n   */\n  commit (opts) {\n    this._set('changed') // unset\n    this._set('changing', false)\n    this._set('history', []) // clear history\n    this._set('previous', this.toJSON(opts))\n  }\n\n  /**\n   * Call {@link Mapper#destroy} using this record's primary key.\n   *\n   * @example\n   * import { Container } from 'js-data';\n   * import { RethinkDBAdapter } from 'js-data-rethinkdb';\n   *\n   * const store = new Container();\n   * store.registerAdapter('rethink', new RethinkDBAdapter(), { default: true });\n   * store.defineMapper('user');\n   * store.find('user', 1234).then((user) => {\n   *   console.log(user.id); // 1234\n   *\n   *   // Destroy this user from the database\n   *   return user.destroy();\n   * });\n   *\n   * @method Record#destroy\n   * @param {object} [opts] Configuration options passed to {@link Mapper#destroy}.\n   * @returns {Promise} The result of calling {@link Mapper#destroy} with the\n   * primary key of this record.\n   * @since 3.0.0\n   */\n  destroy (opts = {}) {\n    const mapper = this._mapper()\n    return superMethod(mapper, 'destroy')(utils.get(this, mapper.idAttribute), opts)\n  }\n\n  /**\n   * Return the value at the given path for this instance.\n   *\n   * @example <caption>Record#get</caption>\n   * const JSData = require('js-data');\n   * const { Container } = JSData;\n   * console.log('Using JSData v' + JSData.version.full);\n   * const store = new Container();\n   * store.defineMapper('user');\n   *\n   * const user = store.createRecord('user', { name: 'Bob' });\n   * console.log('user.get(\"name\"): ' + user.get('name'));\n   *\n   * @method Record#get\n   * @param {string} key Path of value to retrieve.\n   * @returns {*} Value at path.\n   * @since 3.0.0\n   */\n  'get' (key) {\n    return utils.get(this, key)\n  }\n\n  /**\n   * Return whether this record has changed since it was instantiated or\n   * {@link Record#commit} was called.\n   *\n   * @example <caption>Record#hasChanges</caption>\n   * const JSData = require('js-data');\n   * const { Container } = JSData;\n   * console.log('Using JSData v' + JSData.version.full);\n   * const store = new Container();\n   * store.defineMapper('user');\n   * const user = store.createRecord('user');\n   * console.log('user hasChanges: ' + user.hasChanges());\n   * user.name = 'John';\n   * console.log('user hasChanges: ' + user.hasChanges());\n   * user.commit();\n   * console.log('user hasChanges: ' + user.hasChanges());\n   *\n   * @method Record#hasChanges\n   * @param [opts] Configuration options.\n   * @param {Function} [opts.equalsFn={@link utils.deepEqual}] Equality function.\n   * @param {array} [opts.ignore=[]] Array of strings or RegExp of fields to ignore.\n   * @returns {boolean} Return whether the record has changed since it was\n   * instantiated or since its {@link Record#commit} method was called.\n   * @since 3.0.0\n   */\n  hasChanges (opts) {\n    const quickHasChanges = !!(this._get('changed') || []).length\n    return quickHasChanges || utils.areDifferent(typeof this.toJSON === 'function' ? this.toJSON(opts) : this, this._get('previous'), opts)\n  }\n\n  /**\n   * Return whether the record is unsaved. Records that have primary keys are\n   * considered \"saved\". Records without primary keys are considered \"unsaved\".\n   *\n   * @example <caption>Record#isNew</caption>\n   * const JSData = require('js-data');\n   * const { Container } = JSData;\n   * console.log('Using JSData v' + JSData.version.full);\n   * const store = new Container();\n   * store.defineMapper('user');\n   * const user = store.createRecord('user', {\n   *   id: 1234\n   * });\n   * const user2 = store.createRecord('user');\n   * console.log('user isNew: ' + user.isNew()); // false\n   * console.log('user2 isNew: ' + user2.isNew()); // true\n   *\n   * @method Record#isNew\n   * @returns {boolean} Whether the record is unsaved.\n   * @since 3.0.0\n   */\n  isNew (opts) {\n    return utils.get(this, this._mapper().idAttribute) === undefined\n  }\n\n  /**\n   * Return whether the record in its current state passes validation.\n   *\n   * @example <caption>Record#isValid</caption>\n   * const JSData = require('js-data');\n   * const { Container } = JSData;\n   * console.log('Using JSData v' + JSData.version.full);\n   * const store = new Container();\n   * store.defineMapper('user', {\n   *   schema: {\n   *     properties: {\n   *       name: { type: 'string' }\n   *     }\n   *   }\n   * });\n   * const user = store.createRecord('user', {\n   *   name: 1234\n   * }, {\n   *   noValidate: true // this allows us to put the record into an invalid state\n   * });\n   * console.log('user isValid: ' + user.isValid());\n   * user.name = 'John';\n   * console.log('user isValid: ' + user.isValid());\n   *\n   * @method Record#isValid\n   * @param {object} [opts] Configuration options. Passed to {@link Mapper#validate}.\n   * @returns {boolean} Whether the record in its current state passes\n   * validation.\n   * @since 3.0.0\n   */\n  isValid (opts) {\n    return !this._mapper().validate(this, opts)\n  }\n\n  removeInverseRelation (currentParent, id, inverseDef, idAttribute) {\n    if (inverseDef.type === hasOneType) {\n      safeSetLink(currentParent, inverseDef.localField, undefined)\n    } else if (inverseDef.type === hasManyType) {\n      // e.g. remove comment from otherPost.comments\n      const children = utils.get(currentParent, inverseDef.localField)\n      if (id === undefined) {\n        utils.remove(children, (child) => child === this)\n      } else {\n        utils.remove(children, (child) => child === this || id === utils.get(child, idAttribute))\n      }\n    }\n  }\n\n  setupInverseRelation (record, id, inverseDef, idAttribute) {\n    // Update (set) inverse relation\n    if (inverseDef.type === hasOneType) {\n      // e.g. someUser.profile = profile\n      safeSetLink(record, inverseDef.localField, this)\n    } else if (inverseDef.type === hasManyType) {\n      // e.g. add comment to somePost.comments\n      const children = utils.get(record, inverseDef.localField)\n      if (id === undefined) {\n        utils.noDupeAdd(children, this, (child) => child === this)\n      } else {\n        utils.noDupeAdd(children, this, (child) => child === this || id === utils.get(child, idAttribute))\n      }\n    }\n  }\n\n  /**\n   * Lazy load relations of this record, to be attached to the record once their\n   * loaded.\n   *\n   * @example\n   * import { Container } from 'js-data';\n   * import { RethinkDBAdapter } from 'js-data-rethinkdb';\n   *\n   * const store = new Container();\n   * store.registerAdapter('rethink', new RethinkDBAdapter(), { default: true });\n   * store.defineMapper('user', {\n   *   relations: {\n   *     hasMany: {\n   *       post: {\n   *         localField: 'posts',\n   *         foreignKey: 'user_id'\n   *       }\n   *     }\n   *   }\n   * });\n   * store.defineMapper('post', {\n   *   relations: {\n   *     belongsTo: {\n   *       user: {\n   *         localField: 'user',\n   *         foreignKey: 'user_id'\n   *       }\n   *     }\n   *   }\n   * });\n   * store.find('user', 1234).then((user) => {\n   *   console.log(user.id); // 1234\n   *\n   *   // Load the user's post relations\n   *   return user.loadRelations(['post']);\n   * }).then((user) => {\n   *   console.log(user.posts); // [{...}, {...}, ...]\n   * });\n   *\n   * @method Record#loadRelations\n   * @param {string[]} [relations] List of relations to load. Can use localField\n   * names or Mapper names to pick relations.\n   * @param {object} [opts] Configuration options.\n   * @returns {Promise} Resolves with the record, with the loaded relations now\n   * attached.\n   * @since 3.0.0\n   */\n  loadRelations (relations, opts = {}) {\n    let op\n    const mapper = this._mapper()\n\n    // Default values for arguments\n    relations || (relations = [])\n    if (utils.isString(relations)) {\n      relations = [relations]\n    }\n    opts.with = relations\n\n    // Fill in \"opts\" with the Model's configuration\n    utils._(opts, mapper)\n    opts.adapter = mapper.getAdapterName(opts)\n\n    // beforeLoadRelations lifecycle hook\n    op = opts.op = 'beforeLoadRelations'\n    return utils.resolve(this[op](relations, opts)).then(() => {\n      // Now delegate to the adapter\n      op = opts.op = 'loadRelations'\n      mapper.dbg(op, this, relations, opts)\n      const tasks = []\n      let task\n      utils.forEachRelation(mapper, opts, (def, optsCopy) => {\n        const relatedMapper = def.getRelation()\n        optsCopy.raw = false\n        if (utils.isFunction(def.load)) {\n          task = def.load(mapper, def, this, opts)\n        } else if (def.type === 'hasMany' || def.type === 'hasOne') {\n          if (def.foreignKey) {\n            task = superMethod(relatedMapper, 'findAll')({\n              [def.foreignKey]: utils.get(this, mapper.idAttribute)\n            }, optsCopy).then(function (relatedData) {\n              if (def.type === 'hasOne') {\n                return relatedData.length ? relatedData[0] : undefined\n              }\n              return relatedData\n            })\n          } else if (def.localKeys) {\n            task = superMethod(relatedMapper, 'findAll')({\n              where: {\n                [relatedMapper.idAttribute]: {\n                  in: utils.get(this, def.localKeys)\n                }\n              }\n            })\n          } else if (def.foreignKeys) {\n            task = superMethod(relatedMapper, 'findAll')({\n              where: {\n                [def.foreignKeys]: {\n                  contains: utils.get(this, mapper.idAttribute)\n                }\n              }\n            }, opts)\n          }\n        } else if (def.type === 'belongsTo') {\n          const key = utils.get(this, def.foreignKey)\n          if (utils.isSorN(key)) {\n            task = superMethod(relatedMapper, 'find')(key, optsCopy)\n          }\n        }\n        if (task) {\n          task = task.then((relatedData) => {\n            def.setLocalField(this, relatedData)\n          })\n          tasks.push(task)\n        }\n      })\n      return Promise.all(tasks)\n    }).then(() => {\n      // afterLoadRelations lifecycle hook\n      op = opts.op = 'afterLoadRelations'\n      return utils.resolve(this[op](relations, opts)).then(() => this)\n    })\n  }\n\n  /**\n   * Return the properties with which this record was instantiated.\n   *\n   * @example <caption>Record#previous</caption>\n   * const JSData = require('js-data');\n   * const { Container } = JSData;\n   * console.log('Using JSData v' + JSData.version.full);\n   * const store = new Container();\n   * store.defineMapper('user');\n   * const user = store.createRecord('user', {\n   *   name: 'William'\n   * });\n   * console.log('user previous: ' + JSON.stringify(user.previous()));\n   * user.name = 'Bob';\n   * console.log('user previous: ' + JSON.stringify(user.previous()));\n   * user.commit();\n   * console.log('user previous: ' + JSON.stringify(user.previous()));\n   *\n   * @method Record#previous\n   * @param {string} [key] If specified, return just the initial value of the\n   * given key.\n   * @returns {Object} The initial properties of this record.\n   * @since 3.0.0\n   */\n  previous (key) {\n    if (key) {\n      return this._get(`previous.${key}`)\n    }\n    return this._get('previous')\n  }\n\n  /**\n   * Revert changes to this record back to the properties it had when it was\n   * instantiated.\n   *\n   * @example <caption>Record#revert</caption>\n   * const JSData = require('js-data');\n   * const { Container } = JSData;\n   * console.log('Using JSData v' + JSData.version.full);\n   * const store = new Container();\n   * store.defineMapper('user');\n   * const user = store.createRecord('user', {\n   *   name: 'William'\n   * });\n   * console.log('user: ' + JSON.stringify(user));\n   * user.name = 'Bob';\n   * console.log('user: ' + JSON.stringify(user));\n   * user.revert();\n   * console.log('user: ' + JSON.stringify(user));\n   *\n   * @method Record#revert\n   * @param {object} [opts] Configuration options.\n   * @param {string[]} [opts.preserve] Array of strings or Regular Expressions\n   * denoting properties that should not be reverted.\n   * @since 3.0.0\n   */\n  revert (opts = {}) {\n    const previous = this._get('previous')\n    opts.preserve || (opts.preserve = [])\n    utils.forOwn(this, (value, key) => {\n      if (key !== this._mapper().idAttribute && !Object.hasOwnProperty.call(previous, key) && Object.hasOwnProperty.call(this, key) && opts.preserve.indexOf(key) === -1) {\n        delete this[key]\n      }\n    })\n    utils.forOwn(previous, (value, key) => {\n      if (opts.preserve.indexOf(key) === -1) {\n        this[key] = value\n      }\n    })\n    this.commit()\n  }\n\n  /**\n   * Delegates to {@link Mapper#create} or {@link Mapper#update}.\n   *\n   * @example\n   * import { Container } from 'js-data';\n   * import { RethinkDBAdapter } from 'js-data-rethinkdb';\n   *\n   * const store = new Container();\n   * store.registerAdapter('rethink', new RethinkDBAdapter(), { default: true });\n   * store.defineMapper('session');\n   * const session = store.createRecord('session', { topic: 'Node.js' });\n   *\n   * // Create a new record in the database\n   * session.save().then(() => {\n   *   console.log(session.id); // 1234\n   *\n   *   session.skill_level = 'beginner';\n   *\n   *   // Update the record in the database\n   *   return session.save();\n   * });\n   *\n   * @method Record#save\n   * @param {object} [opts] Configuration options. See {@link Mapper#create} and\n   * {@link Mapper#update}.\n   * @param {boolean} [opts.changesOnly] Equality function. Default uses `===`.\n   * @param {Function} [opts.equalsFn] Passed to {@link Record#changes} when\n   * `opts.changesOnly` is `true`.\n   * @param {array} [opts.ignore] Passed to {@link Record#changes} when\n   * `opts.changesOnly` is `true`.\n   * @returns {Promise} The result of calling {@link Mapper#create} or\n   * {@link Mapper#update}.\n   * @since 3.0.0\n   */\n  save (opts = {}) {\n    const mapper = this._mapper()\n    const id = utils.get(this, mapper.idAttribute)\n    let props = this\n\n    const postProcess = (result) => {\n      const record = opts.raw ? result.data : result\n      if (record) {\n        utils.deepMixIn(this, record)\n        this.commit()\n      }\n      return result\n    }\n\n    if (id === undefined) {\n      return superMethod(mapper, 'create')(props, opts).then(postProcess)\n    }\n    if (opts.changesOnly) {\n      const changes = this.changes(opts)\n      props = {}\n      utils.fillIn(props, changes.added)\n      utils.fillIn(props, changes.changed)\n    }\n    return superMethod(mapper, 'update')(id, props, opts).then(postProcess)\n  }\n\n  /**\n   * Set the value for a given key, or the values for the given keys if \"key\" is\n   * an object. Triggers change events on those properties that have `track: true`\n   * in {@link Mapper#schema}.\n   *\n   * @example <caption>Record#set</caption>\n   * const JSData = require('js-data');\n   * const { Container } = JSData;\n   * console.log('Using JSData v' + JSData.version.full);\n   * const store = new Container();\n   * store.defineMapper('user');\n   *\n   * const user = store.createRecord('user');\n   * console.log('user: ' + JSON.stringify(user));\n   *\n   * user.set('name', 'Bob');\n   * console.log('user: ' + JSON.stringify(user));\n   *\n   * user.set({ age: 30, role: 'admin' });\n   * console.log('user: ' + JSON.stringify(user));\n   *\n   * @fires Record#change\n   * @method Record#set\n   * @param {(string|Object)} key Key to set or hash of key-value pairs to set.\n   * @param {*} [value] Value to set for the given key.\n   * @param {object} [opts] Configuration options.\n   * @param {boolean} [opts.silent=false] Whether to trigger change events.\n   * @since 3.0.0\n   */\n  set (key, value, opts = {}) {\n    if (utils.isObject(key)) {\n      opts = value || {}\n    }\n    if (opts.silent) {\n      this._set('silent', true)\n    }\n    utils.set(this, key, value)\n    if (!this._get('eventId')) {\n      this._set('silent') // unset\n    }\n  }\n\n  /**\n   * Return a plain object representation of this record. If the class from\n   * which this record was created has a Mapper, then {@link Mapper#toJSON} will\n   * be called with this record instead.\n   *\n   * @example <caption>Record#toJSON</caption>\n   * const JSData = require('js-data');\n   * const { Container } = JSData;\n   * console.log('Using JSData v' + JSData.version.full);\n   * const store = new Container();\n   * store.defineMapper('user', {\n   *   schema: {\n   *     properties: {\n   *       name: { type: 'string' }\n   *     }\n   *   }\n   * });\n   *\n   * const user = store.createRecord('user', {\n   *   name: 'John',\n   *   $$hashKey: '1234'\n   * });\n   * console.log('user: ' + JSON.stringify(user.toJSON()));\n   *\n   * @method Record#toJSON\n   * @param {object} [opts] Configuration options.\n   * @param {string[]} [opts.with] Array of relation names or relation fields\n   * to include in the representation. Only available as an option if the class\n   * from which this record was created has a Mapper and this record resides in\n   * an instance of {@link DataStore}.\n   * @returns {Object} Plain object representation of this record.\n   * @since 3.0.0\n   */\n  toJSON (opts) {\n    const mapper = this.constructor.mapper\n    if (mapper) {\n      return mapper.toJSON(this, opts)\n    } else {\n      const json = {}\n      utils.forOwn(this, (prop, key) => {\n        json[key] = utils.plainCopy(prop)\n      })\n      return json\n    }\n  }\n\n  /**\n   * Unset the value for a given key. Triggers change events on those properties\n   * that have `track: true` in {@link Mapper#schema}.\n   *\n   * @example <caption>Record#unset</caption>\n   * const JSData = require('js-data');\n   * const { Container } = JSData;\n   * console.log('Using JSData v' + JSData.version.full);\n   * const store = new Container();\n   * store.defineMapper('user');\n   *\n   * const user = store.createRecord('user', {\n   *   name: 'John'\n   * });\n   * console.log('user: ' + JSON.stringify(user));\n   *\n   * user.unset('name');\n   * console.log('user: ' + JSON.stringify(user));\n   *\n   * @method Record#unset\n   * @param {string} key Key to unset.\n   * @param {object} [opts] Configuration options.\n   * @param {boolean} [opts.silent=false] Whether to trigger change events.\n   * @since 3.0.0\n   */\n  unset (key, opts) {\n    this.set(key, undefined, opts)\n  }\n\n  /**\n   * Validate this record based on its current properties.\n   *\n   * @example <caption>Record#validate</caption>\n   * const JSData = require('js-data');\n   * const { Container } = JSData;\n   * console.log('Using JSData v' + JSData.version.full);\n   * const store = new Container();\n   * store.defineMapper('user', {\n   *   schema: {\n   *     properties: {\n   *       name: { type: 'string' }\n   *     }\n   *   }\n   * });\n   * const user = store.createRecord('user', {\n   *   name: 1234\n   * }, {\n   *   noValidate: true // this allows us to put the record into an invalid state\n   * });\n   * console.log('user validation: ' + JSON.stringify(user.validate()));\n   * user.name = 'John';\n   * console.log('user validation: ' + user.validate());\n   *\n   * @method Record#validate\n   * @param {object} [opts] Configuration options. Passed to {@link Mapper#validate}.\n   * @returns {*} Array of errors or `undefined` if no errors.\n   * @since 3.0.0\n   */\n  validate (opts) {\n    return this._mapper().validate(this, opts)\n  }\n\n  static creatingPath = creatingPath\n  static noValidatePath = noValidatePath\n  static keepChangeHistoryPath = keepChangeHistoryPath\n  static previousPath = previousPath\n}\n\n/**\n * Allow records to emit events.\n *\n * An record's registered listeners are stored in the record's private data.\n */\nutils.eventify(\n  Record.prototype,\n  function () {\n    return this._get('events')\n  },\n  function (value) {\n    this._set('events', value)\n  }\n)\n\n/**\n * Fired when a record changes. Only works for records that have tracked fields.\n * See {@link Record~changeListener} on how to listen for this event.\n *\n * @event Record#change\n * @see Record~changeListener\n */\n\n/**\n * Callback signature for the {@link Record#event:change} event.\n *\n * @example\n * function onChange (record, changes) {\n *   // do something\n * }\n * record.on('change', onChange);\n *\n * @callback Record~changeListener\n * @param {Record} The Record that changed.\n * @param {object} The changes.\n * @see Record#event:change\n * @since 3.0.0\n */\n\n/**\n * Create a subclass of this Record:\n * @example <caption>Record.extend</caption>\n * const JSData = require('js-data');\n * const { Record } = JSData;\n * console.log('Using JSData v' + JSData.version.full);\n *\n * // Extend the class using ES2015 class syntax.\n * class CustomRecordClass extends Record {\n *   foo () { return 'bar'; }\n *   static beep () { return 'boop'; }\n * }\n * const customRecord = new CustomRecordClass();\n * console.log(customRecord.foo());\n * console.log(CustomRecordClass.beep());\n *\n * // Extend the class using alternate method.\n * const OtherRecordClass = Record.extend({\n *   foo () { return 'bar'; }\n * }, {\n *   beep () { return 'boop'; }\n * });\n * const otherRecord = new OtherRecordClass();\n * console.log(otherRecord.foo());\n * console.log(OtherRecordClass.beep());\n *\n * // Extend the class, providing a custom constructor.\n * function AnotherRecordClass () {\n *   Record.call(this);\n *   this.created_at = new Date().getTime();\n * }\n * Record.extend({\n *   constructor: AnotherRecordClass,\n *   foo () { return 'bar'; }\n * }, {\n *   beep () { return 'boop'; }\n * });\n * const anotherRecord = new AnotherRecordClass();\n * console.log(anotherRecord.created_at);\n * console.log(anotherRecord.foo());\n * console.log(AnotherRecordClass.beep());\n *\n * @method Record.extend\n * @param {object} [props={}] Properties to add to the prototype of the\n * subclass.\n * @param {object} [props.constructor] Provide a custom constructor function\n * to be used as the subclass itself.\n * @param {object} [classProps={}] Static properties to add to the subclass.\n * @returns {Constructor} Subclass of this Record class.\n * @since 3.0.0\n */\n","export function sort (a, b, hashCode) {\n  // Short-circuit comparison if a and b are strictly equal\n  // This is absolutely necessary for indexed objects that\n  // don't have the idAttribute field\n  if (a === b) {\n    return 0\n  }\n  if (hashCode) {\n    a = hashCode(a)\n    b = hashCode(b)\n  }\n  if ((a === null && b === null) || (a === undefined && b === undefined)) {\n    return -1\n  }\n\n  if (a === null || a === undefined) {\n    return -1\n  }\n\n  if (b === null || b === undefined) {\n    return 1\n  }\n\n  if (a < b) {\n    return -1\n  }\n\n  if (a > b) {\n    return 1\n  }\n\n  return 0\n}\n\nexport function insertAt (array, index, value) {\n  array.splice(index, 0, value)\n  return array\n}\n\nexport function removeAt (array, index) {\n  array.splice(index, 1)\n  return array\n}\n\nexport function binarySearch (array, value, field) {\n  let lo = 0\n  let hi = array.length\n  let compared\n  let mid\n\n  while (lo < hi) {\n    mid = ((lo + hi) / 2) | 0\n    compared = sort(value, array[mid], field)\n    if (compared === 0) {\n      return {\n        found: true,\n        index: mid\n      }\n    } else if (compared < 0) {\n      hi = mid\n    } else {\n      lo = mid + 1\n    }\n  }\n\n  return {\n    found: false,\n    index: hi\n  }\n}\n","// Copyright (c) 2015, InternalFX.\n\n// Permission to use, copy, modify, and/or distribute this software for any purpose with or\n// without fee is hereby granted, provided that the above copyright notice and this permission\n// notice appear in all copies.\n\n// THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH REGARD TO\n// THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT\n// SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR\n// ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION\n// OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE\n// USE OR PERFORMANCE OF THIS SOFTWARE.\n\n// Modifications\n// Copyright 2015-2016 Jason Dobry\n//\n// Summary of modifications:\n// Reworked dependencies so as to re-use code already in js-data\n// Removed unused code\nimport utils from '../../src/utils'\nimport { binarySearch, insertAt, removeAt } from './_utils'\n\nexport default class Index {\n  constructor (fieldList = [], opts = {}) {\n    if (!utils.isArray(fieldList)) {\n      throw new Error('fieldList must be an array.')\n    }\n\n    this.fieldList = fieldList\n    this.fieldGetter = opts.fieldGetter\n    this.hashCode = opts.hashCode\n    this.isIndex = true\n    this.keys = []\n    this.values = []\n  }\n\n  set (keyList, value) {\n    if (!utils.isArray(keyList)) {\n      keyList = [keyList]\n    }\n\n    const key = keyList.shift() || undefined\n    const pos = binarySearch(this.keys, key)\n\n    if (keyList.length === 0) {\n      if (pos.found) {\n        const dataLocation = binarySearch(this.values[pos.index], value, this.hashCode)\n        if (!dataLocation.found) {\n          insertAt(this.values[pos.index], dataLocation.index, value)\n        }\n      } else {\n        insertAt(this.keys, pos.index, key)\n        insertAt(this.values, pos.index, [value])\n      }\n    } else {\n      if (pos.found) {\n        this.values[pos.index].set(keyList, value)\n      } else {\n        insertAt(this.keys, pos.index, key)\n        const newIndex = new Index([], { hashCode: this.hashCode })\n        newIndex.set(keyList, value)\n        insertAt(this.values, pos.index, newIndex)\n      }\n    }\n  }\n\n  get (keyList) {\n    if (!utils.isArray(keyList)) {\n      keyList = [keyList]\n    }\n\n    const key = keyList.shift() || undefined\n    const pos = binarySearch(this.keys, key)\n\n    if (keyList.length === 0) {\n      if (pos.found) {\n        if (this.values[pos.index].isIndex) {\n          return this.values[pos.index].getAll()\n        } else {\n          return this.values[pos.index].slice()\n        }\n      } else {\n        return []\n      }\n    } else {\n      if (pos.found) {\n        return this.values[pos.index].get(keyList)\n      } else {\n        return []\n      }\n    }\n  }\n\n  getAll (opts = {}) {\n    let results = []\n    const values = this.values\n    if (opts.order === 'desc') {\n      for (let i = values.length - 1; i >= 0; i--) {\n        const value = values[i]\n        if (value.isIndex) {\n          results = results.concat(value.getAll(opts))\n        } else {\n          results = results.concat(value)\n        }\n      }\n    } else {\n      for (let i = 0; i < values.length; i++) {\n        const value = values[i]\n        if (value.isIndex) {\n          results = results.concat(value.getAll(opts))\n        } else {\n          results = results.concat(value)\n        }\n      }\n    }\n    return results\n  }\n\n  visitAll (cb, thisArg) {\n    this.values.forEach(function (value) {\n      if (value.isIndex) {\n        value.visitAll(cb, thisArg)\n      } else {\n        value.forEach(cb, thisArg)\n      }\n    })\n  }\n\n  between (leftKeys, rightKeys, opts = {}) {\n    if (!utils.isArray(leftKeys)) {\n      leftKeys = [leftKeys]\n    }\n    if (!utils.isArray(rightKeys)) {\n      rightKeys = [rightKeys]\n    }\n    utils.fillIn(opts, {\n      leftInclusive: true,\n      rightInclusive: false,\n      limit: undefined,\n      offset: 0\n    })\n\n    const results = this._between(leftKeys, rightKeys, opts)\n\n    if (opts.limit) {\n      return results.slice(opts.offset, opts.limit + opts.offset)\n    } else {\n      return results.slice(opts.offset)\n    }\n  }\n\n  _between (leftKeys, rightKeys, opts) {\n    let results = []\n\n    const leftKey = leftKeys.shift()\n    const rightKey = rightKeys.shift()\n\n    let pos\n\n    if (leftKey !== undefined) {\n      pos = binarySearch(this.keys, leftKey)\n    } else {\n      pos = {\n        found: false,\n        index: 0\n      }\n    }\n\n    if (leftKeys.length === 0) {\n      if (pos.found && opts.leftInclusive === false) {\n        pos.index += 1\n      }\n\n      for (let i = pos.index; i < this.keys.length; i += 1) {\n        if (rightKey !== undefined) {\n          if (opts.rightInclusive) {\n            if (this.keys[i] > rightKey) { break }\n          } else {\n            if (this.keys[i] >= rightKey) { break }\n          }\n        }\n\n        if (this.values[i].isIndex) {\n          results = results.concat(this.values[i].getAll())\n        } else {\n          results = results.concat(this.values[i])\n        }\n\n        if (opts.limit) {\n          if (results.length >= (opts.limit + opts.offset)) {\n            break\n          }\n        }\n      }\n    } else {\n      for (let i = pos.index; i < this.keys.length; i += 1) {\n        const currKey = this.keys[i]\n        if (currKey > rightKey) { break }\n\n        if (this.values[i].isIndex) {\n          if (currKey === leftKey) {\n            results = results.concat(this.values[i]._between(utils.copy(leftKeys), rightKeys.map(function () { return undefined }), opts))\n          } else if (currKey === rightKey) {\n            results = results.concat(this.values[i]._between(leftKeys.map(function () { return undefined }), utils.copy(rightKeys), opts))\n          } else {\n            results = results.concat(this.values[i].getAll())\n          }\n        } else {\n          results = results.concat(this.values[i])\n        }\n\n        if (opts.limit) {\n          if (results.length >= (opts.limit + opts.offset)) {\n            break\n          }\n        }\n      }\n    }\n\n    if (opts.limit) {\n      return results.slice(0, opts.limit + opts.offset)\n    } else {\n      return results\n    }\n  }\n\n  peek () {\n    if (this.values.length) {\n      if (this.values[0].isIndex) {\n        return this.values[0].peek()\n      } else {\n        return this.values[0]\n      }\n    }\n    return []\n  }\n\n  clear () {\n    this.keys = []\n    this.values = []\n  }\n\n  insertRecord (data) {\n    const keyList = this.fieldList.map(function (field) {\n      if (utils.isFunction(field)) {\n        return field(data) || undefined\n      } else {\n        return data[field] || undefined\n      }\n    })\n    this.set(keyList, data)\n  }\n\n  removeRecord (data) {\n    let removed\n    const isUnique = this.hashCode(data) !== undefined\n    this.values.forEach((value, i) => {\n      if (value.isIndex) {\n        if (value.removeRecord(data)) {\n          if (value.keys.length === 0) {\n            removeAt(this.keys, i)\n            removeAt(this.values, i)\n          }\n          removed = true\n          return false\n        }\n      } else {\n        let dataLocation = {}\n        if (this.keys[i] === undefined || !isUnique) {\n          for (let j = value.length - 1; j >= 0; j--) {\n            if (value[j] === data) {\n              dataLocation = {\n                found: true,\n                index: j\n              }\n              break\n            }\n          }\n        } else if (isUnique) {\n          dataLocation = binarySearch(value, data, this.hashCode)\n        }\n        if (dataLocation.found) {\n          removeAt(value, dataLocation.index)\n          if (value.length === 0) {\n            removeAt(this.keys, i)\n            removeAt(this.values, i)\n          }\n          removed = true\n          return false\n        }\n      }\n    })\n    return removed ? data : undefined\n  }\n\n  updateRecord (data) {\n    const removed = this.removeRecord(data)\n    if (removed !== undefined) {\n      this.insertRecord(data)\n    }\n  }\n}\n","import utils from './utils'\nimport Component from './Component'\nimport Query from './Query'\nimport Record from './Record'\nimport Index from '../lib/mindex/index'\n\nconst { noValidatePath } = Record\n\nconst DOMAIN = 'Collection'\n\nconst COLLECTION_DEFAULTS = {\n  /**\n   * Whether to call {@link Record#commit} on records that are added to the\n   * collection and already exist in the collection.\n   *\n   * @name Collection#commitOnMerge\n   * @type {boolean}\n   * @default true\n   */\n  commitOnMerge: true,\n\n  /**\n   * Whether record events should bubble up and be emitted by the collection.\n   *\n   * @name Collection#emitRecordEvents\n   * @type {boolean}\n   * @default true\n   */\n  emitRecordEvents: true,\n\n  /**\n   * Field to be used as the unique identifier for records in this collection.\n   * Defaults to `\"id\"` unless {@link Collection#mapper} is set, in which case\n   * this will default to {@link Mapper#idAttribute}.\n   *\n   * @name Collection#idAttribute\n   * @type {string}\n   * @default \"id\"\n   */\n  idAttribute: 'id',\n\n  /**\n   * What to do when inserting a record into this Collection that shares a\n   * primary key with a record already in this Collection.\n   *\n   * Possible values:\n   * merge\n   * replace\n   * skip\n   *\n   * Merge:\n   *\n   * Recursively shallow copy properties from the new record onto the existing\n   * record.\n   *\n   * Replace:\n   *\n   * Shallow copy top-level properties from the new record onto the existing\n   * record. Any top-level own properties of the existing record that are _not_\n   * on the new record will be removed.\n   *\n   * Skip:\n   *\n   * Ignore new record, keep existing record.\n   *\n   * @name Collection#onConflict\n   * @type {string}\n   * @default \"merge\"\n   */\n  onConflict: 'merge'\n}\n\n/**\n * An ordered set of {@link Record} instances.\n *\n * @example <caption>Collection#constructor</caption>\n * // import { Collection, Record } from 'js-data';\n * const JSData = require('js-data');\n * const {Collection, Record} = JSData;\n * console.log('Using JSData v' + JSData.version.full);\n *\n * const user1 = new Record({ id: 1 });\n * const user2 = new Record({ id: 2 });\n * const UserCollection = new Collection([user1, user2]);\n * console.log(UserCollection.get(1) === user1);\n *\n * @class Collection\n * @extends Component\n * @param {array} [records] Initial set of records to insert into the\n * collection.\n * @param {object} [opts] Configuration options.\n * @param {string} [opts.commitOnMerge] See {@link Collection#commitOnMerge}.\n * @param {string} [opts.idAttribute] See {@link Collection#idAttribute}.\n * @param {string} [opts.onConflict=\"merge\"] See {@link Collection#onConflict}.\n * @param {string} [opts.mapper] See {@link Collection#mapper}.\n * @since 3.0.0\n */\nexport default class Collection extends Component {\n  constructor (records, opts = {}) {\n    super(opts)\n\n    if (records && !utils.isArray(records)) {\n      opts = records\n      records = []\n    }\n    if (utils.isString(opts)) {\n      opts = { idAttribute: opts }\n    }\n\n    // Default values for arguments\n    records || (records = [])\n\n    Object.defineProperties(this, {\n      /**\n       * Default Mapper for this collection. Optional. If a Mapper is provided, then\n       * the collection will use the {@link Mapper#idAttribute} setting, and will\n       * wrap records in {@link Mapper#recordClass}.\n       *\n       * @example <caption>Collection#mapper</caption>\n       * const JSData = require('js-data');\n       * const {Collection, Mapper} = JSData;\n       * console.log('Using JSData v' + JSData.version.full);\n       *\n       * class MyMapperClass extends Mapper {\n       *   foo () { return 'bar'; }\n       * }\n       * const myMapper = new MyMapperClass({ name: 'myMapper' });\n       * const collection = new Collection(null, { mapper: myMapper });\n       *\n       * @name Collection#mapper\n       * @type {Mapper}\n       * @default null\n       * @since 3.0.0\n       */\n      mapper: {\n        value: undefined,\n        writable: true\n      },\n      // Query class used by this collection\n      queryClass: {\n        value: undefined,\n        writable: true\n      }\n    })\n\n    // Apply user-provided configuration\n    utils.fillIn(this, opts)\n    // Fill in any missing options with the defaults\n    utils.fillIn(this, utils.copy(COLLECTION_DEFAULTS))\n\n    if (!this.queryClass) {\n      this.queryClass = Query\n    }\n\n    const idAttribute = this.recordId()\n\n    Object.defineProperties(this, {\n      /**\n       * The main index, which uses @{link Collection#recordId} as the key.\n       *\n       * @name Collection#index\n       * @type {Index}\n       */\n      index: {\n        value: new Index([idAttribute], {\n          hashCode (obj) {\n            return utils.get(obj, idAttribute)\n          }\n        })\n      },\n\n      /**\n       * Object that holds the secondary indexes of this collection.\n       *\n       * @name Collection#indexes\n       * @type {Object.<string, Index>}\n       */\n      indexes: {\n        value: {}\n      }\n    })\n\n    // Insert initial data into the collection\n    if (utils.isObject(records) || (utils.isArray(records) && records.length)) {\n      this.add(records)\n    }\n  }\n\n  /**\n   * Used to bind to events emitted by records in this Collection.\n   *\n   * @method Collection#_onRecordEvent\n   * @since 3.0.0\n   * @private\n   * @param {...*} [arg] Args passed to {@link Collection#emit}.\n   */\n  _onRecordEvent (...args) {\n    if (this.emitRecordEvents) {\n      this.emit(...args)\n    }\n  }\n\n  /**\n   * Insert the provided record or records.\n   *\n   * If a record is already in the collection then the provided record will\n   * either merge with or replace the existing record based on the value of the\n   * `onConflict` option.\n   *\n   * The collection's secondary indexes will be updated as each record is\n   * visited.\n   *\n   * @method Collection#add\n   * @since 3.0.0\n   * @param {(Object|Object[]|Record|Record[])} records The record or records to insert.\n   * @param {object} [opts] Configuration options.\n   * @param {boolean} [opts.commitOnMerge=true] See {@link Collection#commitOnMerge}.\n   * @param {boolean} [opts.noValidate] See {@link Record#noValidate}.\n   * @param {string} [opts.onConflict] See {@link Collection#onConflict}.\n   * @returns {(Object|Object[]|Record|Record[])} The added record or records.\n   */\n  add (records, opts = {}) {\n    // Fill in \"opts\" with the Collection's configuration\n    utils._(opts, this)\n    records = this.beforeAdd(records, opts) || records\n\n    // Track whether just one record or an array of records is being inserted\n    let singular = false\n    const idAttribute = this.recordId()\n    if (!utils.isArray(records)) {\n      if (utils.isObject(records)) {\n        records = [records]\n        singular = true\n      } else {\n        throw utils.err(`${DOMAIN}#add`, 'records')(\n          400,\n          'object or array',\n          records\n        )\n      }\n    }\n\n    // Map the provided records to existing records.\n    // New records will be inserted. If any records map to existing records,\n    // they will be merged into the existing records according to the onConflict\n    // option.\n    records = records.map(record => {\n      const id = this.recordId(record)\n      // Grab existing record if there is one\n      const existing = id === undefined ? id : this.get(id)\n      // If the currently visited record is just a reference to an existing\n      // record, then there is nothing to be done. Exit early.\n      if (record === existing) {\n        return existing\n      }\n\n      if (existing) {\n        // Here, the currently visited record corresponds to a record already\n        // in the collection, so we need to merge them\n        const onConflict = opts.onConflict || this.onConflict\n        if (\n          onConflict !== 'merge' &&\n          onConflict !== 'replace' &&\n          onConflict !== 'skip'\n        ) {\n          throw utils.err(`${DOMAIN}#add`, 'opts.onConflict')(\n            400,\n            'one of (merge, replace, skip)',\n            onConflict,\n            true\n          )\n        }\n        const existingNoValidate = existing._get(noValidatePath)\n        if (opts.noValidate) {\n          // Disable validation\n          existing._set(noValidatePath, true)\n        }\n        if (onConflict === 'merge') {\n          utils.deepMixIn(existing, record)\n        } else if (onConflict === 'replace') {\n          utils.forOwn(existing, (value, key) => {\n            if (key !== idAttribute && record[key] === undefined) {\n              existing[key] = undefined\n            }\n          })\n          existing.set(record)\n        } // else if(onConflict === 'skip'){ do nothing }\n\n        if (opts.noValidate) {\n          // Restore previous `noValidate` value\n          existing._set(noValidatePath, existingNoValidate)\n        }\n        record = existing\n        if (opts.commitOnMerge && utils.isFunction(record.commit)) {\n          record.commit()\n        }\n        // Update all indexes in the collection\n        this.updateIndexes(record)\n      } else {\n        // Here, the currently visted record does not correspond to any record\n        // in the collection, so (optionally) instantiate this record and insert\n        // it into the collection\n        record = this.mapper ? this.mapper.createRecord(record, opts) : record\n        this.index.insertRecord(record)\n        utils.forOwn(this.indexes, function (index, name) {\n          index.insertRecord(record)\n        })\n        if (record && utils.isFunction(record.on)) {\n          record.on('all', this._onRecordEvent, this)\n        }\n      }\n      return record\n    })\n    // Finally, return the inserted data\n    const result = singular ? records[0] : records\n    if (!opts.silent) {\n      this.emit('add', result)\n    }\n    return this.afterAdd(records, opts, result) || result\n  }\n\n  /**\n   * Lifecycle hook called by {@link Collection#add}. If this method returns a\n   * value then {@link Collection#add} will return that same value.\n   *\n   * @method Collection#method\n   * @since 3.0.0\n   * @param {(Object|Object[]|Record|Record[])} result The record or records\n   * that were added to this Collection by {@link Collection#add}.\n   * @param {object} opts The `opts` argument passed to {@link Collection#add}.\n   */\n  afterAdd () {}\n\n  /**\n   * Lifecycle hook called by {@link Collection#remove}. If this method returns\n   * a value then {@link Collection#remove} will return that same value.\n   *\n   * @method Collection#afterRemove\n   * @since 3.0.0\n   * @param {(string|number)} id The `id` argument passed to {@link Collection#remove}.\n   * @param {object} opts The `opts` argument passed to {@link Collection#remove}.\n   * @param {object} record The result that will be returned by {@link Collection#remove}.\n   */\n  afterRemove () {}\n\n  /**\n   * Lifecycle hook called by {@link Collection#removeAll}. If this method\n   * returns a value then {@link Collection#removeAll} will return that same\n   * value.\n   *\n   * @method Collection#afterRemoveAll\n   * @since 3.0.0\n   * @param {object} query The `query` argument passed to {@link Collection#removeAll}.\n   * @param {object} opts The `opts` argument passed to {@link Collection#removeAll}.\n   * @param {object} records The result that will be returned by {@link Collection#removeAll}.\n   */\n  afterRemoveAll () {}\n\n  /**\n   * Lifecycle hook called by {@link Collection#add}. If this method returns a\n   * value then the `records` argument in {@link Collection#add} will be\n   * re-assigned to the returned value.\n   *\n   * @method Collection#beforeAdd\n   * @since 3.0.0\n   * @param {(Object|Object[]|Record|Record[])} records The `records` argument passed to {@link Collection#add}.\n   * @param {object} opts The `opts` argument passed to {@link Collection#add}.\n   */\n  beforeAdd () {}\n\n  /**\n   * Lifecycle hook called by {@link Collection#remove}.\n   *\n   * @method Collection#beforeRemove\n   * @since 3.0.0\n   * @param {(string|number)} id The `id` argument passed to {@link Collection#remove}.\n   * @param {object} opts The `opts` argument passed to {@link Collection#remove}.\n   */\n  beforeRemove () {}\n\n  /**\n   * Lifecycle hook called by {@link Collection#removeAll}.\n   *\n   * @method Collection#beforeRemoveAll\n   * @since 3.0.0\n   * @param {object} query The `query` argument passed to {@link Collection#removeAll}.\n   * @param {object} opts The `opts` argument passed to {@link Collection#removeAll}.\n   */\n  beforeRemoveAll () {}\n\n  /**\n   * Find all records between two boundaries.\n   *\n   * Shortcut for `collection.query().between(18, 30, { index: 'age' }).run()`\n   *\n   * @example\n   * // Get all users ages 18 to 30\n   * const users = collection.between(18, 30, { index: 'age' });\n   *\n   * @example\n   * // Same as above\n   * const users = collection.between([18], [30], { index: 'age' });\n   *\n   * @method Collection#between\n   * @since 3.0.0\n   * @param {array} leftKeys Keys defining the left boundary.\n   * @param {array} rightKeys Keys defining the right boundary.\n   * @param {object} [opts] Configuration options.\n   * @param {string} [opts.index] Name of the secondary index to use in the\n   * query. If no index is specified, the main index is used.\n   * @param {boolean} [opts.leftInclusive=true] Whether to include records\n   * on the left boundary.\n   * @param {boolean} [opts.rightInclusive=false] Whether to include records\n   * on the left boundary.\n   * @param {boolean} [opts.limit] Limit the result to a certain number.\n   * @param {boolean} [opts.offset] The number of resulting records to skip.\n   * @returns {Object[]|Record[]} The result.\n   */\n  between (leftKeys, rightKeys, opts) {\n    return this.query()\n      .between(leftKeys, rightKeys, opts)\n      .run()\n  }\n\n  /**\n   * Create a new secondary index on the contents of the collection.\n   *\n   * @example\n   * // Index users by age\n   * collection.createIndex('age');\n   *\n   * @example\n   * // Index users by status and role\n   * collection.createIndex('statusAndRole', ['status', 'role']);\n   *\n   * @method Collection#createIndex\n   * @since 3.0.0\n   * @param {string} name The name of the new secondary index.\n   * @param {string[]} [fieldList] Array of field names to use as the key or\n   * @param {Object} [opts]\n   * compound key of the new secondary index. If no fieldList is provided, then\n   * the name will also be the field that is used to index the collection.\n   */\n  createIndex (name, fieldList, opts = {}) {\n    if (utils.isString(name) && fieldList === undefined) {\n      fieldList = [name]\n    }\n    opts.hashCode || (opts.hashCode = obj => this.recordId(obj))\n    const index = (this.indexes[name] = new Index(fieldList, opts))\n    this.index.visitAll(index.insertRecord, index)\n  }\n\n  /**\n   * Find the record or records that match the provided query or pass the\n   * provided filter function.\n   *\n   * Shortcut for `collection.query().filter(queryOrFn[, thisArg]).run()`\n   *\n   * @example <caption>Collection#filter</caption>\n   * const JSData = require('js-data');\n   * const { Collection } = JSData;\n   * console.log('Using JSData v' + JSData.version.full);\n   *\n   * const collection = new Collection([\n   *   { id: 1, status: 'draft', created_at_timestamp: new Date().getTime() }\n   * ]);\n   *\n   * // Get the draft posts created less than three months ago\n   * let posts = collection.filter({\n   *   where: {\n   *     status: {\n   *       '==': 'draft'\n   *     },\n   *     created_at_timestamp: {\n   *       '>=': (new Date().getTime() - (1000 \\* 60 \\* 60 \\* 24 \\* 30 \\* 3)) // 3 months ago\n   *     }\n   *   }\n   * });\n   * console.log(posts);\n   *\n   * // Use a custom filter function\n   * posts = collection.filter((post) => post.id % 2 === 0);\n   *\n   * @method Collection#filter\n   * @param {(Object|Function)} [queryOrFn={}] Selection query or filter\n   * function.\n   * @param {object} [thisArg] Context to which to bind `queryOrFn` if\n   * `queryOrFn` is a function.\n   * @returns {Array} The result.\n   * @see query\n   * @since 3.0.0\n   */\n  filter (queryOrFn, thisArg) {\n    return this.query()\n      .filter(queryOrFn, thisArg)\n      .run()\n  }\n\n  /**\n   * Iterate over all records.\n   *\n   * @example\n   * collection.forEach(function (record) {\n   *   // do something\n   * });\n   *\n   * @method Collection#forEach\n   * @since 3.0.0\n   * @param {Function} forEachFn Iteration function.\n   * @param {*} [thisArg] Context to which to bind `forEachFn`.\n   * @returns {Array} The result.\n   */\n  forEach (cb, thisArg) {\n    this.index.visitAll(cb, thisArg)\n  }\n\n  /**\n   * Get the record with the given id.\n   *\n   * @method Collection#get\n   * @since 3.0.0\n   * @param {(string|number)} id The primary key of the record to get.\n   * @returns {(Object|Record)} The record with the given id.\n   */\n  get (id) {\n    const instances =\n      id === undefined\n        ? []\n        : this.query()\n          .get(id)\n          .run()\n    return instances.length ? instances[0] : undefined\n  }\n\n  /**\n   * Find the record or records that match the provided keyLists.\n   *\n   * Shortcut for `collection.query().getAll(keyList1, keyList2, ...).run()`\n   *\n   * @example\n   * // Get the posts where \"status\" is \"draft\" or \"inReview\"\n   * const posts = collection.getAll('draft', 'inReview', { index: 'status' });\n   *\n   * @example\n   * // Same as above\n   * const posts = collection.getAll(['draft'], ['inReview'], { index: 'status' });\n   *\n   * @method Collection#getAll\n   * @since 3.0.0\n   * @param {...Array} [keyList] Provide one or more keyLists, and all\n   * records matching each keyList will be retrieved. If no keyLists are\n   * provided, all records will be returned.\n   * @param {object} [opts] Configuration options.\n   * @param {string} [opts.index] Name of the secondary index to use in the\n   * query. If no index is specified, the main index is used.\n   * @returns {Array} The result.\n   */\n  getAll (...args) {\n    return this.query()\n      .getAll(...args)\n      .run()\n  }\n\n  /**\n   * Return the index with the given name. If no name is provided, return the\n   * main index. Throws an error if the specified index does not exist.\n   *\n   * @method Collection#getIndex\n   * @since 3.0.0\n   * @param {string} [name] The name of the index to retrieve.\n   */\n  getIndex (name) {\n    const index = name ? this.indexes[name] : this.index\n    if (!index) {\n      throw utils.err(`${DOMAIN}#getIndex`, name)(404, 'index')\n    }\n    return index\n  }\n\n  /**\n   * Limit the result.\n   *\n   * Shortcut for `collection.query().limit(maximumNumber).run()`\n   *\n   * @example\n   * const posts = collection.limit(10);\n   *\n   * @method Collection#limit\n   * @since 3.0.0\n   * @param {number} num The maximum number of records to keep in the result.\n   * @returns {Array} The result.\n   */\n  limit (num) {\n    return this.query()\n      .limit(num)\n      .run()\n  }\n\n  /**\n   * Apply a mapping function to all records.\n   *\n   * @example\n   * const names = collection.map((user) => user.name);\n   *\n   * @method Collection#map\n   * @since 3.0.0\n   * @param {Function} mapFn Mapping function.\n   * @param {*} [thisArg] Context to which to bind `mapFn`.\n   * @returns {Array} The result of the mapping.\n   */\n  map (cb, thisArg) {\n    const data = []\n    this.index.visitAll(function (value) {\n      data.push(cb.call(thisArg, value))\n    })\n    return data\n  }\n\n  /**\n   * Return the result of calling the specified function on each record in this\n   * collection's main index.\n   *\n   * @method Collection#mapCall\n   * @since 3.0.0\n   * @param {string} funcName Name of function to call\n   * @parama {...*} [args] Remaining arguments to be passed to the function.\n   * @returns {Array} The result.\n   */\n  mapCall (funcName, ...args) {\n    const data = []\n    this.index.visitAll(function (record) {\n      data.push(record[funcName](...args))\n    })\n    return data\n  }\n\n  /**\n   * Return all \"unsaved\" (not uniquely identifiable) records in this colleciton.\n   *\n   * @method Collection#prune\n   * @param {object} [opts] Configuration options, passed to {@link Collection#removeAll}.\n   * @since 3.0.0\n   * @returns {Array} The removed records, if any.\n   */\n  prune (opts) {\n    return this.removeAll(this.unsaved(), opts)\n  }\n\n  /**\n   * Create a new query to be executed against the contents of the collection.\n   * The result will be all or a subset of the contents of the collection.\n   *\n   * @example\n   * // Grab page 2 of users between ages 18 and 30\n   * collection.query()\n   *   .between(18, 30, { index: 'age' }) // between ages 18 and 30\n   *   .skip(10) // second page\n   *   .limit(10) // page size\n   *   .run();\n   *\n   * @method Collection#query\n   * @since 3.0.0\n   * @returns {Query} New query object.\n   */\n  query () {\n    const Ctor = this.queryClass\n    return new Ctor(this)\n  }\n\n  /**\n   * Return the primary key of the given, or if no record is provided, return the\n   * name of the field that holds the primary key of records in this Collection.\n   *\n   * @method Collection#recordId\n   * @since 3.0.0\n   * @param {(Object|Record)} [record] The record whose primary key is to be\n   * returned.\n   * @returns {(string|number)} Primary key or name of field that holds primary\n   * key.\n   */\n  recordId (record) {\n    if (record) {\n      return utils.get(record, this.recordId())\n    }\n    return this.mapper ? this.mapper.idAttribute : this.idAttribute\n  }\n\n  /**\n   * Reduce the data in the collection to a single value and return the result.\n   *\n   * @example\n   * const totalVotes = collection.reduce((prev, record) => {\n   *   return prev + record.upVotes + record.downVotes;\n   * }, 0);\n   *\n   * @method Collection#reduce\n   * @since 3.0.0\n   * @param {Function} cb Reduction callback.\n   * @param {*} initialValue Initial value of the reduction.\n   * @returns {*} The result.\n   */\n  reduce (cb, initialValue) {\n    const data = this.getAll()\n    return data.reduce(cb, initialValue)\n  }\n\n  /**\n   * Remove the record with the given id from this Collection.\n   *\n   * @method Collection#remove\n   * @since 3.0.0\n   * @param {(string|number|object|Record)} idOrRecord The primary key of the\n   * record to be removed, or a reference to the record that is to be removed.\n   * @param {object} [opts] Configuration options.\n   * @returns {Object|Record} The removed record, if any.\n   */\n  remove (idOrRecord, opts = {}) {\n    this.beforeRemove(idOrRecord, opts)\n    let record = utils.isSorN(idOrRecord) ? this.get(idOrRecord) : idOrRecord\n\n    // The record is in the collection, remove it\n    if (utils.isObject(record)) {\n      record = this.index.removeRecord(record)\n      if (record) {\n        utils.forOwn(this.indexes, function (index, name) {\n          index.removeRecord(record)\n        })\n        if (utils.isFunction(record.off)) {\n          record.off('all', this._onRecordEvent, this)\n        }\n        if (!opts.silent) {\n          this.emit('remove', record)\n        }\n      }\n    }\n    return this.afterRemove(idOrRecord, opts, record) || record\n  }\n\n  /**\n   * Remove from this collection the given records or the records selected by\n   * the given \"query\".\n   *\n   * @method Collection#removeAll\n   * @since 3.0.0\n   * @param {Object|Object[]|Record[]} [queryOrRecords={}] Records to be removed or selection query. See {@link query}.\n   * @param {object} [queryOrRecords.where] See {@link query.where}.\n   * @param {number} [queryOrRecords.offset] See {@link query.offset}.\n   * @param {number} [queryOrRecords.limit] See {@link query.limit}.\n   * @param {string|Array[]} [queryOrRecords.orderBy] See {@link query.orderBy}.\n   * @param {object} [opts] Configuration options.\n   * @returns {(Object[]|Record[])} The removed records, if any.\n   */\n  removeAll (queryOrRecords, opts = {}) {\n    this.beforeRemoveAll(queryOrRecords, opts)\n    let records = utils.isArray(queryOrRecords)\n      ? queryOrRecords.slice()\n      : this.filter(queryOrRecords)\n\n    // Remove each selected record from the collection\n    const optsCopy = utils.plainCopy(opts)\n    optsCopy.silent = true\n    records = records\n      .map(record => this.remove(record, optsCopy))\n      .filter(record => record)\n    if (!opts.silent) {\n      this.emit('remove', records)\n    }\n    return this.afterRemoveAll(queryOrRecords, opts, records) || records\n  }\n\n  /**\n   * Skip a number of results.\n   *\n   * Shortcut for `collection.query().skip(numberToSkip).run()`\n   *\n   * @example\n   * const posts = collection.skip(10);\n   *\n   * @method Collection#skip\n   * @since 3.0.0\n   * @param {number} num The number of records to skip.\n   * @returns {Array} The result.\n   */\n  skip (num) {\n    return this.query()\n      .skip(num)\n      .run()\n  }\n\n  /**\n   * Return the plain JSON representation of all items in this collection.\n   * Assumes records in this collection have a toJSON method.\n   *\n   * @method Collection#toJSON\n   * @since 3.0.0\n   * @param {object} [opts] Configuration options.\n   * @param {string[]} [opts.with] Array of relation names or relation fields\n   * to include in the representation.\n   * @returns {Array} The records.\n   */\n  toJSON (opts) {\n    return this.mapCall('toJSON', opts)\n  }\n\n  /**\n   * Return all \"unsaved\" (not uniquely identifiable) records in this colleciton.\n   *\n   * @method Collection#unsaved\n   * @since 3.0.0\n   * @returns {Array} The unsaved records, if any.\n   */\n  unsaved (opts) {\n    return this.index.get()\n  }\n\n  /**\n   * Update a record's position in a single index of this collection. See\n   * {@link Collection#updateIndexes} to update a record's position in all\n   * indexes at once.\n   *\n   * @method Collection#updateIndex\n   * @since 3.0.0\n   * @param {object} record The record to update.\n   * @param {object} [opts] Configuration options.\n   * @param {string} [opts.index] The index in which to update the record's\n   * position. If you don't specify an index then the record will be updated\n   * in the main index.\n   */\n  updateIndex (record, opts = {}) {\n    this.getIndex(opts.index).updateRecord(record)\n  }\n\n  /**\n   * Updates all indexes in this collection for the provided record. Has no\n   * effect if the record is not in the collection.\n   *\n   * @method Collection#updateIndexes\n   * @since 3.0.0\n   * @param {object} record TODO\n   */\n  updateIndexes (record) {\n    this.index.updateRecord(record)\n    utils.forOwn(this.indexes, function (index, name) {\n      index.updateRecord(record)\n    })\n  }\n}\n\n/**\n * Fired when a record changes. Only works for records that have tracked changes.\n * See {@link Collection~changeListener} on how to listen for this event.\n *\n * @event Collection#change\n * @see Collection~changeListener\n */\n\n/**\n * Callback signature for the {@link Collection#event:change} event.\n *\n * @example\n * function onChange (record, changes) {\n *   // do something\n * }\n * collection.on('change', onChange);\n *\n * @callback Collection~changeListener\n * @param {Record} The Record that changed.\n * @param {object} The changes.\n * @see Collection#event:change\n * @since 3.0.0\n */\n\n/**\n * Fired when one or more records are added to the Collection. See\n * {@link Collection~addListener} on how to listen for this event.\n *\n * @event Collection#add\n * @see Collection~addListener\n * @see Collection#event:add\n * @see Collection#add\n */\n\n/**\n * Callback signature for the {@link Collection#event:add} event.\n *\n * @example\n * function onAdd (recordOrRecords) {\n *   // do something\n * }\n * collection.on('add', onAdd);\n *\n * @callback Collection~addListener\n * @param {Record|Record[]} The Record or Records that were added.\n * @see Collection#event:add\n * @see Collection#add\n * @since 3.0.0\n */\n\n/**\n * Fired when one or more records are removed from the Collection. See\n * {@link Collection~removeListener} for how to listen for this event.\n *\n * @event Collection#remove\n * @see Collection~removeListener\n * @see Collection#event:remove\n * @see Collection#remove\n * @see Collection#removeAll\n */\n\n/**\n * Callback signature for the {@link Collection#event:remove} event.\n *\n * @example\n * function onRemove (recordsOrRecords) {\n *   // do something\n * }\n * collection.on('remove', onRemove);\n *\n * @callback Collection~removeListener\n * @param {Record|Record[]} Record or Records that were removed.\n * @see Collection#event:remove\n * @see Collection#remove\n * @see Collection#removeAll\n * @since 3.0.0\n */\n\n/**\n * Create a subclass of this Collection:\n * @example <caption>Collection.extend</caption>\n * const JSData = require('js-data');\n * const { Collection } = JSData;\n * console.log('Using JSData v' + JSData.version.full);\n *\n * // Extend the class using ES2015 class syntax.\n * class CustomCollectionClass extends Collection {\n *   foo () { return 'bar'; }\n *   static beep () { return 'boop'; }\n * }\n * const customCollection = new CustomCollectionClass();\n * console.log(customCollection.foo());\n * console.log(CustomCollectionClass.beep());\n *\n * // Extend the class using alternate method.\n * const OtherCollectionClass = Collection.extend({\n *   foo () { return 'bar'; }\n * }, {\n *   beep () { return 'boop'; }\n * });\n * const otherCollection = new OtherCollectionClass();\n * console.log(otherCollection.foo());\n * console.log(OtherCollectionClass.beep());\n *\n * // Extend the class, providing a custom constructor.\n * function AnotherCollectionClass () {\n *   Collection.call(this);\n *   this.created_at = new Date().getTime();\n * }\n * Collection.extend({\n *   constructor: AnotherCollectionClass,\n *   foo () { return 'bar'; }\n * }, {\n *   beep () { return 'boop'; }\n * });\n * const anotherCollection = new AnotherCollectionClass();\n * console.log(anotherCollection.created_at);\n * console.log(anotherCollection.foo());\n * console.log(AnotherCollectionClass.beep());\n *\n * @method Collection.extend\n * @param {object} [props={}] Properties to add to the prototype of the\n * subclass.\n * @param {object} [props.constructor] Provide a custom constructor function\n * to be used as the subclass itself.\n * @param {object} [classProps={}] Static properties to add to the subclass.\n * @returns {Constructor} Subclass of this Collection class.\n * @since 3.0.0\n */\n","import utils from './utils'\nimport Component from './Component'\n\nconst DOMAIN = 'Schema'\n\n/**\n * A function map for each of the seven primitive JSON types defined by the core specification.\n * Each function will check a given value and return true or false if the value is an instance of that type.\n * ```\n *   types.integer(1) // returns true\n *   types.string({}) // returns false\n * ```\n * http://json-schema.org/latest/json-schema-core.html#anchor8\n * @name Schema.types\n * @type {object}\n */\nconst types = {\n  array: utils.isArray,\n  boolean: utils.isBoolean,\n  integer: utils.isInteger,\n  null: utils.isNull,\n  number: utils.isNumber,\n  object: utils.isObject,\n  string: utils.isString\n}\n\n/**\n * @ignore\n */\nconst segmentToString = function (segment, prev) {\n  let str = ''\n  if (segment) {\n    if (utils.isNumber(segment)) {\n      str += `[${segment}]`\n    } else if (prev) {\n      str += `.${segment}`\n    } else {\n      str += `${segment}`\n    }\n  }\n  return str\n}\n\n/**\n * @ignore\n */\nconst makePath = function (opts = {}) {\n  let path = ''\n  const segments = opts.path || []\n  segments.forEach(function (segment) {\n    path += segmentToString(segment, path)\n  })\n  path += segmentToString(opts.prop, path)\n  return path\n}\n\n/**\n * @ignore\n */\nconst makeError = function (actual, expected, opts) {\n  return {\n    expected,\n    actual: '' + actual,\n    path: makePath(opts)\n  }\n}\n\n/**\n * @ignore\n */\nconst addError = function (actual, expected, opts, errors) {\n  errors.push(makeError(actual, expected, opts))\n}\n\n/**\n * @ignore\n */\nconst maxLengthCommon = function (keyword, value, schema, opts) {\n  const max = schema[keyword]\n  if (value.length > max) {\n    return makeError(value.length, `length no more than ${max}`, opts)\n  }\n}\n\n/**\n * @ignore\n */\nconst minLengthCommon = function (keyword, value, schema, opts) {\n  const min = schema[keyword]\n  if (value.length < min) {\n    return makeError(value.length, `length no less than ${min}`, opts)\n  }\n}\n\n/**\n * A map of all object member validation functions for each keyword defined in the JSON Schema.\n * @name Schema.validationKeywords\n * @type {object}\n */\nconst validationKeywords = {\n  /**\n   * Validates the provided value against all schemas defined in the Schemas `allOf` keyword.\n   * The instance is valid against if and only if it is valid against all the schemas declared in the Schema's value.\n   *\n   * The value of this keyword MUST be an array. This array MUST have at least one element.\n   * Each element of this array MUST be a valid JSON Schema.\n   *\n   * see http://json-schema.org/latest/json-schema-validation.html#anchor82\n   *\n   * @name Schema.validationKeywords.allOf\n   * @method\n   * @param {*} value Value to be validated.\n   * @param {object} schema Schema containing the `allOf` keyword.\n   * @param {object} [opts] Configuration options.\n   * @returns {(array|undefined)} Array of errors or `undefined` if valid.\n   */\n  allOf (value, schema, opts) {\n    let allErrors = []\n    schema.allOf.forEach(function (_schema) {\n      allErrors = allErrors.concat(validate(value, _schema, opts) || [])\n    })\n    return allErrors.length ? allErrors : undefined\n  },\n\n  /**\n   * Validates the provided value against all schemas defined in the Schemas `anyOf` keyword.\n   * The instance is valid against this keyword if and only if it is valid against\n   * at least one of the schemas in this keyword's value.\n   *\n   * The value of this keyword MUST be an array. This array MUST have at least one element.\n   * Each element of this array MUST be an object, and each object MUST be a valid JSON Schema.\n   * see http://json-schema.org/latest/json-schema-validation.html#anchor85\n   *\n   * @name Schema.validationKeywords.anyOf\n   * @method\n   * @param {*} value Value to be validated.\n   * @param {object} schema Schema containing the `anyOf` keyword.\n   * @param {object} [opts] Configuration options.\n   * @returns {(array|undefined)} Array of errors or `undefined` if valid.\n   */\n  anyOf (value, schema, opts) {\n    let validated = false\n    let allErrors = []\n    schema.anyOf.forEach(function (_schema) {\n      const errors = validate(value, _schema, opts)\n      if (errors) {\n        allErrors = allErrors.concat(errors)\n      } else {\n        validated = true\n      }\n    })\n    return validated ? undefined : allErrors\n  },\n\n  /**\n   * http://json-schema.org/latest/json-schema-validation.html#anchor70\n   *\n   * @name Schema.validationKeywords.dependencies\n   * @method\n   * @param {*} value TODO\n   * @param {object} schema TODO\n   * @param {object} opts TODO\n   */\n  dependencies (value, schema, opts) {\n    // TODO\n  },\n\n  /**\n   * Validates the provided value against an array of possible values defined by the Schema's `enum` keyword\n   * Validation succeeds if the value is deeply equal to one of the values in the array.\n   * see http://json-schema.org/latest/json-schema-validation.html#anchor76\n   *\n   * @name Schema.validationKeywords.enum\n   * @method\n   * @param {*} value Value to validate\n   * @param {object} schema Schema containing the `enum` keyword.\n   * @param {object} [opts] Configuration options.\n   * @returns {(array|undefined)} Array of errors or `undefined` if valid.\n   */\n  enum (value, schema, opts) {\n    const possibleValues = schema.enum\n    if (utils.findIndex(possibleValues, (item) => utils.deepEqual(item, value)) === -1) {\n      return makeError(value, `one of (${possibleValues.join(', ')})`, opts)\n    }\n  },\n\n  /**\n   * Validates each of the provided array values against a schema or an array of schemas defined by the Schema's `items` keyword\n   * see http://json-schema.org/latest/json-schema-validation.html#anchor37 for validation rules.\n   *\n   * @name Schema.validationKeywords.items\n   * @method\n   * @param {*} value Array to be validated.\n   * @param {object} schema Schema containing the items keyword.\n   * @param {object} [opts] Configuration options.\n   * @returns {(array|undefined)} Array of errors or `undefined` if valid.\n   */\n  items (value, schema, opts = {}) {\n    // TODO: additionalItems\n    let items = schema.items\n    let errors = []\n    const checkingTuple = utils.isArray(items)\n    const length = value.length\n    for (var prop = 0; prop < length; prop++) {\n      if (checkingTuple) {\n        // Validating a tuple, instead of just checking each item against the\n        // same schema\n        items = schema.items[prop]\n      }\n      opts.prop = prop\n      errors = errors.concat(validate(value[prop], items, opts) || [])\n    }\n    return errors.length ? errors : undefined\n  },\n\n  /**\n   * Validates the provided number against a maximum value defined by the Schema's `maximum` keyword\n   * Validation succeeds if the value is a number, and is less than, or equal to, the value of this keyword.\n   * http://json-schema.org/latest/json-schema-validation.html#anchor17\n   *\n   * @name Schema.validationKeywords.maximum\n   * @method\n   * @param {*} value Number to validate against the keyword.\n   * @param {object} schema Schema containing the `maximum` keyword.\n   * @param {object} [opts] Configuration options.\n   * @returns {(array|undefined)} Array of errors or `undefined` if valid.\n   */\n  maximum (value, schema, opts) {\n    // Must be a number\n    const maximum = schema.maximum\n    // Must be a boolean\n    // Depends on maximum\n    // default: false\n    const exclusiveMaximum = schema.exclusiveMaximum\n    if (typeof value === typeof maximum && !(exclusiveMaximum ? maximum > value : maximum >= value)) {\n      return exclusiveMaximum\n        ? makeError(value, `no more than nor equal to ${maximum}`, opts)\n        : makeError(value, `no more than ${maximum}`, opts)\n    }\n  },\n\n  /**\n   * Validates the length of the provided array against a maximum value defined by the Schema's `maxItems` keyword.\n   * Validation succeeds if the length of the array is less than, or equal to the value of this keyword.\n   * see http://json-schema.org/latest/json-schema-validation.html#anchor42\n   *\n   * @name Schema.validationKeywords.maxItems\n   * @method\n   * @param {*} value Array to be validated.\n   * @param {object} schema Schema containing the `maxItems` keyword.\n   * @param {object} [opts] Configuration options.\n   * @returns {(array|undefined)} Array of errors or `undefined` if valid.\n   */\n  maxItems (value, schema, opts) {\n    if (utils.isArray(value)) {\n      return maxLengthCommon('maxItems', value, schema, opts)\n    }\n  },\n\n  /**\n   * Validates the length of the provided string against a maximum value defined in the Schema's `maxLength` keyword.\n   * Validation succeeds if the length of the string is less than, or equal to the value of this keyword.\n   * see http://json-schema.org/latest/json-schema-validation.html#anchor26\n   *\n   * @name Schema.validationKeywords.maxLength\n   * @method\n   * @param {*} value String to be validated.\n   * @param {object} schema Schema containing the `maxLength` keyword.\n   * @param {object} [opts] Configuration options.\n   * @returns {(array|undefined)} Array of errors or `undefined` if valid.\n   */\n  maxLength (value, schema, opts) {\n    return maxLengthCommon('maxLength', value, schema, opts)\n  },\n\n  /**\n   * Validates the count of the provided object's properties against a maximum value defined in the Schema's `maxProperties` keyword.\n   * Validation succeeds if the object's property count is less than, or equal to the value of this keyword.\n   * see http://json-schema.org/latest/json-schema-validation.html#anchor54\n   *\n   * @name Schema.validationKeywords.maxProperties\n   * @method\n   * @param {*} value Object to be validated.\n   * @param {object} schema Schema containing the `maxProperties` keyword.\n   * @param {object} [opts] Configuration options.\n   * @returns {(array|undefined)} Array of errors or `undefined` if valid.\n   */\n  maxProperties (value, schema, opts) {\n    // validate only objects\n    if (!utils.isObject(value)) return\n    const maxProperties = schema.maxProperties\n    const length = Object.keys(value).length\n    if (length > maxProperties) {\n      return makeError(length, `no more than ${maxProperties} properties`, opts)\n    }\n  },\n\n  /**\n   * Validates the provided value against a minimum value defined by the Schema's `minimum` keyword\n   * Validation succeeds if the value is a number and is greater than, or equal to, the value of this keyword.\n   * http://json-schema.org/latest/json-schema-validation.html#anchor21\n   *\n   * @name Schema.validationKeywords.minimum\n   * @method\n   * @param {*} value Number to validate against the keyword.\n   * @param {object} schema Schema containing the `minimum` keyword.\n   * @param {object} [opts] Configuration options.\n   * @returns {(array|undefined)} Array of errors or `undefined` if valid.\n   */\n  minimum (value, schema, opts) {\n    // Must be a number\n    const minimum = schema.minimum\n    // Must be a boolean\n    // Depends on minimum\n    // default: false\n    const exclusiveMinimum = schema.exclusiveMinimum\n    if (typeof value === typeof minimum && !(exclusiveMinimum ? value > minimum : value >= minimum)) {\n      return exclusiveMinimum\n        ? makeError(value, `no less than nor equal to ${minimum}`, opts)\n        : makeError(value, `no less than ${minimum}`, opts)\n    }\n  },\n\n  /**\n   * Validates the length of the provided array against a minimum value defined by the Schema's `minItems` keyword.\n   * Validation succeeds if the length of the array is greater than, or equal to the value of this keyword.\n   * see http://json-schema.org/latest/json-schema-validation.html#anchor45\n   *\n   * @name Schema.validationKeywords.minItems\n   * @method\n   * @param {*} value Array to be validated.\n   * @param {object} schema Schema containing the `minItems` keyword.\n   * @param {object} [opts] Configuration options.\n   * @returns {(array|undefined)} Array of errors or `undefined` if valid.\n   */\n  minItems (value, schema, opts) {\n    if (utils.isArray(value)) {\n      return minLengthCommon('minItems', value, schema, opts)\n    }\n  },\n\n  /**\n   * Validates the length of the provided string against a minimum value defined in the Schema's `minLength` keyword.\n   * Validation succeeds if the length of the string is greater than, or equal to the value of this keyword.\n   * see http://json-schema.org/latest/json-schema-validation.html#anchor29\n   *\n   * @name Schema.validationKeywords.minLength\n   * @method\n   * @param {*} value String to be validated.\n   * @param {object} schema Schema containing the `minLength` keyword.\n   * @param {object} [opts] Configuration options.\n   * @returns {(array|undefined)} Array of errors or `undefined` if valid.\n   */\n  minLength (value, schema, opts) {\n    return minLengthCommon('minLength', value, schema, opts)\n  },\n\n  /**\n   * Validates the count of the provided object's properties against a minimum value defined in the Schema's `minProperties` keyword.\n   * Validation succeeds if the object's property count is greater than, or equal to the value of this keyword.\n   * see http://json-schema.org/latest/json-schema-validation.html#anchor57\n   *\n   * @name Schema.validationKeywords.minProperties\n   * @method\n   * @param {*} value Object to be validated.\n   * @param {object} schema Schema containing the `minProperties` keyword.\n   * @param {object} [opts] Configuration options.\n   * @returns {(array|undefined)} Array of errors or `undefined` if valid.\n   */\n  minProperties (value, schema, opts) {\n    // validate only objects\n    if (!utils.isObject(value)) return\n    const minProperties = schema.minProperties\n    const length = Object.keys(value).length\n    if (length < minProperties) {\n      return makeError(length, `no more than ${minProperties} properties`, opts)\n    }\n  },\n\n  /**\n   * Validates the provided number is a multiple of the number defined in the Schema's `multipleOf` keyword.\n   * Validation succeeds if the number can be divided equally into the value of this keyword.\n   * see http://json-schema.org/latest/json-schema-validation.html#anchor14\n   *\n   * @name Schema.validationKeywords.multipleOf\n   * @method\n   * @param {*} value Number to be validated.\n   * @param {object} schema Schema containing the `multipleOf` keyword.\n   * @param {object} [opts] Configuration options.\n   * @returns {(array|undefined)} Array of errors or `undefined` if valid.\n   */\n  multipleOf (value, schema, opts) {\n    const multipleOf = schema.multipleOf\n    if (utils.isNumber(value)) {\n      if ((value / multipleOf) % 1 !== 0) {\n        return makeError(value, `multipleOf ${multipleOf}`, opts)\n      }\n    }\n  },\n\n  /**\n   * Validates the provided value is not valid with any of the schemas defined in the Schema's `not` keyword.\n   * An instance is valid against this keyword if and only if it is NOT valid against the schemas in this keyword's value.\n   *\n   * see http://json-schema.org/latest/json-schema-validation.html#anchor91\n   * @name Schema.validationKeywords.not\n   * @method\n   * @param {*} value to be checked.\n   * @param {object} schema Schema containing the not keyword.\n   * @param {object} [opts] Configuration options.\n   * @returns {(array|undefined)} Array of errors or `undefined` if valid.\n   */\n  not (value, schema, opts) {\n    if (!validate(value, schema.not, opts)) {\n      // TODO: better messaging\n      return makeError('succeeded', 'should have failed', opts)\n    }\n  },\n\n  /**\n   * Validates the provided value is valid with one and only one of the schemas defined in the Schema's `oneOf` keyword.\n   * An instance is valid against this keyword if and only if it is valid against a single schemas in this keyword's value.\n   *\n   * see http://json-schema.org/latest/json-schema-validation.html#anchor88\n   * @name Schema.validationKeywords.oneOf\n   * @method\n   * @param {*} value to be checked.\n   * @param {object} schema Schema containing the `oneOf` keyword.\n   * @param {object} [opts] Configuration options.\n   * @returns {(array|undefined)} Array of errors or `undefined` if valid.\n   */\n  oneOf (value, schema, opts) {\n    let validated = false\n    let allErrors = []\n    schema.oneOf.forEach(function (_schema) {\n      const errors = validate(value, _schema, opts)\n      if (errors) {\n        allErrors = allErrors.concat(errors)\n      } else if (validated) {\n        allErrors = [makeError('valid against more than one', 'valid against only one', opts)]\n        validated = false\n        return false\n      } else {\n        validated = true\n      }\n    })\n    return validated ? undefined : allErrors\n  },\n\n  /**\n   * Validates the provided string matches a pattern defined in the Schema's `pattern` keyword.\n   * Validation succeeds if the string is a match of the regex value of this keyword.\n   *\n   * see http://json-schema.org/latest/json-schema-validation.html#anchor33\n   * @name Schema.validationKeywords.pattern\n   * @method\n   * @param {*} value String to be validated.\n   * @param {object} schema Schema containing the `pattern` keyword.\n   * @param {object} [opts] Configuration options.\n   * @returns {(array|undefined)} Array of errors or `undefined` if valid.\n   */\n  pattern (value, schema, opts) {\n    const pattern = schema.pattern\n    if (utils.isString(value) && !value.match(pattern)) {\n      return makeError(value, pattern, opts)\n    }\n  },\n\n  /**\n   * Validates the provided object's properties against a map of values defined in the Schema's `properties` keyword.\n   * Validation succeeds if the object's property are valid with each of the schema's in the provided map.\n   * Validation also depends on the additionalProperties and or patternProperties.\n   *\n   * see http://json-schema.org/latest/json-schema-validation.html#anchor64 for more info.\n   *\n   * @name Schema.validationKeywords.properties\n   * @method\n   * @param {*} value Object to be validated.\n   * @param {object} schema Schema containing the `properties` keyword.\n   * @param {object} [opts] Configuration options.\n   * @returns {(array|undefined)} Array of errors or `undefined` if valid.\n   */\n  properties (value, schema, opts = {}) {\n    if (utils.isArray(value)) {\n      return\n    }\n\n    // Can be a boolean or an object\n    // Technically the default is an \"empty schema\", but here \"true\" is\n    // functionally the same\n    const additionalProperties = schema.additionalProperties === undefined ? true : schema.additionalProperties\n    const validated = []\n    // \"p\": The property set from \"properties\".\n    // Default is an object\n    const properties = schema.properties || {}\n    // \"pp\": The property set from \"patternProperties\".\n    // Default is an object\n    const patternProperties = schema.patternProperties || {}\n    let errors = []\n\n    utils.forOwn(properties, function (_schema, prop) {\n      opts.prop = prop\n      errors = errors.concat(validate(value[prop], _schema, opts) || [])\n      validated.push(prop)\n    })\n\n    const toValidate = utils.omit(value, validated)\n    utils.forOwn(patternProperties, function (_schema, pattern) {\n      utils.forOwn(toValidate, function (undef, prop) {\n        if (prop.match(pattern)) {\n          opts.prop = prop\n          errors = errors.concat(validate(value[prop], _schema, opts) || [])\n          validated.push(prop)\n        }\n      })\n    })\n    const keys = Object.keys(utils.omit(value, validated))\n    // If \"s\" is not empty, validation fails\n    if (additionalProperties === false) {\n      if (keys.length) {\n        const origProp = opts.prop\n        opts.prop = ''\n        addError(`extra fields: ${keys.join(', ')}`, 'no extra fields', opts, errors)\n        opts.prop = origProp\n      }\n    } else if (utils.isObject(additionalProperties)) {\n      // Otherwise, validate according to provided schema\n      keys.forEach(function (prop) {\n        opts.prop = prop\n        errors = errors.concat(validate(value[prop], additionalProperties, opts) || [])\n      })\n    }\n    return errors.length ? errors : undefined\n  },\n\n  /**\n   * Validates the provided object's has all properties listed in the Schema's `properties` keyword array.\n   * Validation succeeds if the object contains all properties provided in the array value of this keyword.\n   * see http://json-schema.org/latest/json-schema-validation.html#anchor61\n   *\n   * @name Schema.validationKeywords.required\n   * @method\n   * @param {*} value Object to be validated.\n   * @param {object} schema Schema containing the `required` keyword.\n   * @param {object} [opts] Configuration options.\n   * @returns {(array|undefined)} Array of errors or `undefined` if valid.\n   */\n  required (value, schema, opts = {}) {\n    const required = schema.required\n    const errors = []\n    if (!opts.existingOnly) {\n      required.forEach(function (prop) {\n        if (utils.get(value, prop) === undefined) {\n          const prevProp = opts.prop\n          opts.prop = prop\n          addError(undefined, 'a value', opts, errors)\n          opts.prop = prevProp\n        }\n      })\n    }\n    return errors.length ? errors : undefined\n  },\n\n  /**\n   * Validates the provided value's type is equal to the type, or array of types, defined in the Schema's `type` keyword.\n   * see http://json-schema.org/latest/json-schema-validation.html#anchor79\n   *\n   * @name Schema.validationKeywords.type\n   * @method\n   * @param {*} value Value to be validated.\n   * @param {object} schema Schema containing the `type` keyword.\n   * @param {object} [opts] Configuration options.\n   * @returns {(array|undefined)} Array of errors or `undefined` if valid.\n   */\n  type (value, schema, opts) {\n    let type = schema.type\n    let validType\n    // Can be one of several types\n    if (utils.isString(type)) {\n      type = [type]\n    }\n    // Try to match the value against an expected type\n    type.forEach(function (_type) {\n      // TODO: throw an error if type is not defined\n      if (types[_type](value, schema, opts)) {\n        // Matched a type\n        validType = _type\n        return false\n      }\n    })\n    // Value did not match any expected type\n    if (!validType) {\n      return makeError(value !== undefined && value !== null ? typeof value : '' + value, `one of (${type.join(', ')})`, opts)\n    }\n    // Run keyword validators for matched type\n    // http://json-schema.org/latest/json-schema-validation.html#anchor12\n    const validator = typeGroupValidators[validType]\n    if (validator) {\n      return validator(value, schema, opts)\n    }\n  },\n\n  /**\n   * Validates the provided array values are unique.\n   * Validation succeeds if the items in the array are unique, but only if the value of this keyword is true\n   * see http://json-schema.org/latest/json-schema-validation.html#anchor49\n   *\n   * @name Schema.validationKeywords.uniqueItems\n   * @method\n   * @param {*} value Array to be validated.\n   * @param {object} schema Schema containing the `uniqueItems` keyword.\n   * @param {object} [opts] Configuration options.\n   * @returns {(array|undefined)} Array of errors or `undefined` if valid.\n   */\n  uniqueItems (value, schema, opts) {\n    if (value && value.length && schema.uniqueItems) {\n      const length = value.length\n      let item, i, j\n      // Check n - 1 items\n      for (i = length - 1; i > 0; i--) {\n        item = value[i]\n        // Only compare against unchecked items\n        for (j = i - 1; j >= 0; j--) {\n          // Found a duplicate\n          if (utils.deepEqual(item, value[j])) {\n            return makeError(item, 'no duplicates', opts)\n          }\n        }\n      }\n    }\n  }\n}\n\n/**\n * @ignore\n */\nconst runOps = function (ops, value, schema, opts) {\n  let errors = []\n  ops.forEach(function (op) {\n    if (schema[op] !== undefined) {\n      errors = errors.concat(validationKeywords[op](value, schema, opts) || [])\n    }\n  })\n  return errors.length ? errors : undefined\n}\n\n/**\n * Validation keywords validated for any type:\n *\n * - `enum`\n * - `type`\n * - `allOf`\n * - `anyOf`\n * - `oneOf`\n * - `not`\n *\n * @name Schema.ANY_OPS\n * @type {string[]}\n */\nconst ANY_OPS = ['enum', 'type', 'allOf', 'anyOf', 'oneOf', 'not']\n\n/**\n * Validation keywords validated for array types:\n *\n * - `items`\n * - `maxItems`\n * - `minItems`\n * - `uniqueItems`\n *\n * @name Schema.ARRAY_OPS\n * @type {string[]}\n */\nconst ARRAY_OPS = ['items', 'maxItems', 'minItems', 'uniqueItems']\n\n/**\n * Validation keywords validated for numeric (number and integer) types:\n *\n * - `multipleOf`\n * - `maximum`\n * - `minimum`\n *\n * @name Schema.NUMERIC_OPS\n * @type {string[]}\n */\nconst NUMERIC_OPS = ['multipleOf', 'maximum', 'minimum']\n\n/**\n * Validation keywords validated for object types:\n *\n * - `maxProperties`\n * - `minProperties`\n * - `required`\n * - `properties`\n * - `dependencies`\n *\n * @name Schema.OBJECT_OPS\n * @type {string[]}\n */\nconst OBJECT_OPS = ['maxProperties', 'minProperties', 'required', 'properties', 'dependencies']\n\n/**\n * Validation keywords validated for string types:\n *\n * - `maxLength`\n * - `minLength`\n * - `pattern`\n *\n * @name Schema.STRING_OPS\n * @type {string[]}\n */\nconst STRING_OPS = ['maxLength', 'minLength', 'pattern']\n\n/**\n * http://json-schema.org/latest/json-schema-validation.html#anchor75\n * @ignore\n */\nconst validateAny = function (value, schema, opts) {\n  return runOps(ANY_OPS, value, schema, opts)\n}\n\n/**\n * Validates the provided value against a given Schema according to the http://json-schema.org/ v4 specification.\n *\n * @name Schema.validate\n * @method\n * @param {*} value Value to be validated.\n * @param {object} schema Valid Schema according to the http://json-schema.org/ v4 specification.\n * @param {object} [opts] Configuration options.\n * @returns {(array|undefined)} Array of errors or `undefined` if valid.\n */\nconst validate = function (value, schema, opts = {}) {\n  let errors = []\n  opts.ctx || (opts.ctx = { value, schema })\n  let shouldPop\n  const prevProp = opts.prop\n  if (schema === undefined) {\n    return\n  }\n  if (!utils.isObject(schema)) {\n    throw utils.err(`${DOMAIN}#validate`)(500, `Invalid schema at path: \"${opts.path}\"`)\n  }\n  if (opts.path === undefined) {\n    opts.path = []\n  }\n  // Track our location as we recurse\n  if (opts.prop !== undefined) {\n    shouldPop = true\n    opts.path.push(opts.prop)\n    opts.prop = undefined\n  }\n  // Validate against parent schema\n  if (schema.extends) {\n    // opts.path = path\n    // opts.prop = prop\n    if (utils.isFunction(schema.extends.validate)) {\n      errors = errors.concat(schema.extends.validate(value, opts) || [])\n    } else {\n      errors = errors.concat(validate(value, schema.extends, opts) || [])\n    }\n  }\n  if (value === undefined) {\n    // Check if property is required\n    if (schema.required === true && !opts.existingOnly) {\n      addError(value, 'a value', opts, errors)\n    }\n    if (shouldPop) {\n      opts.path.pop()\n      opts.prop = prevProp\n    }\n    return errors.length ? errors : undefined\n  }\n\n  errors = errors.concat(validateAny(value, schema, opts) || [])\n  if (shouldPop) {\n    opts.path.pop()\n    opts.prop = prevProp\n  }\n  return errors.length ? errors : undefined\n}\n\n// These strings are cached for optimal performance of the change detection\n// boolean - Whether a Record is changing in the current execution frame\nconst changingPath = 'changing'\n// string[] - Properties that have changed in the current execution frame\nconst changedPath = 'changed'\n// Object[] - History of change records\nconst changeHistoryPath = 'history'\n// boolean - Whether a Record is currently being instantiated\nconst creatingPath = 'creating'\n// number - The setTimeout change event id of a Record, if any\nconst eventIdPath = 'eventId'\n// boolean - Whether to skip validation for a Record's currently changing property\nconst noValidatePath = 'noValidate'\n// boolean - Whether to preserve Change History for a Record\nconst keepChangeHistoryPath = 'keepChangeHistory'\n// boolean - Whether to skip change notification for a Record's currently\n// changing property\nconst silentPath = 'silent'\nconst validationFailureMsg = 'validation failed'\n\n/**\n * A map of validation functions grouped by type.\n *\n * @name Schema.typeGroupValidators\n * @type {object}\n */\nconst typeGroupValidators = {\n  /**\n   * Validates the provided value against the schema using all of the validation keywords specific to instances of an array.\n   * The validation keywords for the type `array` are:\n   *```\n   * ['items', 'maxItems', 'minItems', 'uniqueItems']\n   *```\n   * see http://json-schema.org/latest/json-schema-validation.html#anchor25\n   *\n   * @name Schema.typeGroupValidators.array\n   * @method\n   * @param {*} value Array to be validated.\n   * @param {object} schema Schema containing at least one array keyword.\n   * @param {object} [opts] Configuration options.\n   * @returns {(array|undefined)} Array of errors or `undefined` if valid.\n   */\n  array: function (value, schema, opts) {\n    return runOps(ARRAY_OPS, value, schema, opts)\n  },\n\n  /**\n   * Validates the provided value against the schema using all of the validation keywords specific to instances of an integer.\n   * The validation keywords for the type `integer` are:\n   *```\n   * ['multipleOf', 'maximum', 'minimum']\n   *```\n   * @name Schema.typeGroupValidators.integer\n   * @method\n   * @param {*} value Number to be validated.\n   * @param {object} schema Schema containing at least one `integer` keyword.\n   * @param {object} [opts] Configuration options.\n   * @returns {(array|undefined)} Array of errors or `undefined` if valid.\n   */\n  integer: function (value, schema, opts) {\n    // Additional validations for numerics are the same\n    return typeGroupValidators.numeric(value, schema, opts)\n  },\n\n  /**\n   * Validates the provided value against the schema using all of the validation keywords specific to instances of an number.\n   * The validation keywords for the type `number` are:\n   *```\n   * ['multipleOf', 'maximum', 'minimum']\n   *```\n   * @name Schema.typeGroupValidators.number\n   * @method\n   * @param {*} value Number to be validated.\n   * @param {object} schema Schema containing at least one `number` keyword.\n   * @param {object} [opts] Configuration options.\n   * @returns {(array|undefined)} Array of errors or `undefined` if valid.\n   */\n  number: function (value, schema, opts) {\n    // Additional validations for numerics are the same\n    return typeGroupValidators.numeric(value, schema, opts)\n  },\n\n  /**\n   * Validates the provided value against the schema using all of the validation keywords specific to instances of a number or integer.\n   * The validation keywords for the type `numeric` are:\n   *```\n   * ['multipleOf', 'maximum', 'minimum']\n   *```\n   * See http://json-schema.org/latest/json-schema-validation.html#anchor13.\n   *\n   * @name Schema.typeGroupValidators.numeric\n   * @method\n   * @param {*} value Number to be validated.\n   * @param {object} schema Schema containing at least one `numeric` keyword.\n   * @param {object} [opts] Configuration options.\n   * @returns {(array|undefined)} Array of errors or `undefined` if valid.\n   */\n  numeric: function (value, schema, opts) {\n    return runOps(NUMERIC_OPS, value, schema, opts)\n  },\n\n  /**\n   * Validates the provided value against the schema using all of the validation keywords specific to instances of an object.\n   * The validation keywords for the type `object` are:\n   *```\n   * ['maxProperties', 'minProperties', 'required', 'properties', 'dependencies']\n   *```\n   * See http://json-schema.org/latest/json-schema-validation.html#anchor53.\n   *\n   * @name Schema.typeGroupValidators.object\n   * @method\n   * @param {*} value Object to be validated.\n   * @param {object} schema Schema containing at least one `object` keyword.\n   * @param {object} [opts] Configuration options.\n   * @returns {(array|undefined)} Array of errors or `undefined` if valid.\n   */\n  object: function (value, schema, opts) {\n    return runOps(OBJECT_OPS, value, schema, opts)\n  },\n\n  /**\n   * Validates the provided value against the schema using all of the validation keywords specific to instances of an string.\n   * The validation keywords for the type `string` are:\n   *```\n   * ['maxLength', 'minLength', 'pattern']\n   *```\n   * See http://json-schema.org/latest/json-schema-validation.html#anchor25.\n   *\n   * @name Schema.typeGroupValidators.string\n   * @method\n   * @param {*} value String to be validated.\n   * @param {object} schema Schema containing at least one `string` keyword.\n   * @param {object} [opts] Configuration options.\n   * @returns {(array|undefined)} Array of errors or `undefined` if valid.\n   */\n  string: function (value, schema, opts) {\n    return runOps(STRING_OPS, value, schema, opts)\n  }\n}\n\n/**\n * js-data's Schema class.\n *\n * @example <caption>Schema#constructor</caption>\n * const JSData = require('js-data');\n * const { Schema } = JSData;\n * console.log('Using JSData v' + JSData.version.full);\n *\n * const PostSchema = new Schema({\n *   type: 'object',\n *   properties: {\n *     title: { type: 'string' }\n *   }\n * });\n * PostSchema.validate({ title: 1234 });\n *\n * @class Schema\n * @extends Component\n * @param {object} definition Schema definition according to json-schema.org\n */\nexport default class Schema extends Component {\n  constructor (definition) {\n    super()\n    definition || (definition = {})\n    // TODO: schema validation\n    utils.fillIn(this, definition)\n\n    if (this.type === 'object') {\n      this.properties = this.properties || {}\n      utils.forOwn(this.properties, (_definition, prop) => {\n        if (!(_definition instanceof Schema)) {\n          this.properties[prop] = new Schema(_definition)\n        }\n      })\n    } else if (this.type === 'array' && this.items && !(this.items instanceof Schema)) {\n      this.items = new Schema(this.items)\n    }\n    if (this.extends && !(this.extends instanceof Schema)) {\n      this.extends = new Schema(this.extends)\n    }\n    ['allOf', 'anyOf', 'oneOf'].forEach((validationKeyword) => {\n      if (this[validationKeyword]) {\n        this[validationKeyword].forEach((_definition, i) => {\n          if (!(_definition instanceof Schema)) {\n            this[validationKeyword][i] = new Schema(_definition)\n          }\n        })\n      }\n    })\n  }\n\n  /**\n   * This adds ES5 getters/setters to the target based on the \"properties\" in\n   * this Schema, which makes possible change tracking and validation on\n   * property assignment.\n   *\n   * @name Schema#apply\n   * @method\n   * @param {object} target The prototype to which to apply this schema.\n   * @param {object} opts\n   */\n  apply (target, opts = {}) {\n    opts.getter || (opts.getter = '_get')\n    opts.setter || (opts.setter = '_set')\n    opts.unsetter || (opts.unsetter = '_unset')\n    opts.track || (opts.track = this.track)\n    const properties = this.properties || {}\n    utils.forOwn(properties, (schema, prop) => {\n      Object.defineProperty(\n        target,\n        prop,\n        this.makeDescriptor(prop, schema, opts)\n      )\n    })\n  }\n\n  /**\n   * Apply default values to the target object for missing values.\n   *\n   * @name Schema#applyDefaults\n   * @method\n   * @param {object} target The target to which to apply values for missing values.\n   */\n  applyDefaults (target) {\n    if (!target) {\n      return\n    }\n    const properties = this.properties || {}\n    const hasSet = utils.isFunction(target.set) || utils.isFunction(target._set)\n    utils.forOwn(properties, function (schema, prop) {\n      if (Object.hasOwnProperty.call(schema, 'default') && utils.get(target, prop) === undefined) {\n        if (hasSet) {\n          target.set(prop, utils.plainCopy(schema.default), { silent: true })\n        } else {\n          utils.set(target, prop, utils.plainCopy(schema.default))\n        }\n      }\n      if (schema.type === 'object' && schema.properties) {\n        if (hasSet) {\n          const orig = target._get('noValidate')\n          target._set('noValidate', true)\n          utils.set(target, prop, utils.get(target, prop) || {}, { silent: true })\n          target._set('noValidate', orig)\n        } else {\n          utils.set(target, prop, utils.get(target, prop) || {})\n        }\n        schema.applyDefaults(utils.get(target, prop))\n      }\n    })\n  }\n\n  /**\n   * Assemble a property descriptor for tracking and validating changes to\n   * a property according to the given schema. This method is called when\n   * {@link Mapper#applySchema} is set to `true`.\n   *\n   * @name Schema#makeDescriptor\n   * @method\n   * @param {string} prop The property name.\n   * @param {(Schema|object)} schema The schema for the property.\n   * @param {object} [opts] Optional configuration.\n   * @param {function} [opts.getter] Custom getter function.\n   * @param {function} [opts.setter] Custom setter function.\n   * @param {function} [opts.track] Whether to track changes.\n   * @returns {object} A property descriptor for the given schema.\n   */\n  makeDescriptor (prop, schema, opts) {\n    const descriptor = {\n      // Better to allow configurability, but at the user's own risk\n      configurable: true,\n      // These properties are enumerable by default, but regardless of their\n      // enumerability, they won't be \"own\" properties of individual records\n      enumerable: schema.enumerable === undefined ? true : !!schema.enumerable\n    }\n    // Cache a few strings for optimal performance\n    const keyPath = `props.${prop}`\n    const previousPath = `previous.${prop}`\n    const getter = opts.getter\n    const setter = opts.setter\n    const unsetter = opts.unsetter\n    const track = utils.isBoolean(opts.track) ? opts.track : schema.track\n\n    descriptor.get = function () {\n      return this._get(keyPath)\n    }\n\n    if (utils.isFunction(schema.get)) {\n      const originalGet = descriptor.get\n      descriptor.get = function () {\n        return schema.get.call(this, originalGet)\n      }\n    }\n\n    descriptor.set = function (value) {\n      // These are accessed a lot\n      const _get = this[getter]\n      const _set = this[setter]\n      const _unset = this[unsetter]\n      // Optionally check that the new value passes validation\n      if (!_get(noValidatePath)) {\n        const errors = schema.validate(value, { path: [prop] })\n        if (errors) {\n          // Immediately throw an error, preventing the record from getting into\n          // an invalid state\n          const error = new Error(validationFailureMsg)\n          error.errors = errors\n          throw error\n        }\n      }\n      // TODO: Make it so tracking can be turned on for all properties instead of\n      // only per-property\n      if (track && !_get(creatingPath)) {\n        // previous is versioned on database commit\n        // props are versioned on set()\n        const previous = _get(previousPath)\n        const current = _get(keyPath)\n        let changing = _get(changingPath)\n        let changed = _get(changedPath)\n\n        if (!changing) {\n          // Track properties that are changing in the current event loop\n          changed = []\n        }\n\n        // Add changing properties to this array once at most\n        const index = changed.indexOf(prop)\n        if (current !== value && index === -1) {\n          changed.push(prop)\n        }\n        if (previous === value) {\n          if (index >= 0) {\n            changed.splice(index, 1)\n          }\n        }\n        // No changes in current event loop\n        if (!changed.length) {\n          changing = false\n          _unset(changingPath)\n          _unset(changedPath)\n          // Cancel pending change event\n          if (_get(eventIdPath)) {\n            clearTimeout(_get(eventIdPath))\n            _unset(eventIdPath)\n          }\n        }\n        // Changes detected in current event loop\n        if (!changing && changed.length) {\n          _set(changedPath, changed)\n          _set(changingPath, true)\n          // Saving the timeout id allows us to batch all changes in the same\n          // event loop into a single \"change\"\n          // TODO: Optimize\n          _set(eventIdPath, setTimeout(() => {\n            // Previous event loop where changes were gathered has ended, so\n            // notify any listeners of those changes and prepare for any new\n            // changes\n            _unset(changedPath)\n            _unset(eventIdPath)\n            _unset(changingPath)\n            // TODO: Optimize\n            if (!_get(silentPath)) {\n              let i\n              for (i = 0; i < changed.length; i++) {\n                this.emit('change:' + changed[i], this, utils.get(this, changed[i]))\n              }\n\n              const changes = utils.diffObjects({ [prop]: value }, { [prop]: current })\n\n              if (_get(keepChangeHistoryPath)) {\n                const changeRecord = utils.plainCopy(changes)\n                changeRecord.timestamp = new Date().getTime()\n                let changeHistory = _get(changeHistoryPath)\n                !changeHistory && _set(changeHistoryPath, (changeHistory = []))\n                changeHistory.push(changeRecord)\n              }\n              this.emit('change', this, changes)\n            }\n            _unset(silentPath)\n          }, 0))\n        }\n      }\n      _set(keyPath, value)\n      return value\n    }\n\n    if (utils.isFunction(schema.set)) {\n      const originalSet = descriptor.set\n      descriptor.set = function (value) {\n        return schema.set.call(this, value, originalSet)\n      }\n    }\n\n    return descriptor\n  }\n\n  /**\n   * Create a copy of the given value that contains only the properties defined\n   * in this schema.\n   *\n   * @name Schema#pick\n   * @method\n   * @param {*} value The value to copy.\n   * @returns {*} The copy.\n   */\n  pick (value) {\n    if (value === undefined) {\n      return\n    }\n    if (this.type === 'object') {\n      const copy = {}\n      const properties = this.properties\n      if (properties) {\n        utils.forOwn(properties, (_definition, prop) => {\n          copy[prop] = _definition.pick(value[prop])\n        })\n      }\n      if (this.extends) {\n        utils.fillIn(copy, this.extends.pick(value))\n      }\n      // Conditionally copy properties not defined in \"properties\"\n      if (this.additionalProperties) {\n        for (var key in value) {\n          if (!properties[key]) {\n            copy[key] = utils.plainCopy(value[key])\n          }\n        }\n      }\n      return copy\n    } else if (this.type === 'array') {\n      return value.map((item) => {\n        const _copy = this.items ? this.items.pick(item) : {}\n        if (this.extends) {\n          utils.fillIn(_copy, this.extends.pick(item))\n        }\n        return _copy\n      })\n    }\n    return utils.plainCopy(value)\n  }\n\n  /**\n   * Validate the provided value against this schema.\n   *\n   * @name Schema#validate\n   * @method\n   * @param {*} value Value to validate.\n   * @param {object} [opts] Configuration options.\n   * @returns {(array|undefined)} Array of errors or `undefined` if valid.\n   */\n  validate (value, opts) {\n    return validate(value, this, opts)\n  }\n\n  static ANY_OPS = ANY_OPS\n  static ARRAY_OPS = ARRAY_OPS;\n  static NUMERIC_OPS = NUMERIC_OPS;\n  static OBJECT_OPS = OBJECT_OPS;\n  static STRING_OPS = STRING_OPS;\n  static typeGroupValidators = typeGroupValidators;\n  static types = types;\n  static validate = validate;\n  static validationKeywords = validationKeywords;\n}\n\n/**\n * Create a subclass of this Schema:\n * @example <caption>Schema.extend</caption>\n * const JSData = require('js-data');\n * const { Schema } = JSData;\n * console.log('Using JSData v' + JSData.version.full);\n *\n * // Extend the class using ES2015 class syntax.\n * class CustomSchemaClass extends Schema {\n *   foo () { return 'bar'; }\n *   static beep () { return 'boop'; }\n * }\n * const customSchema = new CustomSchemaClass();\n * console.log(customSchema.foo());\n * console.log(CustomSchemaClass.beep());\n *\n * // Extend the class using alternate method.\n * const OtherSchemaClass = Schema.extend({\n *   foo () { return 'bar'; }\n * }, {\n *   beep () { return 'boop'; }\n * });\n * const otherSchema = new OtherSchemaClass();\n * console.log(otherSchema.foo());\n * console.log(OtherSchemaClass.beep());\n *\n * // Extend the class, providing a custom constructor.\n * function AnotherSchemaClass () {\n *   Schema.call(this);\n *   this.created_at = new Date().getTime();\n * }\n * Schema.extend({\n *   constructor: AnotherSchemaClass,\n *   foo () { return 'bar'; }\n * }, {\n *   beep () { return 'boop'; }\n * });\n * const anotherSchema = new AnotherSchemaClass();\n * console.log(anotherSchema.created_at);\n * console.log(anotherSchema.foo());\n * console.log(AnotherSchemaClass.beep());\n *\n * @method Schema.extend\n * @param {object} [props={}] Properties to add to the prototype of the\n * subclass.\n * @param {object} [props.constructor] Provide a custom constructor function\n * to be used as the subclass itself.\n * @param {object} [classProps={}] Static properties to add to the subclass.\n * @returns {Constructor} Subclass of this Schema class.\n * @since 3.0.0\n */\n","import utils from './utils'\nimport Component from './Component'\nimport Record from './Record'\nimport Schema from './Schema'\nimport { Relation } from './relations'\nimport {\n  belongsTo,\n  belongsToType,\n  hasMany,\n  hasManyType,\n  hasOne,\n  hasOneType\n} from './decorators'\n\nconst DOMAIN = 'Mapper'\nconst applyDefaultsHooks = [\n  'beforeCreate',\n  'beforeCreateMany'\n]\nconst validatingHooks = [\n  'beforeCreate',\n  'beforeCreateMany',\n  'beforeUpdate',\n  'beforeUpdateAll',\n  'beforeUpdateMany'\n]\nconst makeNotify = function (num) {\n  return function (...args) {\n    const opts = args[args.length - num]\n    const op = opts.op\n    this.dbg(op, ...args)\n\n    if (applyDefaultsHooks.indexOf(op) !== -1 && opts.applyDefaults !== false) {\n      const schema = this.getSchema()\n      if (schema && schema.applyDefaults) {\n        let toProcess = args[0]\n        if (!utils.isArray(toProcess)) {\n          toProcess = [toProcess]\n        }\n        toProcess.forEach((record) => {\n          schema.applyDefaults(record)\n        })\n      }\n    }\n\n    // Automatic validation\n    if (validatingHooks.indexOf(op) !== -1 && !opts.noValidate) {\n      // Save current value of option\n      const originalExistingOnly = opts.existingOnly\n\n      // For updates, ignore required fields if they aren't present\n      if (op.indexOf('beforeUpdate') === 0 && opts.existingOnly === undefined) {\n        opts.existingOnly = true\n      }\n      const errors = this.validate(args[op === 'beforeUpdate' ? 1 : 0], utils.pick(opts, ['existingOnly']))\n\n      // Restore option\n      opts.existingOnly = originalExistingOnly\n\n      // Abort lifecycle due to validation errors\n      if (errors) {\n        const err = new Error('validation failed')\n        err.errors = errors\n        return utils.reject(err)\n      }\n    }\n\n    // Emit lifecycle event\n    if (opts.notify || (opts.notify === undefined && this.notify)) {\n      setTimeout(() => {\n        this.emit(op, ...args)\n      })\n    }\n  }\n}\n\n// These are the default implementations of all of the lifecycle hooks\nconst notify = makeNotify(1)\nconst notify2 = makeNotify(2)\n\n// This object provides meta information used by Mapper#crud to actually\n// execute each lifecycle method\nconst LIFECYCLE_METHODS = {\n  count: {\n    defaults: [{}, {}],\n    skip: true,\n    types: []\n  },\n  destroy: {\n    defaults: [{}, {}],\n    skip: true,\n    types: []\n  },\n  destroyAll: {\n    defaults: [{}, {}],\n    skip: true,\n    types: []\n  },\n  find: {\n    defaults: [undefined, {}],\n    types: []\n  },\n  findAll: {\n    defaults: [{}, {}],\n    types: []\n  },\n  sum: {\n    defaults: [undefined, {}, {}],\n    skip: true,\n    types: []\n  },\n  update: {\n    adapterArgs (mapper, id, props, opts) {\n      return [id, mapper.toJSON(props, opts), opts]\n    },\n    beforeAssign: 1,\n    defaults: [undefined, {}, {}],\n    types: []\n  },\n  updateAll: {\n    adapterArgs (mapper, props, query, opts) {\n      return [mapper.toJSON(props, opts), query, opts]\n    },\n    beforeAssign: 0,\n    defaults: [{}, {}, {}],\n    types: []\n  },\n  updateMany: {\n    adapterArgs (mapper, records, opts) {\n      return [records.map((record) => mapper.toJSON(record, opts)), opts]\n    },\n    beforeAssign: 0,\n    defaults: [[], {}],\n    types: []\n  }\n}\n\nconst MAPPER_DEFAULTS = {\n  /**\n   * Hash of registered adapters. Don't modify directly. Use\n   * {@link Mapper#registerAdapter} instead.\n   *\n   * @default {}\n   * @name Mapper#_adapters\n   * @since 3.0.0\n   * @tutorial [\"http://www.js-data.io/v3.0/docs/connecting-to-a-data-source\",\"Connecting to a data source\"]\n   */\n  _adapters: {},\n\n  /**\n   * Whether {@link Mapper#beforeCreate} and {@link Mapper#beforeCreateMany}\n   * should automatically receive default values according to the Mapper's schema.\n   *\n   * @default true\n   * @name Mapper#applyDefaults\n   * @since 3.0.0\n   * @type {boolean}\n   */\n  applyDefaults: true,\n\n  /**\n   * Whether to augment {@link Mapper#recordClass} with ES5 getters and setters\n   * according to the properties defined in {@link Mapper#schema}. This makes\n   * possible validation and change tracking on individual properties\n   * when using the dot (e.g. `user.name = \"Bob\"`) operator to modify a\n   * property, and is `true` by default.\n   *\n   * @default true\n   * @name Mapper#applySchema\n   * @since 3.0.0\n   * @type {boolean}\n   */\n  applySchema: true,\n\n  /**\n   * The name of the registered adapter that this Mapper should used by default.\n   *\n   * @default \"http\"\n   * @name Mapper#defaultAdapter\n   * @since 3.0.0\n   * @tutorial [\"http://www.js-data.io/v3.0/docs/connecting-to-a-data-source\",\"Connecting to a data source\"]\n   * @type {string}\n   */\n  defaultAdapter: 'http',\n\n  /**\n   * The field used as the unique identifier on records handled by this Mapper.\n   *\n   * @default id\n   * @name Mapper#idAttribute\n   * @since 3.0.0\n   * @type {string}\n   */\n  idAttribute: 'id',\n\n  /**\n   * Whether records created from this mapper keep changeHistory on property changes.\n   *\n   * @default true\n   * @name Mapper#keepChangeHistory\n   * @since 3.0.0\n   * @type {boolean}\n   */\n  keepChangeHistory: true,\n\n  /**\n   * Whether this Mapper should emit operational events.\n   *\n   * @default true\n   * @name Mapper#notify\n   * @since 3.0.0\n   * @type {boolean}\n   */\n  notify: true,\n\n  /**\n   * Whether to skip validation when the Record instances are created.\n   *\n   * @default false\n   * @name Mapper#noValidate\n   * @since 3.0.0\n   * @type {boolean}\n   */\n  noValidate: false,\n\n  /**\n   * Whether {@link Mapper#create}, {@link Mapper#createMany},\n   * {@link Mapper#update}, {@link Mapper#updateAll}, {@link Mapper#updateMany},\n   * {@link Mapper#find}, {@link Mapper#findAll}, {@link Mapper#destroy},\n   * {@link Mapper#destroyAll}, {@link Mapper#count}, and {@link Mapper#sum}\n   * should return a raw result object that contains both the instance data\n   * returned by the adapter _and_ metadata about the operation.\n   *\n   * The default is to NOT return the result object, and instead return just the\n   * instance data.\n   *\n   * @default false\n   * @name Mapper#raw\n   * @since 3.0.0\n   * @type {boolean}\n   */\n  raw: false,\n\n  /**\n   * Whether records created from this mapper automatically validate their properties\n   * when their properties are modified.\n   *\n   * @default true\n   * @name Mapper#validateOnSet\n   * @since 3.0.0\n   * @type {boolean}\n   */\n  validateOnSet: true\n}\n\n/**\n * The core of JSData's [ORM/ODM][orm] implementation. Given a minimum amout of\n * meta information about a resource, a Mapper can perform generic CRUD\n * operations against that resource. Apart from its configuration, a Mapper is\n * stateless. The particulars of various persistence layers have been abstracted\n * into adapters, which a Mapper uses to perform its operations.\n *\n * The term \"Mapper\" comes from the [Data Mapper Pattern][pattern] described in\n * Martin Fowler's [Patterns of Enterprise Application Architecture][book]. A\n * Data Mapper moves data between [in-memory object instances][record] and a\n * relational or document-based database. JSData's Mapper can work with any\n * persistence layer you can write an adapter for.\n *\n * _(\"Model\" is a heavily overloaded term and is avoided in this documentation\n * to prevent confusion.)_\n *\n * [orm]: https://en.wikipedia.org/wiki/Object-relational_mapping\n *\n * @example\n * [pattern]: https://en.wikipedia.org/wiki/Data_mapper_pattern\n * [book]: http://martinfowler.com/books/eaa.html\n * [record]: Record.html\n * // Import and instantiate\n * import { Mapper } from 'js-data';\n * const UserMapper = new Mapper({ name: 'user' });\n *\n * @example\n * // Define a Mapper using the Container component\n * import { Container } from 'js-data';\n * const store = new Container();\n * store.defineMapper('user');\n *\n * @class Mapper\n * @extends Component\n * @param {object} opts Configuration options.\n * @param {boolean} [opts.applySchema=true] See {@link Mapper#applySchema}.\n * @param {boolean} [opts.debug=false] See {@link Component#debug}.\n * @param {string} [opts.defaultAdapter=http] See {@link Mapper#defaultAdapter}.\n * @param {string} [opts.idAttribute=id] See {@link Mapper#idAttribute}.\n * @param {object} [opts.methods] See {@link Mapper#methods}.\n * @param {string} opts.name See {@link Mapper#name}.\n * @param {boolean} [opts.notify] See {@link Mapper#notify}.\n * @param {boolean} [opts.raw=false] See {@link Mapper#raw}.\n * @param {Function|boolean} [opts.recordClass] See {@link Mapper#recordClass}.\n * @param {Object|Schema} [opts.schema] See {@link Mapper#schema}.\n * @returns {Mapper} A new {@link Mapper} instance.\n * @see http://www.js-data.io/v3.0/docs/components-of-jsdata#mapper\n * @since 3.0.0\n * @tutorial [\"http://www.js-data.io/v3.0/docs/components-of-jsdata#mapper\",\"Components of JSData: Mapper\"]\n * @tutorial [\"http://www.js-data.io/v3.0/docs/modeling-your-data\",\"Modeling your data\"]\n */\nexport default class Mapper extends Component {\n  constructor (opts = {}) {\n    super()\n\n    // Prepare certain properties to be non-enumerable\n    Object.defineProperties(this, {\n      _adapters: {\n        value: undefined,\n        writable: true\n      },\n\n      /**\n       * The {@link Container} that holds this Mapper. __Do not modify.__\n       *\n       * @name Mapper#lifecycleMethods\n       * @since 3.0.0\n       * @type {Object}\n       */\n      datastore: {\n        value: undefined,\n        writable: true\n      },\n\n      /**\n       * The meta information describing this Mapper's available lifecycle\n       * methods. __Do not modify.__\n       *\n       * @name Mapper#lifecycleMethods\n       * @since 3.0.0\n       * @type {Object}\n       */\n      lifecycleMethods: {\n        value: LIFECYCLE_METHODS\n      },\n\n      /**\n       * Set to `false` to force the Mapper to work with POJO objects only.\n       *\n       * @example\n       * // Use POJOs only.\n       * import { Mapper, Record } from 'js-data';\n       * const UserMapper = new Mapper({ recordClass: false });\n       * UserMapper.recordClass // false;\n       * const user = UserMapper.createRecord();\n       * user instanceof Record; // false\n       *\n       * @example\n       * // Set to a custom class to have records wrapped in your custom class.\n       * import { Mapper, Record } from 'js-data';\n       *  // Custom class\n       * class User {\n       *   constructor (props = {}) {\n       *     for (var key in props) {\n       *       if (props.hasOwnProperty(key)) {\n       *         this[key] = props[key];\n       *       }\n       *     }\n       *   }\n       * }\n       * const UserMapper = new Mapper({ recordClass: User });\n       * UserMapper.recordClass; // function User() {}\n       * const user = UserMapper.createRecord();\n       * user instanceof Record; // false\n       * user instanceof User; // true\n       *\n       *\n       * @example\n       * // Extend the {@link Record} class.\n       * import { Mapper, Record } from 'js-data';\n       *  // Custom class\n       * class User extends Record {\n       *   constructor () {\n       *     super(props);\n       *   }\n       * }\n       * const UserMapper = new Mapper({ recordClass: User });\n       * UserMapper.recordClass; // function User() {}\n       * const user = UserMapper.createRecord();\n       * user instanceof Record; // true\n       * user instanceof User; // true\n       *\n       * @name Mapper#recordClass\n       * @default {@link Record}\n       * @see Record\n       * @since 3.0.0\n       */\n      recordClass: {\n        value: undefined,\n        writable: true\n      },\n\n      /**\n       * This Mapper's {@link Schema}.\n       *\n       * @example <caption>Mapper#schema</caption>\n       * const JSData = require('js-data');\n       * const { Mapper } = JSData;\n       * console.log('Using JSData v' + JSData.version.full);\n       *\n       * const UserMapper = new Mapper({\n       *   name: 'user',\n       *   schema: {\n       *     properties: {\n       *       id: { type: 'number' },\n       *       first: { type: 'string', track: true },\n       *       last: { type: 'string', track: true },\n       *       role: { type: 'string', track: true, required: true },\n       *       age: { type: 'integer', track: true },\n       *       is_active: { type: 'number' }\n       *     }\n       *   }\n       * });\n       * const user = UserMapper.createRecord({\n       *   id: 1,\n       *   name: 'John',\n       *   role: 'admin'\n       * });\n       * user.on('change', function (user, changes) {\n       *   console.log(changes);\n       * });\n       * user.on('change:role', function (user, value) {\n       *   console.log('change:role - ' + value);\n       * });\n       * user.role = 'owner';\n       *\n       * @name Mapper#schema\n       * @see Schema\n       * @since 3.0.0\n       * @type {Schema}\n       */\n      schema: {\n        value: undefined,\n        writable: true\n      }\n    })\n\n    // Apply user-provided configuration\n    utils.fillIn(this, opts)\n    // Fill in any missing options with the defaults\n    utils.fillIn(this, utils.copy(MAPPER_DEFAULTS))\n\n    /**\n     * The name for this Mapper. This is the minimum amount of meta information\n     * required for a Mapper to be able to execute CRUD operations for a\n     * Resource.\n     *\n     * @name Mapper#name\n     * @since 3.0.0\n     * @type {string}\n     */\n    if (!this.name) {\n      throw utils.err(`new ${DOMAIN}`, 'opts.name')(400, 'string', this.name)\n    }\n\n    // Setup schema, with an empty default schema if necessary\n    if (this.schema) {\n      this.schema.type || (this.schema.type = 'object')\n      if (!(this.schema instanceof Schema)) {\n        this.schema = new Schema(this.schema || { type: 'object' })\n      }\n    }\n\n    // Create a subclass of Record that's tied to this Mapper\n    if (this.recordClass === undefined) {\n      this.recordClass = class TiedRecord extends Record {}\n    }\n\n    if (this.recordClass) {\n      this.recordClass.mapper = this\n\n      /**\n       * Functions that should be added to the prototype of {@link Mapper#recordClass}.\n       *\n       * @name Mapper#methods\n       * @since 3.0.0\n       * @type {Object}\n       */\n      if (utils.isObject(this.methods)) {\n        utils.addHiddenPropsToTarget(this.recordClass.prototype, this.methods)\n      }\n\n      // We can only apply the schema to the prototype of this.recordClass if the\n      // class extends Record\n      if (Object.isPrototypeOf.call(Record, this.recordClass) && this.schema && this.schema.apply && this.applySchema) {\n        this.schema.apply(this.recordClass.prototype)\n      }\n    }\n  }\n\n  /**\n   * Mapper lifecycle hook called by {@link Mapper#count}. If this method\n   * returns a promise then {@link Mapper#count} will wait for the promise\n   * to resolve before continuing.\n   *\n   * @method Mapper#afterCount\n   * @param {object} query The `query` argument passed to {@link Mapper#count}.\n   * @param {object} opts The `opts` argument passed to {@link Mapper#count}.\n   * @param {*} result The result, if any.\n   * @since 3.0.0\n   */\n  afterCount = notify2\n\n  /**\n   * Mapper lifecycle hook called by {@link Mapper#create}. If this method\n   * returns a promise then {@link Mapper#create} will wait for the promise\n   * to resolve before continuing.\n   *\n   * @method Mapper#afterCreate\n   * @param {object} props The `props` argument passed to {@link Mapper#create}.\n   * @param {object} opts The `opts` argument passed to {@link Mapper#create}.\n   * @param {*} result The result, if any.\n   * @since 3.0.0\n   */\n  afterCreate = notify2\n\n  /**\n   * Mapper lifecycle hook called by {@link Mapper#createMany}. If this method\n   * returns a promise then {@link Mapper#createMany} will wait for the promise\n   * to resolve before continuing.\n   *\n   * @method Mapper#afterCreateMany\n   * @param {array} records The `records` argument passed to {@link Mapper#createMany}.\n   * @param {object} opts The `opts` argument passed to {@link Mapper#createMany}.\n   * @param {*} result The result, if any.\n   * @since 3.0.0\n   */\n  afterCreateMany = notify2\n\n  /**\n   * Mapper lifecycle hook called by {@link Mapper#destroy}. If this method\n   * returns a promise then {@link Mapper#destroy} will wait for the promise\n   * to resolve before continuing.\n   *\n   * @method Mapper#afterDestroy\n   * @param {(string|number)} id The `id` argument passed to {@link Mapper#destroy}.\n   * @param {object} opts The `opts` argument passed to {@link Mapper#destroy}.\n   * @param {*} result The result, if any.\n   * @since 3.0.0\n   */\n  afterDestroy = notify2\n\n  /**\n   * Mapper lifecycle hook called by {@link Mapper#destroyAll}. If this method\n   * returns a promise then {@link Mapper#destroyAll} will wait for the promise\n   * to resolve before continuing.\n   *\n   * @method Mapper#afterDestroyAll\n   * @param {*} data The `data` returned by the adapter.\n   * @param {query} query The `query` argument passed to {@link Mapper#destroyAll}.\n   * @param {object} opts The `opts` argument passed to {@link Mapper#destroyAll}.\n   * @param {*} result The result, if any.\n   * @since 3.0.0\n   */\n  afterDestroyAll = notify2\n\n  /**\n   * Mapper lifecycle hook called by {@link Mapper#find}. If this method\n   * returns a promise then {@link Mapper#find} will wait for the promise\n   * to resolve before continuing.\n   *\n   * @method Mapper#afterFind\n   * @param {(string|number)} id The `id` argument passed to {@link Mapper#find}.\n   * @param {object} opts The `opts` argument passed to {@link Mapper#find}.\n   * @param {*} result The result, if any.\n   * @since 3.0.0\n   */\n  afterFind = notify2\n\n  /**\n   * Mapper lifecycle hook called by {@link Mapper#findAll}. If this method\n   * returns a promise then {@link Mapper#findAll} will wait for the promise\n   * to resolve before continuing.\n   *\n   * @method Mapper#afterFindAll\n   * @param {object} query The `query` argument passed to {@link Mapper#findAll}.\n   * @param {object} opts The `opts` argument passed to {@link Mapper#findAll}.\n   * @param {*} result The result, if any.\n   * @since 3.0.0\n   */\n  afterFindAll = notify2\n\n  /**\n   * Mapper lifecycle hook called by {@link Mapper#sum}. If this method\n   * returns a promise then {@link Mapper#sum} will wait for the promise\n   * to resolve before continuing.\n   *\n   * @method Mapper#afterSum\n   * @param {object} query The `query` argument passed to {@link Mapper#sum}.\n   * @param {object} opts The `opts` argument passed to {@link Mapper#sum}.\n   * @param {*} result The result, if any.\n   * @since 3.0.0\n   */\n  afterSum = notify2\n\n  /**\n   * Mapper lifecycle hook called by {@link Mapper#update}. If this method\n   * returns a promise then {@link Mapper#update} will wait for the promise\n   * to resolve before continuing.\n   *\n   * @method Mapper#afterUpdate\n   * @param {(string|number)} id The `id` argument passed to {@link Mapper#update}.\n   * @param {props} props The `props` argument passed to {@link Mapper#update}.\n   * @param {object} opts The `opts` argument passed to {@link Mapper#update}.\n   * @param {*} result The result, if any.\n   * @since 3.0.0\n   */\n  afterUpdate = notify2\n\n  /**\n   * Mapper lifecycle hook called by {@link Mapper#updateAll}. If this method\n   * returns a promise then {@link Mapper#updateAll} will wait for the promise\n   * to resolve before continuing.\n   *\n   * @method Mapper#afterUpdateAll\n   * @param {object} props The `props` argument passed to {@link Mapper#updateAll}.\n   * @param {object} query The `query` argument passed to {@link Mapper#updateAll}.\n   * @param {object} opts The `opts` argument passed to {@link Mapper#updateAll}.\n   * @param {*} result The result, if any.\n   * @since 3.0.0\n   */\n  afterUpdateAll = notify2\n\n  /**\n   * Mapper lifecycle hook called by {@link Mapper#updateMany}. If this method\n   * returns a promise then {@link Mapper#updateMany} will wait for the promise\n   * to resolve before continuing.\n   *\n   * @method Mapper#afterUpdateMany\n   * @param {array} records The `records` argument passed to {@link Mapper#updateMany}.\n   * @param {object} opts The `opts` argument passed to {@link Mapper#updateMany}.\n   * @param {*} result The result, if any.\n   * @since 3.0.0\n   */\n  afterUpdateMany = notify2\n\n  /**\n   * Mapper lifecycle hook called by {@link Mapper#create}. If this method\n   * returns a promise then {@link Mapper#create} will wait for the promise\n   * to resolve before continuing.\n   *\n   * @method Mapper#beforeCreate\n   * @param {object} props The `props` argument passed to {@link Mapper#create}.\n   * @param {object} opts The `opts` argument passed to {@link Mapper#create}.\n   * @since 3.0.0\n   */\n  beforeCreate = notify\n\n  /**\n   * Mapper lifecycle hook called by {@link Mapper#createMany}. If this method\n   * returns a promise then {@link Mapper#createMany} will wait for the promise\n   * to resolve before continuing.\n   *\n   * @method Mapper#beforeCreateMany\n   * @param {array} records The `records` argument passed to {@link Mapper#createMany}.\n   * @param {object} opts The `opts` argument passed to {@link Mapper#createMany}.\n   * @since 3.0.0\n   */\n  beforeCreateMany = notify\n\n  /**\n   * Mapper lifecycle hook called by {@link Mapper#count}. If this method\n   * returns a promise then {@link Mapper#count} will wait for the promise\n   * to resolve before continuing.\n   *\n   * @method Mapper#beforeCount\n   * @param {object} query The `query` argument passed to {@link Mapper#count}.\n   * @param {object} opts The `opts` argument passed to {@link Mapper#count}.\n   * @since 3.0.0\n   */\n  beforeCount = notify\n\n  /**\n   * Mapper lifecycle hook called by {@link Mapper#destroy}. If this method\n   * returns a promise then {@link Mapper#destroy} will wait for the promise\n   * to resolve before continuing.\n   *\n   * @method Mapper#beforeDestroy\n   * @param {(string|number)} id The `id` argument passed to {@link Mapper#destroy}.\n   * @param {object} opts The `opts` argument passed to {@link Mapper#destroy}.\n   * @since 3.0.0\n   */\n  beforeDestroy = notify\n\n  /**\n   * Mapper lifecycle hook called by {@link Mapper#destroyAll}. If this method\n   * returns a promise then {@link Mapper#destroyAll} will wait for the promise\n   * to resolve before continuing.\n   *\n   * @method Mapper#beforeDestroyAll\n   * @param {query} query The `query` argument passed to {@link Mapper#destroyAll}.\n   * @param {object} opts The `opts` argument passed to {@link Mapper#destroyAll}.\n   * @since 3.0.0\n   */\n  beforeDestroyAll = notify\n\n  /**\n   * Mappers lifecycle hook called by {@link Mapper#find}. If this method\n   * returns a promise then {@link Mapper#find} will wait for the promise\n   * to resolve before continuing.\n   *\n   * @method Mapper#beforeFind\n   * @param {(string|number)} id The `id` argument passed to {@link Mapper#find}.\n   * @param {object} opts The `opts` argument passed to {@link Mapper#find}.\n   * @since 3.0.0\n   */\n  beforeFind = notify\n\n  /**\n   * Mapper lifecycle hook called by {@link Mapper#findAll}. If this method\n   * returns a promise then {@link Mapper#findAll} will wait for the promise\n   * to resolve before continuing.\n   *\n   * @method Mapper#beforeFindAll\n   * @param {object} query The `query` argument passed to {@link Mapper#findAll}.\n   * @param {object} opts The `opts` argument passed to {@link Mapper#findAll}.\n   * @since 3.0.0\n   */\n  beforeFindAll = notify\n\n  /**\n   * Mapper lifecycle hook called by {@link Mapper#sum}. If this method\n   * returns a promise then {@link Mapper#sum} will wait for the promise\n   * to resolve before continuing.\n   *\n   * @method Mapper#beforeSum\n   * @param {string} field The `field` argument passed to {@link Mapper#sum}.\n   * @param {object} query The `query` argument passed to {@link Mapper#sum}.\n   * @param {object} opts The `opts` argument passed to {@link Mapper#sum}.\n   * @since 3.0.0\n   */\n  beforeSum = notify\n\n  /**\n   * Mapper lifecycle hook called by {@link Mapper#update}. If this method\n   * returns a promise then {@link Mapper#update} will wait for the promise\n   * to resolve before continuing.\n   *\n   * @method Mapper#beforeUpdate\n   * @param {(string|number)} id The `id` argument passed to {@link Mapper#update}.\n   * @param {props} props The `props` argument passed to {@link Mapper#update}.\n   * @param {object} opts The `opts` argument passed to {@link Mapper#update}.\n   * @since 3.0.0\n   */\n  beforeUpdate = notify\n\n  /**\n   * Mapper lifecycle hook called by {@link Mapper#updateAll}. If this method\n   * returns a promise then {@link Mapper#updateAll} will wait for the promise\n   * to resolve before continuing.\n   *\n   * @method Mapper#beforeUpdateAll\n   * @param {object} props The `props` argument passed to {@link Mapper#updateAll}.\n   * @param {object} query The `query` argument passed to {@link Mapper#updateAll}.\n   * @param {object} opts The `opts` argument passed to {@link Mapper#updateAll}.\n   * @since 3.0.0\n   */\n  beforeUpdateAll = notify\n\n  /**\n   * Mapper lifecycle hook called by {@link Mapper#updateMany}. If this method\n   * returns a promise then {@link Mapper#updateMany} will wait for the promise\n   * to resolve before continuing.\n   *\n   * @method Mapper#beforeUpdateMany\n   * @param {array} records The `records` argument passed to {@link Mapper#updateMany}.\n   * @param {object} opts The `opts` argument passed to {@link Mapper#updateMany}.\n   * @since 3.0.0\n   */\n  beforeUpdateMany = notify\n\n  /**\n   * This method is called at the end of most lifecycle methods. It does the\n   * following:\n   *\n   * 1. If `opts.raw` is `true`, add this Mapper's configuration to the `opts`\n   * argument as metadata for the operation.\n   * 2. Wrap the result data appropriately using {@link Mapper#wrap}, which\n   * calls {@link Mapper#createRecord}.\n   *\n   * @method Mapper#_end\n   * @private\n   * @since 3.0.0\n   */\n  _end (result, opts, skip) {\n    if (opts.raw) {\n      utils._(result, opts)\n    }\n    if (skip) {\n      return result\n    }\n    let _data = opts.raw ? result.data : result\n    if (_data && utils.isFunction(this.wrap)) {\n      _data = this.wrap(_data, opts)\n      if (opts.raw) {\n        result.data = _data\n      } else {\n        result = _data\n      }\n    }\n    return result\n  }\n\n  /**\n   * Define a belongsTo relationship. Only useful if you're managing your\n   * Mappers manually and not using a Container or DataStore component.\n   *\n   * @example\n   * PostMapper.belongsTo(UserMapper, {\n   *   // post.user_id points to user.id\n   *   foreignKey: 'user_id'\n   *   // user records will be attached to post records at \"post.user\"\n   *   localField: 'user'\n   * });\n   *\n   * CommentMapper.belongsTo(UserMapper, {\n   *   // comment.user_id points to user.id\n   *   foreignKey: 'user_id'\n   *   // user records will be attached to comment records at \"comment.user\"\n   *   localField: 'user'\n   * });\n   * CommentMapper.belongsTo(PostMapper, {\n   *   // comment.post_id points to post.id\n   *   foreignKey: 'post_id'\n   *   // post records will be attached to comment records at \"comment.post\"\n   *   localField: 'post'\n   * });\n   *\n   * @method Mapper#belongsTo\n   * @see http://www.js-data.io/v3.0/docs/relations\n   * @since 3.0.0\n   */\n  belongsTo (relatedMapper, opts) {\n    return belongsTo(relatedMapper, opts)(this)\n  }\n\n  /**\n   * Select records according to the `query` argument and return the count.\n   *\n   * {@link Mapper#beforeCount} will be called before calling the adapter.\n   * {@link Mapper#afterCount} will be called after calling the adapter.\n   *\n   * @example\n   * // Get the number of published blog posts\n   * PostMapper.count({ status: 'published' }).then((numPublished) => {\n   *   console.log(numPublished); // e.g. 45\n   * });\n   *\n   * @method Mapper#count\n   * @param {object} [query={}] Selection query. See {@link query}.\n   * @param {object} [query.where] See {@link query.where}.\n   * @param {number} [query.offset] See {@link query.offset}.\n   * @param {number} [query.limit] See {@link query.limit}.\n   * @param {string|Array[]} [query.orderBy] See {@link query.orderBy}.\n   * @param {object} [opts] Configuration options. Refer to the `count` method\n   * of whatever adapter you're using for more configuration options.\n   * @param {boolean} [opts.adapter={@link Mapper#defaultAdapter}] Name of the\n   * adapter to use.\n   * @param {boolean} [opts.notify={@link Mapper#notify}] See {@link Mapper#notify}.\n   * @param {boolean} [opts.raw={@link Mapper#raw}] See {@link Mapper#raw}.\n   * @returns {Promise} Resolves with the count of the selected records.\n   * @since 3.0.0\n   */\n  count (query, opts) {\n    return this.crud('count', query, opts)\n  }\n\n  /**\n   * Fired during {@link Mapper#create}. See\n   * {@link Mapper~beforeCreateListener} for how to listen for this event.\n   *\n   * @event Mapper#beforeCreate\n   * @see Mapper~beforeCreateListener\n   * @see Mapper#create\n   */\n  /**\n   * Callback signature for the {@link Mapper#event:beforeCreate} event.\n   *\n   * @example\n   * function onBeforeCreate (props, opts) {\n   *   // do something\n   * }\n   * store.on('beforeCreate', onBeforeCreate);\n   *\n   * @callback Mapper~beforeCreateListener\n   * @param {object} props The `props` argument passed to {@link Mapper#beforeCreate}.\n   * @param {object} opts The `opts` argument passed to {@link Mapper#beforeCreate}.\n   * @see Mapper#event:beforeCreate\n   * @see Mapper#create\n   * @since 3.0.0\n   */\n  /**\n   * Fired during {@link Mapper#create}. See\n   * {@link Mapper~afterCreateListener} for how to listen for this event.\n   *\n   * @event Mapper#afterCreate\n   * @see Mapper~afterCreateListener\n   * @see Mapper#create\n   */\n  /**\n   * Callback signature for the {@link Mapper#event:afterCreate} event.\n   *\n   * @example\n   * function onAfterCreate (props, opts, result) {\n   *   // do something\n   * }\n   * store.on('afterCreate', onAfterCreate);\n   *\n   * @callback Mapper~afterCreateListener\n   * @param {object} props The `props` argument passed to {@link Mapper#afterCreate}.\n   * @param {object} opts The `opts` argument passed to {@link Mapper#afterCreate}.\n   * @param {object} result The `result` argument passed to {@link Mapper#afterCreate}.\n   * @see Mapper#event:afterCreate\n   * @see Mapper#create\n   * @since 3.0.0\n   */\n  /**\n   * Create and save a new the record using the provided `props`.\n   *\n   * {@link Mapper#beforeCreate} will be called before calling the adapter.\n   * {@link Mapper#afterCreate} will be called after calling the adapter.\n   *\n   * @example\n   * // Create and save a new blog post\n   * PostMapper.create({\n   *   title: 'Modeling your data',\n   *   status: 'draft'\n   * }).then((post) => {\n   *   console.log(post); // { id: 1234, status: 'draft', ... }\n   * });\n   *\n   * @fires Mapper#beforeCreate\n   * @fires Mapper#afterCreate\n   * @method Mapper#create\n   * @param {object} props The properties for the new record.\n   * @param {object} [opts] Configuration options. Refer to the `create` method\n   * of whatever adapter you're using for more configuration options.\n   * @param {boolean} [opts.adapter={@link Mapper#defaultAdapter}] Name of the\n   * adapter to use.\n   * @param {boolean} [opts.noValidate={@link Mapper#noValidate}] See {@link Mapper#noValidate}.\n   * @param {boolean} [opts.notify={@link Mapper#notify}] See {@link Mapper#notify}.\n   * @param {boolean} [opts.raw={@link Mapper#raw}] See {@link Mapper#raw}.\n   * @param {string[]} [opts.with=[]] Relations to create in a cascading\n   * create if `props` contains nested relations. NOT performed in a\n   * transaction. Each nested create will result in another {@link Mapper#create}\n   * or {@link Mapper#createMany} call.\n   * @param {string[]} [opts.pass=[]] Relations to send to the adapter as part\n   * of the payload. Normally relations are not sent.\n   * @returns {Promise} Resolves with the created record.\n   * @since 3.0.0\n   */\n  create (props = {}, opts = {}) {\n    const originalRecord = props\n    let parentRelationMap = {}\n    let adapterResponse = {}\n\n    // Fill in \"opts\" with the Mapper's configuration\n    utils._(opts, this)\n    opts.adapter = this.getAdapterName(opts)\n\n    opts.op = 'beforeCreate'\n    return this._runHook(opts.op, props, opts).then((props) => {\n      opts.with || (opts.with = [])\n      return this._createParentRecordIfRequired(props, opts)\n    }).then((relationMap) => {\n      parentRelationMap = relationMap\n    }).then(() => {\n      opts.op = 'create'\n      return this._invokeAdapterMethod(opts.op, props, opts)\n    }).then((result) => {\n      adapterResponse = result\n    }).then(() => {\n      const createdProps = opts.raw ? adapterResponse.data : adapterResponse\n\n      return this._createOrAssignChildRecordIfRequired(createdProps, {\n        opts,\n        parentRelationMap,\n        originalProps: props\n      })\n    }).then((createdProps) => {\n      return this._commitChanges(originalRecord, createdProps)\n    }).then((record) => {\n      if (opts.raw) {\n        adapterResponse.data = record\n      } else {\n        adapterResponse = record\n      }\n      const result = this._end(adapterResponse, opts)\n      opts.op = 'afterCreate'\n      return this._runHook(opts.op, props, opts, result)\n    })\n  }\n\n  _commitChanges (recordOrRecords, newValues) {\n    if (utils.isArray(recordOrRecords)) {\n      return recordOrRecords.map((record, i) => this._commitChanges(record, newValues[i]))\n    }\n\n    utils.set(recordOrRecords, newValues, { silent: true })\n\n    if (utils.isFunction(recordOrRecords.commit)) {\n      recordOrRecords.commit()\n    }\n\n    return recordOrRecords\n  }\n\n  /**\n   * Use {@link Mapper#createRecord} instead.\n   * @deprecated\n   * @method Mapper#createInstance\n   * @param {Object|Array} props See {@link Mapper#createRecord}.\n   * @param {object} [opts] See {@link Mapper#createRecord}.\n   * @returns {Object|Array} See {@link Mapper#createRecord}.\n   * @see Mapper#createRecord\n   * @since 3.0.0\n   */\n  createInstance (props, opts) {\n    return this.createRecord(props, opts)\n  }\n\n  /**\n   * Creates parent record for relation types like BelongsTo or HasMany with localKeys\n   * in order to satisfy foreignKey dependency (so called child records).\n   * @param {object} props See {@link Mapper#create}.\n   * @param {object} opts See {@link Mapper#create}.\n   * @returns {Object} cached parent records map\n   * @see Mapper#create\n   * @since 3.0.0\n   */\n  _createParentRecordIfRequired (props, opts) {\n    const tasks = []\n    const relations = []\n\n    utils.forEachRelation(this, opts, (def, optsCopy) => {\n      if (!def.isRequiresParentId() || !def.getLocalField(props)) {\n        return\n      }\n\n      optsCopy.raw = false\n      relations.push(def)\n      tasks.push(def.createParentRecord(props, optsCopy))\n    })\n\n    return utils.Promise.all(tasks).then(records => {\n      return relations.reduce((map, relation, index) => {\n        relation.setLocalField(map, records[index])\n        return map\n      }, {})\n    })\n  }\n\n  /**\n   * Creates child record for relation types like HasOne or HasMany with foreignKey\n   * in order to satisfy foreignKey dependency (so called parent records).\n   * @param {object} props See {@link Mapper#create}.\n   * @param {object} context contains collected information.\n   * @param {object} context.opts See {@link Mapper#create}.\n   * @param {object} context.parentRelationMap contains parent records map\n   * @param {object} context.originalProps contains data passed into {@link Mapper#create} method\n   * @return {Promise} updated props\n   * @see Mapper#create\n   * @since 3.0.0\n   */\n  _createOrAssignChildRecordIfRequired (props, context) {\n    const tasks = []\n\n    utils.forEachRelation(this, context.opts, (def, optsCopy) => {\n      const relationData = def.getLocalField(context.originalProps)\n\n      if (!relationData) {\n        return\n      }\n\n      optsCopy.raw = false\n      // Create hasMany and hasOne after the main create because we needed\n      // a generated id to attach to these items\n      if (def.isRequiresChildId()) {\n        tasks.push(def.createChildRecord(props, relationData, optsCopy))\n      } else if (def.isRequiresParentId()) {\n        const parent = def.getLocalField(context.parentRelationMap)\n\n        if (parent) {\n          def.setLocalField(props, parent)\n        }\n      }\n    })\n\n    return utils.Promise.all(tasks)\n      .then(() => props)\n  }\n\n  /**\n   * Fired during {@link Mapper#createMany}. See\n   * {@link Mapper~beforeCreateManyListener} for how to listen for this event.\n   *\n   * @event Mapper#beforeCreateMany\n   * @see Mapper~beforeCreateManyListener\n   * @see Mapper#createMany\n   */\n  /**\n   * Callback signature for the {@link Mapper#event:beforeCreateMany} event.\n   *\n   * @example\n   * function onBeforeCreateMany (records, opts) {\n   *   // do something\n   * }\n   * store.on('beforeCreateMany', onBeforeCreateMany);\n   *\n   * @callback Mapper~beforeCreateManyListener\n   * @param {object} records The `records` argument received by {@link Mapper#beforeCreateMany}.\n   * @param {object} opts The `opts` argument received by {@link Mapper#beforeCreateMany}.\n   * @see Mapper#event:beforeCreateMany\n   * @see Mapper#createMany\n   * @since 3.0.0\n   */\n  /**\n   * Fired during {@link Mapper#createMany}. See\n   * {@link Mapper~afterCreateManyListener} for how to listen for this event.\n   *\n   * @event Mapper#afterCreateMany\n   * @see Mapper~afterCreateManyListener\n   * @see Mapper#createMany\n   */\n  /**\n   * Callback signature for the {@link Mapper#event:afterCreateMany} event.\n   *\n   * @example\n   * function onAfterCreateMany (records, opts, result) {\n   *   // do something\n   * }\n   * store.on('afterCreateMany', onAfterCreateMany);\n   *\n   * @callback Mapper~afterCreateManyListener\n   * @param {object} records The `records` argument received by {@link Mapper#afterCreateMany}.\n   * @param {object} opts The `opts` argument received by {@link Mapper#afterCreateMany}.\n   * @param {object} result The `result` argument received by {@link Mapper#afterCreateMany}.\n   * @see Mapper#event:afterCreateMany\n   * @see Mapper#createMany\n   * @since 3.0.0\n   */\n  /**\n   * Given an array of records, batch create them via an adapter.\n   *\n   * {@link Mapper#beforeCreateMany} will be called before calling the adapter.\n   * {@link Mapper#afterCreateMany} will be called after calling the adapter.\n   *\n   * @example\n   * // Create and save several new blog posts\n   * PostMapper.createMany([{\n   *   title: 'Modeling your data',\n   *   status: 'draft'\n   * }, {\n   *   title: 'Reading data',\n   *   status: 'draft'\n   * }]).then((posts) => {\n   *   console.log(posts[0]); // { id: 1234, status: 'draft', ... }\n   *   console.log(posts[1]); // { id: 1235, status: 'draft', ... }\n   * });\n   *\n   * @fires Mapper#beforeCreate\n   * @fires Mapper#afterCreate\n   * @method Mapper#createMany\n   * @param {Record[]} records Array of records to be created in one batch.\n   * @param {object} [opts] Configuration options. Refer to the `createMany`\n   * method of whatever adapter you're using for more configuration options.\n   * @param {boolean} [opts.adapter={@link Mapper#defaultAdapter}] Name of the\n   * adapter to use.\n   * @param {boolean} [opts.noValidate={@link Mapper#noValidate}] See {@link Mapper#noValidate}.\n   * @param {boolean} [opts.notify={@link Mapper#notify}] See {@link Mapper#notify}.\n   * @param {boolean} [opts.raw={@link Mapper#raw}] See {@link Mapper#raw}.\n   * @param {string[]} [opts.with=[]] Relations to create in a cascading\n   * create if `records` contains nested relations. NOT performed in a\n   * transaction. Each nested create will result in another {@link Mapper#createMany}\n   * call.\n   * @param {string[]} [opts.pass=[]] Relations to send to the adapter as part\n   * of the payload. Normally relations are not sent.\n   * @returns {Promise} Resolves with the created records.\n   * @since 3.0.0\n   * @tutorial [\"http://www.js-data.io/v3.0/docs/saving-data\",\"Saving data\"]\n   */\n  createMany (records = [], opts = {}) {\n    const originalRecords = records\n    let adapterResponse\n\n    // Fill in \"opts\" with the Mapper's configuration\n    utils._(opts, this)\n    opts.adapter = this.getAdapterName(opts)\n\n    // beforeCreateMany lifecycle hook\n    opts.op = 'beforeCreateMany'\n    return this._runHook(opts.op, records, opts).then((records) => {\n      // Deep pre-create belongsTo relations\n      const belongsToRelationData = {}\n      opts.with || (opts.with = [])\n      let tasks = []\n      utils.forEachRelation(this, opts, (def, optsCopy) => {\n        const relationData = records\n          .map((record) => def.getLocalField(record))\n          .filter(Boolean)\n        if (def.type === belongsToType && relationData.length === records.length) {\n          // Create belongsTo relation first because we need a generated id to\n          // attach to the child\n          optsCopy.raw = false\n          tasks.push(def.createLinked(relationData, optsCopy).then((relatedRecords) => {\n            records.forEach((record, i) => def.setForeignKey(record, relatedRecords[i]))\n          }).then((relatedRecords) => {\n            def.setLocalField(belongsToRelationData, relatedRecords)\n          }))\n        }\n      })\n      return utils.Promise.all(tasks).then(() => {\n        opts.op = 'createMany'\n        return this._invokeAdapterMethod(opts.op, records, opts)\n      }).then((result) => {\n        adapterResponse = result\n      }).then(() => {\n        const createdRecordsData = opts.raw ? adapterResponse.data : adapterResponse\n\n        // Deep post-create hasOne relations\n        tasks = []\n        utils.forEachRelation(this, opts, (def, optsCopy) => {\n          const relationData = records\n            .map((record) => def.getLocalField(record))\n            .filter(Boolean)\n          if (relationData.length !== records.length) {\n            return\n          }\n\n          optsCopy.raw = false\n          const belongsToData = def.getLocalField(belongsToRelationData)\n          let task\n          // Create hasMany and hasOne after the main create because we needed\n          // a generated id to attach to these items\n          if (def.type === hasManyType) {\n            // Not supported\n            this.log('warn', 'deep createMany of hasMany type not supported!')\n          } else if (def.type === hasOneType) {\n            createdRecordsData.forEach((createdRecordData, i) => {\n              def.setForeignKey(createdRecordData, relationData[i])\n            })\n            task = def.getRelation().createMany(relationData, optsCopy).then((relatedData) => {\n              createdRecordsData.forEach((createdRecordData, i) => {\n                def.setLocalField(createdRecordData, relatedData[i])\n              })\n            })\n          } else if (def.type === belongsToType && belongsToData && belongsToData.length === createdRecordsData.length) {\n            createdRecordsData.forEach((createdRecordData, i) => {\n              def.setLocalField(createdRecordData, belongsToData[i])\n            })\n          }\n          if (task) {\n            tasks.push(task)\n          }\n        })\n        return utils.Promise.all(tasks).then(() => {\n          return this._commitChanges(originalRecords, createdRecordsData)\n        })\n      })\n    }).then((records) => {\n      if (opts.raw) {\n        adapterResponse.data = records\n      } else {\n        adapterResponse = records\n      }\n      const result = this._end(adapterResponse, opts)\n      opts.op = 'afterCreateMany'\n      return this._runHook(opts.op, records, opts, result)\n    })\n  }\n\n  /**\n   * Create an unsaved, uncached instance of this Mapper's\n   * {@link Mapper#recordClass}.\n   *\n   * Returns `props` if `props` is already an instance of\n   * {@link Mapper#recordClass}.\n   *\n   * __Note:__ This method does __not__ interact with any adapter, and does\n   * __not__ save any data. It only creates new objects in memory.\n   *\n   * @example\n   * // Create empty unsaved record instance\n   * const post = PostMapper.createRecord();\n   *\n   * @example\n   * // Create an unsaved record instance with inital properties\n   * const post = PostMapper.createRecord({\n   *   title: 'Modeling your data',\n   *   status: 'draft'\n   * });\n   *\n   * @example\n   * // Create a record instance that corresponds to a saved record\n   * const post = PostMapper.createRecord({\n   *   // JSData thinks this record has been saved if it has a primary key\n   *   id: 1234,\n   *   title: 'Modeling your data',\n   *   status: 'draft'\n   * });\n   *\n   * @example\n   * // Create record instances from an array\n   * const posts = PostMapper.createRecord([{\n   *   title: 'Modeling your data',\n   *   status: 'draft'\n   * }, {\n   *   title: 'Reading data',\n   *   status: 'draft'\n   * }]);\n   *\n   * @example\n   * // Records are validated by default\n   * import { Mapper } from 'js-data';\n   * const PostMapper = new Mapper({\n   *   name: 'post',\n   *   schema: { properties: { title: { type: 'string' } } }\n   * });\n   * try {\n   *   const post = PostMapper.createRecord({\n   *     title: 1234,\n   *   });\n   * } catch (err) {\n   *   console.log(err.errors); // [{ expected: 'one of (string)', actual: 'number', path: 'title' }]\n   * }\n   *\n   * @example\n   * // Skip validation\n   * import { Mapper } from 'js-data';\n   * const PostMapper = new Mapper({\n   *   name: 'post',\n   *   schema: { properties: { title: { type: 'string' } } }\n   * });\n   * const post = PostMapper.createRecord({\n   *   title: 1234,\n   * }, { noValidate: true });\n   * console.log(post.isValid()); // false\n   *\n   * @method Mapper#createRecord\n   * @param {Object|Object[]} props The properties for the Record instance or an\n   * array of property objects for the Record instances.\n   * @param {object} [opts] Configuration options.\n   * @param {boolean} [opts.noValidate={@link Mapper#noValidate}] See {@link Mapper#noValidate}.\n   * @returns {Record|Record[]} The Record instance or Record instances.\n   * @since 3.0.0\n   */\n  createRecord (props, opts) {\n    props || (props = {})\n    if (utils.isArray(props)) {\n      return props.map((_props) => this.createRecord(_props, opts))\n    }\n    if (!utils.isObject(props)) {\n      throw utils.err(`${DOMAIN}#createRecord`, 'props')(400, 'array or object', props)\n    }\n\n    if (this.relationList) {\n      this.relationList.forEach(function (def) {\n        def.ensureLinkedDataHasProperType(props, opts)\n      })\n    }\n    const RecordCtor = this.recordClass\n\n    return (!RecordCtor || props instanceof RecordCtor) ? props : new RecordCtor(props, opts)\n  }\n\n  /**\n   * Lifecycle invocation method. You probably won't call this method directly.\n   *\n   * @method Mapper#crud\n   * @param {string} method Name of the lifecycle method to invoke.\n   * @param {...*} args Arguments to pass to the lifecycle method.\n   * @returns {Promise}\n   * @since 3.0.0\n   */\n  crud (method, ...args) {\n    const config = this.lifecycleMethods[method]\n    if (!config) {\n      throw utils.err(`${DOMAIN}#crud`, method)(404, 'method')\n    }\n\n    const upper = `${method.charAt(0).toUpperCase()}${method.substr(1)}`\n    const before = `before${upper}`\n    const after = `after${upper}`\n\n    let op\n\n    // Default values for arguments\n    config.defaults.forEach((value, i) => {\n      if (args[i] === undefined) {\n        args[i] = utils.copy(value)\n      }\n    })\n\n    const opts = args[args.length - 1]\n\n    // Fill in \"opts\" with the Mapper's configuration\n    utils._(opts, this)\n    const adapter = opts.adapter = this.getAdapterName(opts)\n\n    // before lifecycle hook\n    op = opts.op = before\n    return utils.resolve(this[op](...args)).then((_value) => {\n      if (args[config.beforeAssign] !== undefined) {\n        // Allow for re-assignment from lifecycle hook\n        args[config.beforeAssign] = _value === undefined ? args[config.beforeAssign] : _value\n      }\n      // Now delegate to the adapter\n      op = opts.op = method\n      args = config.adapterArgs ? config.adapterArgs(this, ...args) : args\n      this.dbg(op, ...args)\n      return utils.resolve(this.getAdapter(adapter)[op](this, ...args))\n    }).then((result) => {\n      // force noValidate on find/findAll\n      const noValidate = /find/.test(op) || opts.noValidate\n      const _opts = Object.assign({}, opts, { noValidate })\n\n      result = this._end(result, _opts, !!config.skip)\n      args.push(result)\n      // after lifecycle hook\n      op = opts.op = after\n      return utils.resolve(this[op](...args)).then((_result) => {\n        // Allow for re-assignment from lifecycle hook\n        return _result === undefined ? result : _result\n      })\n    })\n  }\n\n  /**\n   * Fired during {@link Mapper#destroy}. See\n   * {@link Mapper~beforeDestroyListener} for how to listen for this event.\n   *\n   * @event Mapper#beforeDestroy\n   * @see Mapper~beforeDestroyListener\n   * @see Mapper#destroy\n   */\n  /**\n   * Callback signature for the {@link Mapper#event:beforeDestroy} event.\n   *\n   * @example\n   * function onBeforeDestroy (id, opts) {\n   *   // do something\n   * }\n   * store.on('beforeDestroy', onBeforeDestroy);\n   *\n   * @callback Mapper~beforeDestroyListener\n   * @param {string|number} id The `id` argument passed to {@link Mapper#beforeDestroy}.\n   * @param {object} opts The `opts` argument passed to {@link Mapper#beforeDestroy}.\n   * @see Mapper#event:beforeDestroy\n   * @see Mapper#destroy\n   * @since 3.0.0\n   */\n  /**\n   * Fired during {@link Mapper#destroy}. See\n   * {@link Mapper~afterDestroyListener} for how to listen for this event.\n   *\n   * @event Mapper#afterDestroy\n   * @see Mapper~afterDestroyListener\n   * @see Mapper#destroy\n   */\n  /**\n   * Callback signature for the {@link Mapper#event:afterDestroy} event.\n   *\n   * @example\n   * function onAfterDestroy (id, opts, result) {\n   *   // do something\n   * }\n   * store.on('afterDestroy', onAfterDestroy);\n   *\n   * @callback Mapper~afterDestroyListener\n   * @param {string|number} id The `id` argument passed to {@link Mapper#afterDestroy}.\n   * @param {object} opts The `opts` argument passed to {@link Mapper#afterDestroy}.\n   * @param {object} result The `result` argument passed to {@link Mapper#afterDestroy}.\n   * @see Mapper#event:afterDestroy\n   * @see Mapper#destroy\n   * @since 3.0.0\n   */\n  /**\n   * Using an adapter, destroy the record with the given primary key.\n   *\n   * {@link Mapper#beforeDestroy} will be called before destroying the record.\n   * {@link Mapper#afterDestroy} will be called after destroying the record.\n   *\n   * @example\n   * // Destroy a specific blog post\n   * PostMapper.destroy(1234).then(() => {\n   *   // Blog post #1234 has been destroyed\n   * });\n   *\n   * @example\n   * // Get full response\n   * PostMapper.destroy(1234, { raw: true }).then((result) => {\n   *   console.log(result.deleted); e.g. 1\n   *   console.log(...); // etc., more metadata can be found on the result\n   * });\n   *\n   * @fires Mapper#beforeDestroy\n   * @fires Mapper#afterDestroy\n   * @method Mapper#destroy\n   * @param {(string|number)} id The primary key of the record to destroy.\n   * @param {object} [opts] Configuration options. Refer to the `destroy` method\n   * of whatever adapter you're using for more configuration options.\n   * @param {boolean} [opts.adapter={@link Mapper#defaultAdapter}] Name of the\n   * adapter to use.\n   * @param {boolean} [opts.notify={@link Mapper#notify}] See {@link Mapper#notify}.\n   * @param {boolean} [opts.raw={@link Mapper#raw}] See {@link Mapper#raw}.\n   * @returns {Promise} Resolves when the record has been destroyed. Resolves\n   * even if no record was found to be destroyed.\n   * @since 3.0.0\n   * @tutorial [\"http://www.js-data.io/v3.0/docs/saving-data\",\"Saving data\"]\n   */\n  destroy (id, opts) {\n    return this.crud('destroy', id, opts)\n  }\n\n  /**\n   * Fired during {@link Mapper#destroyAll}. See\n   * {@link Mapper~beforeDestroyAllListener} for how to listen for this event.\n   *\n   * @event Mapper#beforeDestroyAll\n   * @see Mapper~beforeDestroyAllListener\n   * @see Mapper#destroyAll\n   */\n  /**\n   * Callback signature for the {@link Mapper#event:beforeDestroyAll} event.\n   *\n   * @example\n   * function onBeforeDestroyAll (query, opts) {\n   *   // do something\n   * }\n   * store.on('beforeDestroyAll', onBeforeDestroyAll);\n   *\n   * @callback Mapper~beforeDestroyAllListener\n   * @param {object} query The `query` argument passed to {@link Mapper#beforeDestroyAll}.\n   * @param {object} opts The `opts` argument passed to {@link Mapper#beforeDestroyAll}.\n   * @see Mapper#event:beforeDestroyAll\n   * @see Mapper#destroyAll\n   * @since 3.0.0\n   */\n  /**\n   * Fired during {@link Mapper#destroyAll}. See\n   * {@link Mapper~afterDestroyAllListener} for how to listen for this event.\n   *\n   * @event Mapper#afterDestroyAll\n   * @see Mapper~afterDestroyAllListener\n   * @see Mapper#destroyAll\n   */\n  /**\n   * Callback signature for the {@link Mapper#event:afterDestroyAll} event.\n   *\n   * @example\n   * function onAfterDestroyAll (query, opts, result) {\n   *   // do something\n   * }\n   * store.on('afterDestroyAll', onAfterDestroyAll);\n   *\n   * @callback Mapper~afterDestroyAllListener\n   * @param {object} query The `query` argument passed to {@link Mapper#afterDestroyAll}.\n   * @param {object} opts The `opts` argument passed to {@link Mapper#afterDestroyAll}.\n   * @param {object} result The `result` argument passed to {@link Mapper#afterDestroyAll}.\n   * @see Mapper#event:afterDestroyAll\n   * @see Mapper#destroyAll\n   * @since 3.0.0\n   */\n  /**\n   * Destroy the records selected by `query` via an adapter. If no `query` is\n   * provided then all records will be destroyed.\n   *\n   * {@link Mapper#beforeDestroyAll} will be called before destroying the records.\n   * {@link Mapper#afterDestroyAll} will be called after destroying the records.\n   *\n   * @example\n   * // Destroy all blog posts\n   * PostMapper.destroyAll().then(() => {\n   *   // All blog posts have been destroyed\n   * });\n   *\n   * @example\n   * // Destroy all \"draft\" blog posts\n   * PostMapper.destroyAll({ status: 'draft' }).then(() => {\n   *   // All \"draft\" blog posts have been destroyed\n   * });\n   *\n   * @example\n   * // Get full response\n   * const query = null;\n   * const options = { raw: true };\n   * PostMapper.destroyAll(query, options).then((result) => {\n   *   console.log(result.deleted); e.g. 14\n   *   console.log(...); // etc., more metadata can be found on the result\n   * });\n   *\n   * @fires Mapper#beforeDestroyAll\n   * @fires Mapper#afterDestroyAll\n   * @method Mapper#destroyAll\n   * @param {object} [query={}] Selection query. See {@link query}.\n   * @param {object} [query.where] See {@link query.where}.\n   * @param {number} [query.offset] See {@link query.offset}.\n   * @param {number} [query.limit] See {@link query.limit}.\n   * @param {string|Array[]} [query.orderBy] See {@link query.orderBy}.\n   * @param {object} [opts] Configuration options. Refer to the `destroyAll`\n   * method of whatever adapter you're using for more configuration options.\n   * @param {boolean} [opts.adapter={@link Mapper#defaultAdapter}] Name of the\n   * adapter to use.\n   * @param {boolean} [opts.notify={@link Mapper#notify}] See {@link Mapper#notify}.\n   * @param {boolean} [opts.raw={@link Mapper#raw}] See {@link Mapper#raw}.\n   * @returns {Promise} Resolves when the records have been destroyed. Resolves\n   * even if no records were found to be destroyed.\n   * @see query\n   * @since 3.0.0\n   * @tutorial [\"http://www.js-data.io/v3.0/docs/saving-data\",\"Saving data\"]\n   */\n  destroyAll (query, opts) {\n    return this.crud('destroyAll', query, opts)\n  }\n\n  /**\n   * Fired during {@link Mapper#find}. See\n   * {@link Mapper~beforeFindListener} for how to listen for this event.\n   *\n   * @event Mapper#beforeFind\n   * @see Mapper~beforeFindListener\n   * @see Mapper#find\n   */\n  /**\n   * Callback signature for the {@link Mapper#event:beforeFind} event.\n   *\n   * @example\n   * function onBeforeFind (id, opts) {\n   *   // do something\n   * }\n   * store.on('beforeFind', onBeforeFind);\n   *\n   * @callback Mapper~beforeFindListener\n   * @param {string|number} id The `id` argument passed to {@link Mapper#beforeFind}.\n   * @param {object} opts The `opts` argument passed to {@link Mapper#beforeFind}.\n   * @see Mapper#event:beforeFind\n   * @see Mapper#find\n   * @since 3.0.0\n   */\n  /**\n   * Fired during {@link Mapper#find}. See\n   * {@link Mapper~afterFindListener} for how to listen for this event.\n   *\n   * @event Mapper#afterFind\n   * @see Mapper~afterFindListener\n   * @see Mapper#find\n   */\n  /**\n   * Callback signature for the {@link Mapper#event:afterFind} event.\n   *\n   * @example\n   * function onAfterFind (id, opts, result) {\n   *   // do something\n   * }\n   * store.on('afterFind', onAfterFind);\n   *\n   * @callback Mapper~afterFindListener\n   * @param {string|number} id The `id` argument passed to {@link Mapper#afterFind}.\n   * @param {object} opts The `opts` argument passed to {@link Mapper#afterFind}.\n   * @param {object} result The `result` argument passed to {@link Mapper#afterFind}.\n   * @see Mapper#event:afterFind\n   * @see Mapper#find\n   * @since 3.0.0\n   */\n  /**\n   * Retrieve via an adapter the record with the given primary key.\n   *\n   * {@link Mapper#beforeFind} will be called before calling the adapter.\n   * {@link Mapper#afterFind} will be called after calling the adapter.\n   *\n   * @example\n   * PostMapper.find(1).then((post) => {\n   *   console.log(post); // { id: 1, ...}\n   * });\n   *\n   * @example\n   * // Get full response\n   * PostMapper.find(1, { raw: true }).then((result) => {\n   *   console.log(result.data); // { id: 1, ...}\n   *   console.log(result.found); // 1\n   *   console.log(...); // etc., more metadata can be found on the result\n   * });\n   *\n   * @fires Mapper#beforeFind\n   * @fires Mapper#afterFind\n   * @method Mapper#find\n   * @param {(string|number)} id The primary key of the record to retrieve.\n   * @param {object} [opts] Configuration options. Refer to the `find` method\n   * of whatever adapter you're using for more configuration options.\n   * @param {boolean} [opts.adapter={@link Mapper#defaultAdapter}] Name of the\n   * adapter to use.\n   * @param {boolean} [opts.notify={@link Mapper#notify}] See {@link Mapper#notify}.\n   * @param {boolean} [opts.raw={@link Mapper#raw}] See {@link Mapper#raw}.\n   * @param {string[]} [opts.with=[]] Relations to eager load in the request.\n   * @returns {Promise} Resolves with the found record. Resolves with\n   * `undefined` if no record was found.\n   * @see http://www.js-data.io/v3.0/docs/reading-data\n   * @since 3.0.0\n   * @tutorial [\"http://www.js-data.io/v3.0/docs/reading-data\",\"Reading data\"]\n   */\n  find (id, opts) {\n    return this.crud('find', id, opts)\n  }\n\n  /**\n   * Fired during {@link Mapper#findAll}. See\n   * {@link Mapper~beforeFindAllListener} for how to listen for this event.\n   *\n   * @event Mapper#beforeFindAll\n   * @see Mapper~beforeFindAllListener\n   * @see Mapper#findAll\n   */\n  /**\n   * Callback signature for the {@link Mapper#event:beforeFindAll} event.\n   *\n   * @example\n   * function onBeforeFindAll (query, opts) {\n   *   // do something\n   * }\n   * store.on('beforeFindAll', onBeforeFindAll);\n   *\n   * @callback Mapper~beforeFindAllListener\n   * @param {object} query The `query` argument passed to {@link Mapper#beforeFindAll}.\n   * @param {object} opts The `opts` argument passed to {@link Mapper#beforeFindAll}.\n   * @see Mapper#event:beforeFindAll\n   * @see Mapper#findAll\n   * @since 3.0.0\n   */\n  /**\n   * Fired during {@link Mapper#findAll}. See\n   * {@link Mapper~afterFindAllListener} for how to listen for this event.\n   *\n   * @event Mapper#afterFindAll\n   * @see Mapper~afterFindAllListener\n   * @see Mapper#findAll\n   */\n  /**\n   * Callback signature for the {@link Mapper#event:afterFindAll} event.\n   *\n   * @example\n   * function onAfterFindAll (query, opts, result) {\n   *   // do something\n   * }\n   * store.on('afterFindAll', onAfterFindAll);\n   *\n   * @callback Mapper~afterFindAllListener\n   * @param {object} query The `query` argument passed to {@link Mapper#afterFindAll}.\n   * @param {object} opts The `opts` argument passed to {@link Mapper#afterFindAll}.\n   * @param {object} result The `result` argument passed to {@link Mapper#afterFindAll}.\n   * @see Mapper#event:afterFindAll\n   * @see Mapper#findAll\n   * @since 3.0.0\n   */\n  /**\n   * Using the `query` argument, select records to retrieve via an adapter.\n   *\n   * {@link Mapper#beforeFindAll} will be called before calling the adapter.\n   * {@link Mapper#afterFindAll} will be called after calling the adapter.\n   *\n   * @example\n   * // Find all \"published\" blog posts\n   * PostMapper.findAll({ status: 'published' }).then((posts) => {\n   *   console.log(posts); // [{ id: 1, status: 'published', ...}, ...]\n   * });\n   *\n   * @example\n   * // Get full response\n   * PostMapper.findAll({ status: 'published' }, { raw: true }).then((result) => {\n   *   console.log(result.data); // [{ id: 1, status: 'published', ...}, ...]\n   *   console.log(result.found); // e.g. 13\n   *   console.log(...); // etc., more metadata can be found on the result\n   * });\n   *\n   * @fires Mapper#beforeFindAll\n   * @fires Mapper#afterFindAll\n   * @method Mapper#findAll\n   * @param {object} [query={}] Selection query. See {@link query}.\n   * @param {object} [query.where] See {@link query.where}.\n   * @param {number} [query.offset] See {@link query.offset}.\n   * @param {number} [query.limit] See {@link query.limit}.\n   * @param {string|Array[]} [query.orderBy] See {@link query.orderBy}.\n   * @param {object} [opts] Configuration options. Refer to the `findAll` method\n   * of whatever adapter you're using for more configuration options.\n   * @param {boolean} [opts.adapter={@link Mapper#defaultAdapter}] Name of the\n   * adapter to use.\n   * @param {boolean} [opts.notify={@link Mapper#notify}] See {@link Mapper#notify}.\n   * @param {boolean} [opts.raw={@link Mapper#raw}] See {@link Mapper#raw}.\n   * @param {string[]} [opts.with=[]] Relations to eager load in the request.\n   * @returns {Promise} Resolves with the found records, if any.\n   * @see query\n   * @since 3.0.0\n   * @tutorial [\"http://www.js-data.io/v3.0/docs/reading-data\",\"Reading data\"]\n   */\n  findAll (query, opts) {\n    return this.crud('findAll', query, opts)\n  }\n\n  /**\n   * Return the registered adapter with the given name or the default adapter if\n   * no name is provided.\n   *\n   * @method Mapper#getAdapter\n   * @param {string} [name] The name of the adapter to retrieve.\n   * @returns {Adapter} The adapter.\n   * @since 3.0.0\n   * @tutorial [\"http://www.js-data.io/v3.0/docs/connecting-to-a-data-source\",\"Connecting to a data source\"]\n   */\n  getAdapter (name) {\n    this.dbg('getAdapter', 'name:', name)\n    const adapter = this.getAdapterName(name)\n    if (!adapter) {\n      throw utils.err(`${DOMAIN}#getAdapter`, 'name')(400, 'string', name)\n    }\n    return this.getAdapters()[adapter]\n  }\n\n  /**\n   * Return the name of a registered adapter based on the given name or options,\n   * or the name of the default adapter if no name provided.\n   *\n   * @method Mapper#getAdapterName\n   * @param {(Object|string)} [opts] The name of an adapter or options, if any.\n   * @returns {string} The name of the adapter.\n   * @since 3.0.0\n   * @tutorial [\"http://www.js-data.io/v3.0/docs/connecting-to-a-data-source\",\"Connecting to a data source\"]\n   */\n  getAdapterName (opts = {}) {\n    if (utils.isString(opts)) {\n      opts = { adapter: opts }\n    }\n    return opts.adapter || opts.defaultAdapter\n  }\n\n  /**\n   * Get the object of registered adapters for this Mapper.\n   *\n   * @method Mapper#getAdapters\n   * @returns {Object} {@link Mapper#_adapters}\n   * @since 3.0.0\n   * @tutorial [\"http://www.js-data.io/v3.0/docs/connecting-to-a-data-source\",\"Connecting to a data source\"]\n   */\n  getAdapters () {\n    return this._adapters\n  }\n\n  /**\n   * Returns this Mapper's {@link Schema}.\n   *\n   * @method Mapper#getSchema\n   * @returns {Schema} This Mapper's {@link Schema}.\n   * @see Mapper#schema\n   * @since 3.0.0\n   */\n  getSchema () {\n    return this.schema\n  }\n\n  /**\n   * Defines a hasMany relationship. Only useful if you're managing your\n   * Mappers manually and not using a Container or DataStore component.\n   *\n   * @example\n   * UserMapper.hasMany(PostMapper, {\n   *   // post.user_id points to user.id\n   *   foreignKey: 'user_id'\n   *   // post records will be attached to user records at \"user.posts\"\n   *   localField: 'posts'\n   * });\n   *\n   * @method Mapper#hasMany\n   * @see http://www.js-data.io/v3.0/docs/relations\n   * @since 3.0.0\n   */\n  hasMany (relatedMapper, opts) {\n    return hasMany(relatedMapper, opts)(this)\n  }\n\n  /**\n   * Defines a hasOne relationship. Only useful if you're managing your Mappers\n   * manually and not using a {@link Container} or {@link DataStore} component.\n   *\n   * @example\n   * UserMapper.hasOne(ProfileMapper, {\n   *   // profile.user_id points to user.id\n   *   foreignKey: 'user_id'\n   *   // profile records will be attached to user records at \"user.profile\"\n   *   localField: 'profile'\n   * });\n   *\n   * @method Mapper#hasOne\n   * @see http://www.js-data.io/v3.0/docs/relations\n   * @since 3.0.0\n   */\n  hasOne (relatedMapper, opts) {\n    return hasOne(relatedMapper, opts)(this)\n  }\n\n  /**\n   * Return whether `record` is an instance of this Mapper's recordClass.\n   *\n   * @example\n   * const post = PostMapper.createRecord();\n   *\n   * console.log(PostMapper.is(post)); // true\n   * // Equivalent to what's above\n   * console.log(post instanceof PostMapper.recordClass); // true\n   *\n   * @method Mapper#is\n   * @param {Object|Record} record The record to check.\n   * @returns {boolean} Whether `record` is an instance of this Mapper's\n   * {@link Mapper#recordClass}.\n   * @since 3.0.0\n   */\n  is (record) {\n    const recordClass = this.recordClass\n    return recordClass ? record instanceof recordClass : false\n  }\n\n  /**\n   * Register an adapter on this Mapper under the given name.\n   *\n   * @method Mapper#registerAdapter\n   * @param {string} name The name of the adapter to register.\n   * @param {Adapter} adapter The adapter to register.\n   * @param {object} [opts] Configuration options.\n   * @param {boolean} [opts.default=false] Whether to make the adapter the\n   * default adapter for this Mapper.\n   * @since 3.0.0\n   * @tutorial [\"http://www.js-data.io/v3.0/docs/connecting-to-a-data-source\",\"Connecting to a data source\"]\n   */\n  registerAdapter (name, adapter, opts = {}) {\n    this.getAdapters()[name] = adapter\n    // Optionally make it the default adapter for the target.\n    if (opts === true || opts.default) {\n      this.defaultAdapter = name\n    }\n  }\n\n  _runHook (hookName, ...hookArgs) {\n    const defaultValueIndex = hookName.indexOf('after') === 0 ? hookArgs.length - 1 : 0\n\n    return utils.resolve(this[hookName](...hookArgs))\n      .then((overridenResult) => overridenResult === undefined ? hookArgs[defaultValueIndex] : overridenResult)\n  }\n\n  _invokeAdapterMethod (method, propsOrRecords, opts) {\n    const conversionOptions = { with: opts.pass || [] }\n    let object\n\n    this.dbg(opts.op, propsOrRecords, opts)\n\n    if (utils.isArray(propsOrRecords)) {\n      object = propsOrRecords.map(record => this.toJSON(record, conversionOptions))\n    } else {\n      object = this.toJSON(propsOrRecords, conversionOptions)\n    }\n\n    return this.getAdapter(opts.adapter)[method](this, object, opts)\n  }\n\n  /**\n   * Select records according to the `query` argument, and aggregate the sum\n   * value of the property specified by `field`.\n   *\n   * {@link Mapper#beforeSum} will be called before calling the adapter.\n   * {@link Mapper#afterSum} will be called after calling the adapter.\n   *\n   * @example\n   * PurchaseOrderMapper.sum('amount', { status: 'paid' }).then((amountPaid) => {\n   *   console.log(amountPaid); // e.g. 451125.34\n   * });\n   *\n   * @method Mapper#sum\n   * @param {string} field The field to sum.\n   * @param {object} [query={}] Selection query. See {@link query}.\n   * @param {object} [query.where] See {@link query.where}.\n   * @param {number} [query.offset] See {@link query.offset}.\n   * @param {number} [query.limit] See {@link query.limit}.\n   * @param {string|Array[]} [query.orderBy] See {@link query.orderBy}.\n   * @param {object} [opts] Configuration options. Refer to the `sum` method\n   * of whatever adapter you're using for more configuration options.\n   * @param {boolean} [opts.adapter={@link Mapper#defaultAdapter}] Name of the\n   * adapter to use.\n   * @param {boolean} [opts.notify={@link Mapper#notify}] See {@link Mapper#notify}.\n   * @param {boolean} [opts.raw={@link Mapper#raw}] See {@link Mapper#raw}.\n   * @returns {Promise} Resolves with the aggregated sum.\n   * @since 3.0.0\n   */\n  sum (field, query, opts) {\n    return this.crud('sum', field, query, opts)\n  }\n\n  /**\n   * Return a plain object representation of the given record. Relations can\n   * be optionally be included. Non-schema properties can be excluded.\n   *\n   * @example\n   * import { Mapper, Schema } from 'js-data';\n   * const PersonMapper = new Mapper({\n   *   name: 'person',\n   *   schema: {\n   *     properties: {\n   *       name: { type: 'string' },\n   *       id: { type: 'string' }\n   *     }\n   *   }\n   * });\n   * const person = PersonMapper.createRecord({ id: 1, name: 'John', foo: 'bar' });\n   * // \"foo\" is stripped by toJSON()\n   * console.log(PersonMapper.toJSON(person)); // {\"id\":1,\"name\":\"John\"}\n   *\n   * const PersonRelaxedMapper = new Mapper({\n   *   name: 'personRelaxed',\n   *   schema: {\n   *     properties: {\n   *       name: { type: 'string' },\n   *       id: { type: 'string' }\n   *     },\n   *     additionalProperties: true\n   *   }\n   * });\n   * const person2 = PersonRelaxedMapper.createRecord({ id: 1, name: 'John', foo: 'bar' });\n   * // \"foo\" is not stripped by toJSON\n   * console.log(PersonRelaxedMapper.toJSON(person2)); // {\"id\":1,\"name\":\"John\",\"foo\":\"bar\"}\n   *\n   * @method Mapper#toJSON\n   * @param {Record|Record[]} records Record or records from which to create a\n   * POJO representation.\n   * @param {object} [opts] Configuration options.\n   * @param {string[]} [opts.with] Array of relation names or relation fields\n   * to include in the POJO representation.\n   * @param {boolean} [opts.withAll] Whether to simply include all relations in\n   * the representation. Overrides `opts.with`.\n   * @returns {Object|Object[]} POJO representation of the record or records.\n   * @since 3.0.0\n   */\n  toJSON (records, opts = {}) {\n    let record\n    if (utils.isArray(records)) {\n      return records.map((record) => this.toJSON(record, opts))\n    } else {\n      record = records\n    }\n    const relationFields = (this ? this.relationFields : []) || []\n    let json = {}\n\n    // Copy properties defined in the schema\n    if (this && this.schema) {\n      json = this.schema.pick(record)\n    } else {\n      for (var key in record) {\n        if (relationFields.indexOf(key) === -1) {\n          json[key] = utils.plainCopy(record[key])\n        }\n      }\n    }\n\n    // The user wants to include relations in the resulting plain object representation\n    if (this && opts.withAll) {\n      opts.with = relationFields.slice()\n    }\n    if (this && opts.with) {\n      if (utils.isString(opts.with)) {\n        opts.with = [opts.with]\n      }\n      utils.forEachRelation(this, opts, (def, optsCopy) => {\n        const relationData = def.getLocalField(record)\n        if (relationData) {\n          // The actual recursion\n          if (utils.isArray(relationData)) {\n            def.setLocalField(json, relationData.map((item) => {\n              return def.getRelation().toJSON(item, optsCopy)\n            }))\n          } else {\n            def.setLocalField(json, def.getRelation().toJSON(relationData, optsCopy))\n          }\n        }\n      })\n    }\n    return json\n  }\n\n  /**\n   * Fired during {@link Mapper#update}. See\n   * {@link Mapper~beforeUpdateListener} for how to listen for this event.\n   *\n   * @event Mapper#beforeUpdate\n   * @see Mapper~beforeUpdateListener\n   * @see Mapper#update\n   */\n  /**\n   * Callback signature for the {@link Mapper#event:beforeUpdate} event.\n   *\n   * @example\n   * function onBeforeUpdate (id, props, opts) {\n   *   // do something\n   * }\n   * store.on('beforeUpdate', onBeforeUpdate);\n   *\n   * @callback Mapper~beforeUpdateListener\n   * @param {string|number} id The `id` argument passed to {@link Mapper#beforeUpdate}.\n   * @param {object} props The `props` argument passed to {@link Mapper#beforeUpdate}.\n   * @param {object} opts The `opts` argument passed to {@link Mapper#beforeUpdate}.\n   * @see Mapper#event:beforeUpdate\n   * @see Mapper#update\n   * @since 3.0.0\n   */\n  /**\n   * Fired during {@link Mapper#update}. See\n   * {@link Mapper~afterUpdateListener} for how to listen for this event.\n   *\n   * @event Mapper#afterUpdate\n   * @see Mapper~afterUpdateListener\n   * @see Mapper#update\n   */\n  /**\n   * Callback signature for the {@link Mapper#event:afterUpdate} event.\n   *\n   * @example\n   * function onAfterUpdate (id, props, opts, result) {\n   *   // do something\n   * }\n   * store.on('afterUpdate', onAfterUpdate);\n   *\n   * @callback Mapper~afterUpdateListener\n   * @param {string|number} id The `id` argument passed to {@link Mapper#afterUpdate}.\n   * @param {object} props The `props` argument passed to {@link Mapper#afterUpdate}.\n   * @param {object} opts The `opts` argument passed to {@link Mapper#afterUpdate}.\n   * @param {object} result The `result` argument passed to {@link Mapper#afterUpdate}.\n   * @see Mapper#event:afterUpdate\n   * @see Mapper#update\n   * @since 3.0.0\n   */\n  /**\n   * Using an adapter, update the record with the primary key specified by the\n   * `id` argument.\n   *\n   * {@link Mapper#beforeUpdate} will be called before updating the record.\n   * {@link Mapper#afterUpdate} will be called after updating the record.\n   *\n   * @example\n   * // Update a specific post\n   * PostMapper.update(1234, {\n   *   status: 'published',\n   *   published_at: new Date()\n   * }).then((post) => {\n   *   console.log(post); // { id: 1234, status: 'published', ... }\n   * });\n   *\n   * @fires Mapper#beforeUpdate\n   * @fires Mapper#afterUpdate\n   * @method Mapper#update\n   * @param {(string|number)} id The primary key of the record to update.\n   * @param {object} props The update to apply to the record.\n   * @param {object} [opts] Configuration options. Refer to the `update` method\n   * of whatever adapter you're using for more configuration options.\n   * @param {boolean} [opts.adapter={@link Mapper#defaultAdapter}] Name of the\n   * adapter to use.\n   * @param {boolean} [opts.notify={@link Mapper#notify}] See {@link Mapper#notify}.\n   * @param {boolean} [opts.noValidate={@link Mapper#noValidate}] See {@link Mapper#noValidate}.\n   * @param {boolean} [opts.raw={@link Mapper#raw}] See {@link Mapper#raw}.\n   * transaction.\n   * @returns {Promise} Resolves with the updated record. Rejects if the record\n   * could not be found.\n   * @since 3.0.0\n   * @tutorial [\"http://www.js-data.io/v3.0/docs/saving-data\",\"Saving data\"]\n   */\n  update (id, props, opts) {\n    return this.crud('update', id, props, opts)\n  }\n\n  /**\n   * Fired during {@link Mapper#updateAll}. See\n   * {@link Mapper~beforeUpdateAllListener} for how to listen for this event.\n   *\n   * @event Mapper#beforeUpdateAll\n   * @see Mapper~beforeUpdateAllListener\n   * @see Mapper#updateAll\n   */\n  /**\n   * Callback signature for the {@link Mapper#event:beforeUpdateAll} event.\n   *\n   * @example\n   * function onBeforeUpdateAll (props, query, opts) {\n   *   // do something\n   * }\n   * store.on('beforeUpdateAll', onBeforeUpdateAll);\n   *\n   * @callback Mapper~beforeUpdateAllListener\n   * @param {object} props The `props` argument received by {@link Mapper#beforeUpdateAll}.\n   * @param {object} query The `query` argument received by {@link Mapper#beforeUpdateAll}.\n   * @param {object} opts The `opts` argument received by {@link Mapper#beforeUpdateAll}.\n   * @see Mapper#event:beforeUpdateAll\n   * @see Mapper#updateAll\n   * @since 3.0.0\n   */\n  /**\n   * Fired during {@link Mapper#updateAll}. See\n   * {@link Mapper~afterUpdateAllListener} for how to listen for this event.\n   *\n   * @event Mapper#afterUpdateAll\n   * @see Mapper~afterUpdateAllListener\n   * @see Mapper#updateAll\n   */\n  /**\n   * Callback signature for the {@link Mapper#event:afterUpdateAll} event.\n   *\n   * @example\n   * function onAfterUpdateAll (props, query, opts, result) {\n   *   // do something\n   * }\n   * store.on('afterUpdateAll', onAfterUpdateAll);\n   *\n   * @callback Mapper~afterUpdateAllListener\n   * @param {object} props The `props` argument received by {@link Mapper#afterUpdateAll}.\n   * @param {object} query The `query` argument received by {@link Mapper#afterUpdateAll}.\n   * @param {object} opts The `opts` argument received by {@link Mapper#afterUpdateAll}.\n   * @param {object} result The `result` argument received by {@link Mapper#afterUpdateAll}.\n   * @see Mapper#event:afterUpdateAll\n   * @see Mapper#updateAll\n   * @since 3.0.0\n   */\n  /**\n   * Using the `query` argument, perform the a single updated to the selected\n   * records.\n   *\n   * {@link Mapper#beforeUpdateAll} will be called before making the update.\n   * {@link Mapper#afterUpdateAll} will be called after making the update.\n   *\n   * @example\n   * // Turn all of John's blog posts into drafts.\n   * const update = { status: draft: published_at: null };\n   * const query = { userId: 1234 };\n   * PostMapper.updateAll(update, query).then((posts) => {\n   *   console.log(posts); // [...]\n   * });\n   *\n   * @fires Mapper#beforeUpdateAll\n   * @fires Mapper#afterUpdateAll\n   * @method Mapper#updateAll\n   * @param {object} props Update to apply to selected records.\n   * @param {object} [query={}] Selection query. See {@link query}.\n   * @param {object} [query.where] See {@link query.where}.\n   * @param {number} [query.offset] See {@link query.offset}.\n   * @param {number} [query.limit] See {@link query.limit}.\n   * @param {string|Array[]} [query.orderBy] See {@link query.orderBy}.\n   * @param {object} [opts] Configuration options. Refer to the `updateAll`\n   * method of whatever adapter you're using for more configuration options.\n   * @param {boolean} [opts.adapter={@link Mapper#defaultAdapter}] Name of the\n   * adapter to use.\n   * @param {boolean} [opts.notify={@link Mapper#notify}] See {@link Mapper#notify}.\n   * @param {boolean} [opts.noValidate={@link Mapper#noValidate}] See {@link Mapper#noValidate}.\n   * @param {boolean} [opts.raw={@link Mapper#raw}] See {@link Mapper#raw}.\n   * @returns {Promise} Resolves with the update records, if any.\n   * @see query\n   * @since 3.0.0\n   * @tutorial [\"http://www.js-data.io/v3.0/docs/saving-data\",\"Saving data\"]\n   */\n  updateAll (props, query, opts) {\n    return this.crud('updateAll', props, query, opts)\n  }\n\n  /**\n   * Fired during {@link Mapper#updateMany}. See\n   * {@link Mapper~beforeUpdateManyListener} for how to listen for this event.\n   *\n   * @event Mapper#beforeUpdateMany\n   * @see Mapper~beforeUpdateManyListener\n   * @see Mapper#updateMany\n   */\n  /**\n   * Callback signature for the {@link Mapper#event:beforeUpdateMany} event.\n   *\n   * @example\n   * function onBeforeUpdateMany (records, opts) {\n   *   // do something\n   * }\n   * store.on('beforeUpdateMany', onBeforeUpdateMany);\n   *\n   * @callback Mapper~beforeUpdateManyListener\n   * @param {object} records The `records` argument received by {@link Mapper#beforeUpdateMany}.\n   * @param {object} opts The `opts` argument received by {@link Mapper#beforeUpdateMany}.\n   * @see Mapper#event:beforeUpdateMany\n   * @see Mapper#updateMany\n   * @since 3.0.0\n   */\n  /**\n   * Fired during {@link Mapper#updateMany}. See\n   * {@link Mapper~afterUpdateManyListener} for how to listen for this event.\n   *\n   * @event Mapper#afterUpdateMany\n   * @see Mapper~afterUpdateManyListener\n   * @see Mapper#updateMany\n   */\n  /**\n   * Callback signature for the {@link Mapper#event:afterUpdateMany} event.\n   *\n   * @example\n   * function onAfterUpdateMany (records, opts, result) {\n   *   // do something\n   * }\n   * store.on('afterUpdateMany', onAfterUpdateMany);\n   *\n   * @callback Mapper~afterUpdateManyListener\n   * @param {object} records The `records` argument received by {@link Mapper#afterUpdateMany}.\n   * @param {object} opts The `opts` argument received by {@link Mapper#afterUpdateMany}.\n   * @param {object} result The `result` argument received by {@link Mapper#afterUpdateMany}.\n   * @see Mapper#event:afterUpdateMany\n   * @see Mapper#updateMany\n   * @since 3.0.0\n   */\n  /**\n   * Given an array of updates, perform each of the updates via an adapter. Each\n   * \"update\" is a hash of properties with which to update an record. Each\n   * update must contain the primary key of the record to be updated.\n   *\n   * {@link Mapper#beforeUpdateMany} will be called before making the update.\n   * {@link Mapper#afterUpdateMany} will be called after making the update.\n   *\n   * @example\n   * PostMapper.updateMany([\n   *   { id: 1234, status: 'draft' },\n   *   { id: 2468, status: 'published', published_at: new Date() }\n   * ]).then((posts) => {\n   *   console.log(posts); // [...]\n   * });\n   *\n   * @fires Mapper#beforeUpdateMany\n   * @fires Mapper#afterUpdateMany\n   * @method Mapper#updateMany\n   * @param {Record[]} records Array up record updates.\n   * @param {object} [opts] Configuration options. Refer to the `updateMany`\n   * method of whatever adapter you're using for more configuration options.\n   * @param {boolean} [opts.adapter={@link Mapper#defaultAdapter}] Name of the\n   * adapter to use.\n   * @param {boolean} [opts.notify={@link Mapper#notify}] See {@link Mapper#notify}.\n   * @param {boolean} [opts.noValidate={@link Mapper#noValidate}] See {@link Mapper#noValidate}.\n   * @param {boolean} [opts.raw={@link Mapper#raw}] See {@link Mapper#raw}.\n   * @returns {Promise} Resolves with the updated records. Rejects if any of the\n   * records could be found.\n   * @since 3.0.0\n   * @tutorial [\"http://www.js-data.io/v3.0/docs/saving-data\",\"Saving data\"]\n   */\n  updateMany (records, opts) {\n    return this.crud('updateMany', records, opts)\n  }\n\n  /**\n   * Validate the given record or records according to this Mapper's\n   * {@link Schema}. If there are no validation errors then the return value\n   * will be `undefined`.\n   *\n   * @example\n   * import {Mapper, Schema} from 'js-data'\n   * const PersonSchema = new Schema({\n   *   properties: {\n   *     name: { type: 'string' },\n   *     id: { type: 'string' }\n   *   }\n   * });\n   * const PersonMapper = new Mapper({\n   *   name: 'person',\n   *   schema: PersonSchema\n   * });\n   * let errors = PersonMapper.validate({ name: 'John' });\n   * console.log(errors); // undefined\n   * errors = PersonMapper.validate({ name: 123 });\n   * console.log(errors); // [{ expected: 'one of (string)', actual: 'number', path: 'name' }]\n   *\n   * @method Mapper#validate\n   * @param {Object|Object[]} record The record or records to validate.\n   * @param {object} [opts] Configuration options. Passed to\n   * {@link Schema#validate}.\n   * @returns {Object[]} Array of errors or `undefined` if no errors.\n   * @since 3.0.0\n   */\n  validate (record, opts = {}) {\n    const schema = this.getSchema()\n    if (!schema) {\n      return\n    }\n    const _opts = utils.pick(opts, ['existingOnly'])\n    if (utils.isArray(record)) {\n      const errors = record.map((_record) => schema.validate(_record, utils.pick(_opts, ['existingOnly'])))\n\n      return errors.some(Boolean) ? errors : undefined\n    }\n    return schema.validate(record, _opts)\n  }\n\n  /**\n   * Method used to wrap data returned by an adapter with this Mapper's\n   * {@link Mapper#recordClass}. This method is used by all of a Mapper's CRUD\n   * methods. The provided implementation of this method assumes that the `data`\n   * passed to it is a record or records that need to be wrapped with\n   * {@link Mapper#createRecord}. Override with care.\n   *\n   * Provided implementation of {@link Mapper#wrap}:\n   *\n   * ```\n   * function (data, opts) {\n   *   return this.createRecord(data, opts);\n   * }\n   * ```\n   *\n   * @example\n   * const PostMapper = new Mapper({\n   *   name: 'post',\n   *   // Override to customize behavior\n   *   wrap (data, opts) {\n   *     const originalWrap = this.constructor.prototype.wrap;\n   *     // Let's say \"GET /post\" doesn't return JSON quite like JSData expects,\n   *     // but the actual post records are nested under a \"posts\" field. So,\n   *     // we override Mapper#wrap to handle this special case.\n   *     if (opts.op === 'findAll') {\n   *       return originalWrap.call(this, data.posts, opts);\n   *     }\n   *     // Otherwise perform original behavior\n   *     return originalWrap.call(this, data, opts);\n   *   }\n   * });\n   *\n   * @method Mapper#wrap\n   * @param {Object|Object[]} data The record or records to be wrapped.\n   * @param {object} [opts] Configuration options. Passed to {@link Mapper#createRecord}.\n   * @returns {Record|Record[]} The wrapped record or records.\n   * @since 3.0.0\n   */\n  wrap (data, opts) {\n    return this.createRecord(data, opts)\n  }\n\n  /**\n   * @ignore\n   */\n  defineRelations () {\n    // Setup the mapper's relations, including generating Mapper#relationList\n    // and Mapper#relationFields\n    utils.forOwn(this.relations, (group, type) => {\n      utils.forOwn(group, (relations, _name) => {\n        if (utils.isObject(relations)) {\n          relations = [relations]\n        }\n        relations.forEach((def) => {\n          const relatedMapper = this.datastore.getMapperByName(_name) || _name\n          def.getRelation = () => this.datastore.getMapper(_name)\n\n          if (typeof Relation[type] !== 'function') {\n            throw utils.err(DOMAIN, 'defineRelations')(400, 'relation type (hasOne, hasMany, etc)', type, true)\n          }\n\n          this[type](relatedMapper, def)\n        })\n      })\n    })\n  }\n}\n\n/**\n * Create a subclass of this Mapper:\n *\n * @example <caption>Mapper.extend</caption>\n * const JSData = require('js-data');\n * const { Mapper } = JSData;\n * console.log('Using JSData v' + JSData.version.full);\n *\n * // Extend the class using ES2015 class syntax.\n * class CustomMapperClass extends Mapper {\n *   foo () { return 'bar'; }\n *   static beep () { return 'boop'; }\n * };\n * const customMapper = new CustomMapperClass();\n * console.log(customMapper.foo());\n * console.log(CustomMapperClass.beep());\n *\n * // Extend the class using alternate method.\n * const OtherMapperClass = Mapper.extend({\n *   foo () { return 'bar'; }\n * }, {\n *   beep () { return 'boop'; }\n * });\n * const otherMapper = new OtherMapperClass();\n * console.log(otherMapper.foo());\n * console.log(OtherMapperClass.beep());\n *\n * // Extend the class, providing a custom constructor.\n * function AnotherMapperClass () {\n *   Mapper.call(this);\n *   this.created_at = new Date().getTime();\n * }\n * Mapper.extend({\n *   constructor: AnotherMapperClass,\n *   foo () { return 'bar'; }\n * }, {\n *   beep () { return 'boop'; }\n * })\n * const anotherMapper = new AnotherMapperClass();\n * console.log(anotherMapper.created_at);\n * console.log(anotherMapper.foo());\n * console.log(AnotherMapperClass.beep());\n *\n * @method Mapper.extend\n * @param {object} [props={}] Properties to add to the prototype of the\n * subclass.\n * @param {object} [props.constructor] Provide a custom constructor function\n * to be used as the subclass itself.\n * @param {object} [classProps={}] Static properties to add to the subclass.\n * @returns {Constructor} Subclass of this Mapper class.\n * @since 3.0.0\n */\n","import utils from './utils'\nimport Component from './Component'\nimport Mapper from './Mapper'\n\nconst DOMAIN = 'Container'\n\nexport const proxiedMapperMethods = [\n  'count',\n  'create',\n  'createMany',\n  'createRecord',\n  'destroy',\n  'destroyAll',\n  'find',\n  'findAll',\n  'getSchema',\n  'is',\n  'sum',\n  'toJSON',\n  'update',\n  'updateAll',\n  'updateMany',\n  'validate'\n]\n\n/**\n * The `Container` class is a place to define and store {@link Mapper} instances.\n *\n * `Container` makes it easy to manage your Mappers. Without a container, you\n * need to manage Mappers yourself, including resolving circular dependencies\n * among relations. All Mappers in a container share the same adapters, so you\n * don't have to register adapters for every single Mapper.\n *\n * @example <caption>Container#constructor</caption>\n * // import { Container } from 'js-data';\n * const JSData = require('js-data');\n * const {Container} = JSData;\n * console.log('Using JSData v' + JSData.version.full);\n *\n * const store = new Container();\n *\n * @class Container\n * @extends Component\n * @param {object} [opts] Configuration options.\n * @param {boolean} [opts.debug=false] See {@link Component#debug}.\n * @param {Constructor} [opts.mapperClass] See {@link Container#mapperClass}.\n * @param {object} [opts.mapperDefaults] See {@link Container#mapperDefaults}.\n * @since 3.0.0\n */\nexport class Container extends Component {\n  constructor (opts = {}) {\n    super()\n\n    Object.defineProperties(this, {\n      /**\n       * The adapters registered with this Container, which are also shared by all\n       * Mappers in this Container.\n       *\n       * @name Container#_adapters\n       * @see Container#registerAdapter\n       * @since 3.0.0\n       * @type {Object}\n       */\n      _adapters: {\n        value: {}\n      },\n\n      /**\n       * The the mappers in this container\n       *\n       * @name Container#_mappers\n       * @see Mapper\n       * @since 3.0.0\n       * @type {Object}\n       */\n      _mappers: {\n        value: {}\n      },\n\n      /**\n       * Constructor function to use in {@link Container#defineMapper} to create new\n       * {@link Mapper} instances. {@link Container#mapperClass} should extend\n       * {@link Mapper}. By default {@link Mapper} is used to instantiate Mappers.\n       *\n       * @example <caption>Container#mapperClass</caption>\n       * // import { Container, Mapper } from 'js-data';\n       * const JSData = require('js-data');\n       * const { Container, Mapper } = JSData;\n       * console.log('Using JSData v' + JSData.version.full);\n       *\n       * class MyMapperClass extends Mapper {\n       *   foo () { return 'bar' }\n       * }\n       * const store = new Container({\n       *   mapperClass: MyMapperClass\n       * });\n       * store.defineMapper('user');\n       * console.log(store.getMapper('user').foo());\n       *\n       * @name Container#mapperClass\n       * @see Mapper\n       * @since 3.0.0\n       * @type {Constructor}\n       */\n      mapperClass: {\n        value: undefined,\n        writable: true\n      }\n    })\n\n    // Apply options provided by the user\n    utils.fillIn(this, opts)\n\n    /**\n     * Defaults options to pass to {@link Container#mapperClass} when creating a\n     * new {@link Mapper}.\n     *\n     * @example <caption>Container#mapperDefaults</caption>\n     * // import { Container } from 'js-data';\n     * const JSData = require('js-data');\n     * const { Container } = JSData;\n     * console.log('Using JSData v' + JSData.version.full);\n     *\n     * const store = new Container({\n     *   mapperDefaults: {\n     *     idAttribute: '_id'\n     *   }\n     * });\n     * store.defineMapper('user');\n     * console.log(store.getMapper('user').idAttribute);\n     *\n     * @default {}\n     * @name Container#mapperDefaults\n     * @since 3.0.0\n     * @type {Object}\n     */\n    this.mapperDefaults = this.mapperDefaults || {}\n\n    // Use the Mapper class if the user didn't provide a mapperClass\n    this.mapperClass || (this.mapperClass = Mapper)\n  }\n\n  /**\n   * Register a new event listener on this Container.\n   *\n   * Proxy for {@link Component#on}. If an event was emitted by a {@link Mapper}\n   * in the Container, then the name of the {@link Mapper} will be prepended to\n   * the arugments passed to the listener.\n   *\n   * @example <caption>Container#on</caption>\n   * // import { Container } from 'js-data';\n   * const JSData = require('js-data');\n   * const { Container } = JSData;\n   * console.log('Using JSData v' + JSData.version.full);\n   *\n   * const store = new Container();\n   * store.on('foo', function (...args) { console.log(args.join(':')) });\n   * store.defineMapper('user');\n   * store.emit('foo', 'arg1', 'arg2');\n   * store.getMapper('user').emit('foo', 'arg1', 'arg2');\n   *\n   * @method Container#on\n   * @param {string} event Name of event to subsribe to.\n   * @param {Function} listener Listener function to handle the event.\n   * @param {*} [ctx] Optional content in which to invoke the listener.\n   * @since 3.0.0\n   */\n\n  /**\n   * Used to bind to events emitted by mappers in this container.\n   *\n   * @method Container#_onMapperEvent\n   * @param {string} name Name of the mapper that emitted the event.\n   * @param {...*} [args] Args See {@link Mapper#emit}.\n   * @private\n   * @since 3.0.0\n   */\n  _onMapperEvent (name, ...args) {\n    const type = args.shift()\n    this.emit(type, name, ...args)\n  }\n\n  /**\n   * Return a container scoped to a particular mapper.\n   *\n   * @example <caption>Container#as</caption>\n   * // import { Container } from 'js-data';\n   * const JSData = require('js-data');\n   * const { Container } = JSData;\n   * console.log('Using JSData v' + JSData.version.full);\n   *\n   * const store = new Container();\n   * const UserMapper = store.defineMapper('user');\n   * const UserStore = store.as('user');\n   *\n   * const user1 = store.createRecord('user', { name: 'John' });\n   * const user2 = UserStore.createRecord({ name: 'John' });\n   * const user3 = UserMapper.createRecord({ name: 'John' });\n   * console.log(user1 === user2);\n   * console.log(user2 === user3);\n   * console.log(user1 === user3);\n   *\n   * @method Container#as\n   * @param {string} name Name of the {@link Mapper}.\n   * @returns {Object} A container scoped to a particular mapper.\n   * @since 3.0.0\n   */\n  as (name) {\n    const props = {}\n    const original = this\n    proxiedMapperMethods.forEach(function (method) {\n      props[method] = {\n        writable: true,\n        value (...args) {\n          return original[method](name, ...args)\n        }\n      }\n    })\n    props.getMapper = {\n      writable: true,\n      value () {\n        return original.getMapper(name)\n      }\n    }\n    return Object.create(this, props)\n  }\n\n  /**\n   * Create a new mapper and register it in this container.\n   *\n   * @example <caption>Container#defineMapper</caption>\n   * // import { Container } from 'js-data';\n   * const JSData = require('js-data');\n   * const { Container } = JSData;\n   * console.log('Using JSData v' + JSData.version.full);\n   *\n   * const store = new Container({\n   *   mapperDefaults: { foo: 'bar' }\n   * });\n   * // Container#defineMapper returns a direct reference to the newly created\n   * // Mapper.\n   * const UserMapper = store.defineMapper('user');\n   * console.log(UserMapper === store.getMapper('user'));\n   * console.log(UserMapper === store.as('user').getMapper());\n   * console.log(UserMapper.foo);\n   *\n   * @method Container#defineMapper\n   * @param {string} name Name under which to register the new {@link Mapper}.\n   * {@link Mapper#name} will be set to this value.\n   * @param {object} [opts] Configuration options. Passed to\n   * {@link Container#mapperClass} when creating the new {@link Mapper}.\n   * @returns {Mapper} The newly created instance of {@link Mapper}.\n   * @see Container#as\n   * @since 3.0.0\n   */\n  defineMapper (name, opts = {}) {\n    // For backwards compatibility with defineResource\n    if (utils.isObject(name)) {\n      opts = name\n      name = opts.name\n    }\n    if (!utils.isString(name)) {\n      throw utils.err(`${DOMAIN}#defineMapper`, 'name')(400, 'string', name)\n    }\n\n    // Set Mapper#name\n    opts.name = name\n    opts.relations || (opts.relations = {})\n\n    // Check if the user is overriding the datastore's default mapperClass\n    const mapperClass = opts.mapperClass || this.mapperClass\n    delete opts.mapperClass\n\n    // Apply the datastore's defaults to the options going into the mapper\n    utils.fillIn(opts, this.mapperDefaults)\n\n    // Instantiate a mapper\n    const mapper = this._mappers[name] = new mapperClass(opts) // eslint-disable-line\n    mapper.relations || (mapper.relations = {})\n    // Make sure the mapper's name is set\n    mapper.name = name\n    // All mappers in this datastore will share adapters\n    mapper._adapters = this.getAdapters()\n\n    mapper.datastore = this\n\n    mapper.on('all', (...args) => this._onMapperEvent(name, ...args))\n    mapper.defineRelations()\n\n    return mapper\n  }\n\n  defineResource (name, opts) {\n    console.warn('DEPRECATED: defineResource is deprecated, use defineMapper instead')\n    return this.defineMapper(name, opts)\n  }\n\n  /**\n   * Return the registered adapter with the given name or the default adapter if\n   * no name is provided.\n   *\n   * @method Container#getAdapter\n   * @param {string} [name] The name of the adapter to retrieve.\n   * @returns {Adapter} The adapter.\n   * @since 3.0.0\n   */\n  getAdapter (name) {\n    const adapter = this.getAdapterName(name)\n    if (!adapter) {\n      throw utils.err(`${DOMAIN}#getAdapter`, 'name')(400, 'string', name)\n    }\n    return this.getAdapters()[adapter]\n  }\n\n  /**\n   * Return the name of a registered adapter based on the given name or options,\n   * or the name of the default adapter if no name provided.\n   *\n   * @method Container#getAdapterName\n   * @param {(Object|string)} [opts] The name of an adapter or options, if any.\n   * @returns {string} The name of the adapter.\n   * @since 3.0.0\n   */\n  getAdapterName (opts = {}) {\n    if (utils.isString(opts)) {\n      opts = { adapter: opts }\n    }\n    return opts.adapter || this.mapperDefaults.defaultAdapter\n  }\n\n  /**\n   * Return the registered adapters of this container.\n   *\n   * @method Container#getAdapters\n   * @returns {Adapter}\n   * @since 3.0.0\n   */\n  getAdapters () {\n    return this._adapters\n  }\n\n  /**\n   * Return the mapper registered under the specified name.\n   *\n   * @example <caption>Container#getMapper</caption>\n   * // import { Container } from 'js-data';\n   * const JSData = require('js-data');\n   * const { Container } = JSData;\n   * console.log('Using JSData v' + JSData.version.full);\n   *\n   * const store = new Container();\n   * // Container#defineMapper returns a direct reference to the newly created\n   * // Mapper.\n   * const UserMapper = store.defineMapper('user');\n   * console.log(UserMapper === store.getMapper('user'));\n   * console.log(UserMapper === store.as('user').getMapper());\n   * store.getMapper('profile'); // throws Error, there is no mapper with name \"profile\"\n   *\n   * @method Container#getMapper\n   * @param {string} name {@link Mapper#name}.\n   * @returns {Mapper}\n   * @since 3.0.0\n   */\n  getMapper (name) {\n    const mapper = this.getMapperByName(name)\n    if (!mapper) {\n      throw utils.err(`${DOMAIN}#getMapper`, name)(404, 'mapper')\n    }\n    return mapper\n  }\n\n  /**\n   * Return the mapper registered under the specified name.\n   * Doesn't throw error if mapper doesn't exist.\n   *\n   * @example <caption>Container#getMapperByName</caption>\n   * // import { Container } from 'js-data';\n   * const JSData = require('js-data');\n   * const { Container } = JSData;\n   * console.log('Using JSData v' + JSData.version.full);\n   *\n   * const store = new Container();\n   * // Container#defineMapper returns a direct reference to the newly created\n   * // Mapper.\n   * const UserMapper = store.defineMapper('user');\n   * console.log(UserMapper === store.getMapper('user'));\n   * console.log(UserMapper === store.as('user').getMapper());\n   * console.log(store.getMapper('profile')); // Does NOT throw an error\n   *\n   * @method Container#getMapperByName\n   * @param {string} name {@link Mapper#name}.\n   * @returns {Mapper}\n   * @since 3.0.0\n   */\n  getMapperByName (name) {\n    return this._mappers[name]\n  }\n\n  /**\n   * Register an adapter on this container under the given name. Adapters\n   * registered on a container are shared by all mappers in the container.\n   *\n   * @example\n   * import { Container } from 'js-data';\n   * import { RethinkDBAdapter } from 'js-data-rethinkdb';\n   * const store = new Container();\n   * store.registerAdapter('rethinkdb', new RethinkDBAdapter(), { default: true });\n   *\n   * @method Container#registerAdapter\n   * @param {string} name The name of the adapter to register.\n   * @param {Adapter} adapter The adapter to register.\n   * @param {object} [opts] Configuration options.\n   * @param {boolean} [opts.default=false] Whether to make the adapter the\n   * default adapter for all Mappers in this container.\n   * @since 3.0.0\n   * @tutorial [\"http://www.js-data.io/v3.0/docs/connecting-to-a-data-source\",\"Connecting to a data source\"]\n   */\n  registerAdapter (name, adapter, opts = {}) {\n    this.getAdapters()[name] = adapter\n    // Optionally make it the default adapter for the target.\n    if (opts === true || opts.default) {\n      this.mapperDefaults.defaultAdapter = name\n      utils.forOwn(this._mappers, function (mapper) {\n        mapper.defaultAdapter = name\n      })\n    }\n  }\n\n  /**\n   * Wrapper for {@link Mapper#count}.\n   *\n   * @example\n   * // Get the number of published blog posts\n   * import { Container } from 'js-data';\n   * import RethinkDBAdapter from 'js-data-rethinkdb';\n   * const store = new Container();\n   * store.registerAdapter('rethinkdb', new RethinkDBAdapter(), { default: true });\n   * store.defineMapper('post');\n   *\n   * store.count('post', { status: 'published' }).then((numPublished) => {\n   *   console.log(numPublished); // e.g. 45\n   * });\n   *\n   * @method Container#count\n   * @param {string} name Name of the {@link Mapper} to target.\n   * @param {object} [query] See {@link Mapper#count}.\n   * @param {object} [opts] See {@link Mapper#count}.\n   * @returns {Promise} See {@link Mapper#count}.\n   * @see Mapper#count\n   * @since 3.0.0\n   */\n  count (name, opts) {\n    return this.getMapper(name).count(opts)\n  }\n\n  /**\n   * Fired during {@link Container#create}. See\n   * {@link Container~beforeCreateListener} for how to listen for this event.\n   *\n   * @event Container#beforeCreate\n   * @see Container~beforeCreateListener\n   * @see Container#create\n   */\n  /**\n   * Callback signature for the {@link Container#event:beforeCreate} event.\n   *\n   * @example\n   * function onBeforeCreate (mapperName, props, opts) {\n   *   // do something\n   * }\n   * store.on('beforeCreate', onBeforeCreate);\n   *\n   * @callback Container~beforeCreateListener\n   * @param {string} name The `name` argument received by {@link Mapper#beforeCreate}.\n   * @param {object} props The `props` argument received by {@link Mapper#beforeCreate}.\n   * @param {object} opts The `opts` argument received by {@link Mapper#beforeCreate}.\n   * @see Container#event:beforeCreate\n   * @see Container#create\n   * @since 3.0.0\n   */\n  /**\n   * Fired during {@link Container#create}. See\n   * {@link Container~afterCreateListener} for how to listen for this event.\n   *\n   * @event Container#afterCreate\n   * @see Container~afterCreateListener\n   * @see Container#create\n   */\n\n  /**\n   * Callback signature for the {@link Container#event:afterCreate} event.\n   *\n   * @example\n   * function onAfterCreate (mapperName, props, opts, result) {\n   *   // do something\n   * }\n   * store.on('afterCreate', onAfterCreate);\n   *\n   * @callback Container~afterCreateListener\n   * @param {string} name The `name` argument received by {@link Mapper#afterCreate}.\n   * @param {object} props The `props` argument received by {@link Mapper#afterCreate}.\n   * @param {object} opts The `opts` argument received by {@link Mapper#afterCreate}.\n   * @param {object} result The `result` argument received by {@link Mapper#afterCreate}.\n   * @see Container#event:afterCreate\n   * @see Container#create\n   * @since 3.0.0\n   */\n  /**\n   * Wrapper for {@link Mapper#create}.\n   *\n   * @example\n   * // Create and save a new blog post\n   * import { Container } from 'js-data';\n   * import RethinkDBAdapter from 'js-data-rethinkdb';\n   * const store = new Container();\n   * store.registerAdapter('rethinkdb', new RethinkDBAdapter(), { default: true });\n   * store.defineMapper('post');\n   *\n   * store.create('post', {\n   *   title: 'Modeling your data',\n   *   status: 'draft'\n   * }).then((post) => {\n   *   console.log(post); // { id: 1234, status: 'draft', ... }\n   * });\n   *\n   * @fires Container#beforeCreate\n   * @fires Container#afterCreate\n   * @method Container#create\n   * @param {string} name Name of the {@link Mapper} to target.\n   * @param {object} props See {@link Mapper#create}.\n   * @param {object} [opts] See {@link Mapper#create}.\n   * @returns {Promise} See {@link Mapper#create}.\n   * @see Mapper#create\n   * @since 3.0.0\n   */\n  create (name, props, opts) {\n    return this.getMapper(name).create(props, opts)\n  }\n\n  /**\n   * Fired during {@link Container#createMany}. See\n   * {@link Container~beforeCreateManyListener} for how to listen for this event.\n   *\n   * @event Container#beforeCreateMany\n   * @see Container~beforeCreateManyListener\n   * @see Container#createMany\n   */\n  /**\n   * Callback signature for the {@link Container#event:beforeCreateMany} event.\n   *\n   * @example\n   * function onBeforeCreateMany (mapperName, records, opts) {\n   *   // do something\n   * }\n   * store.on('beforeCreateMany', onBeforeCreateMany);\n   *\n   * @callback Container~beforeCreateManyListener\n   * @param {string} name The `name` argument received by {@link Mapper#beforeCreateMany}.\n   * @param {object} records The `records` argument received by {@link Mapper#beforeCreateMany}.\n   * @param {object} opts The `opts` argument received by {@link Mapper#beforeCreateMany}.\n   * @see Container#event:beforeCreateMany\n   * @see Container#createMany\n   * @since 3.0.0\n   */\n  /**\n   * Fired during {@link Container#createMany}. See\n   * {@link Container~afterCreateManyListener} for how to listen for this event.\n   *\n   * @event Container#afterCreateMany\n   * @see Container~afterCreateManyListener\n   * @see Container#createMany\n   */\n\n  /**\n   * Callback signature for the {@link Container#event:afterCreateMany} event.\n   *\n   * @example\n   * function onAfterCreateMany (mapperName, records, opts, result) {\n   *   // do something\n   * }\n   * store.on('afterCreateMany', onAfterCreateMany);\n   *\n   * @callback Container~afterCreateManyListener\n   * @param {string} name The `name` argument received by {@link Mapper#afterCreateMany}.\n   * @param {object} records The `records` argument received by {@link Mapper#afterCreateMany}.\n   * @param {object} opts The `opts` argument received by {@link Mapper#afterCreateMany}.\n   * @param {object} result The `result` argument received by {@link Mapper#afterCreateMany}.\n   * @see Container#event:afterCreateMany\n   * @see Container#createMany\n   * @since 3.0.0\n   */\n  /**\n   * Wrapper for {@link Mapper#createMany}.\n   *\n   * @example\n   * // Create and save several new blog posts\n   * import { Container } from 'js-data';\n   * import RethinkDBAdapter from 'js-data-rethinkdb';\n   * const store = new Container();\n   * store.registerAdapter('rethinkdb', new RethinkDBAdapter(), { default: true });\n   * store.defineMapper('post');\n   *\n   * store.createMany('post', [{\n   *   title: 'Modeling your data',\n   *   status: 'draft'\n   * }, {\n   *   title: 'Reading data',\n   *   status: 'draft'\n   * }]).then((posts) => {\n   *   console.log(posts[0]); // { id: 1234, status: 'draft', ... }\n   *   console.log(posts[1]); // { id: 1235, status: 'draft', ... }\n   * });\n   *\n   * @fires Container#beforeCreateMany\n   * @fires Container#afterCreateMany\n   * @method Container#createMany\n   * @param {string} name Name of the {@link Mapper} to target.\n   * @param {Record[]} records See {@link Mapper#createMany}.\n   * @param {object} [opts] See {@link Mapper#createMany}.\n   * @returns {Promise} See {@link Mapper#createMany}.\n   * @see Mapper#createMany\n   * @since 3.0.0\n   */\n  createMany (name, records, opts) {\n    return this.getMapper(name).createMany(records, opts)\n  }\n\n  /**\n   * Wrapper for {@link Mapper#createRecord}.\n   *\n   * __Note:__ This method does __not__ interact with any adapter, and does\n   * __not__ save any data. It only creates new objects in memory.\n   *\n   * @example\n   * // Create empty unsaved record instance\n   * import { Container } from 'js-data';\n   * const store = new Container();\n   * store.defineMapper('post');\n   * const post = PostMapper.createRecord();\n   *\n   * @method Container#createRecord\n   * @param {string} name Name of the {@link Mapper} to target.\n   * @param {Object|Object[]} props See {@link Mapper#createRecord}.\n   * @param {object} [opts] See {@link Mapper#createRecord}.\n   * @returns {Promise} See {@link Mapper#createRecord}.\n   * @see Mapper#createRecord\n   * @since 3.0.0\n   */\n  createRecord (name, props, opts) {\n    return this.getMapper(name).createRecord(props, opts)\n  }\n\n  /**\n   * Fired during {@link Container#destroy}. See\n   * {@link Container~beforeDestroyListener} for how to listen for this event.\n   *\n   * @event Container#beforeDestroy\n   * @see Container~beforeDestroyListener\n   * @see Container#destroy\n   */\n  /**\n   * Callback signature for the {@link Container#event:beforeDestroy} event.\n   *\n   * @example\n   * function onBeforeDestroy (mapperName, id, opts) {\n   *   // do something\n   * }\n   * store.on('beforeDestroy', onBeforeDestroy);\n   *\n   * @callback Container~beforeDestroyListener\n   * @param {string} name The `name` argument received by {@link Mapper#beforeDestroy}.\n   * @param {string|number} id The `id` argument received by {@link Mapper#beforeDestroy}.\n   * @param {object} opts The `opts` argument received by {@link Mapper#beforeDestroy}.\n   * @see Container#event:beforeDestroy\n   * @see Container#destroy\n   * @since 3.0.0\n   */\n  /**\n   * Fired during {@link Container#destroy}. See\n   * {@link Container~afterDestroyListener} for how to listen for this event.\n   *\n   * @event Container#afterDestroy\n   * @see Container~afterDestroyListener\n   * @see Container#destroy\n   */\n\n  /**\n   * Callback signature for the {@link Container#event:afterDestroy} event.\n   *\n   * @example\n   * function onAfterDestroy (mapperName, id, opts, result) {\n   *   // do something\n   * }\n   * store.on('afterDestroy', onAfterDestroy);\n   *\n   * @callback Container~afterDestroyListener\n   * @param {string} name The `name` argument received by {@link Mapper#afterDestroy}.\n   * @param {string|number} id The `id` argument received by {@link Mapper#afterDestroy}.\n   * @param {object} opts The `opts` argument received by {@link Mapper#afterDestroy}.\n   * @param {object} result The `result` argument received by {@link Mapper#afterDestroy}.\n   * @see Container#event:afterDestroy\n   * @see Container#destroy\n   * @since 3.0.0\n   */\n  /**\n   * Wrapper for {@link Mapper#destroy}.\n   *\n   * @example\n   * // Destroy a specific blog post\n   * import { Container } from 'js-data';\n   * import RethinkDBAdapter from 'js-data-rethinkdb';\n   * const store = new Container();\n   * store.registerAdapter('rethinkdb', new RethinkDBAdapter(), { default: true });\n   * store.defineMapper('post');\n   *\n   * store.destroy('post', 1234).then(() => {\n   *   // Blog post #1234 has been destroyed\n   * });\n   *\n   * @fires Container#beforeDestroy\n   * @fires Container#afterDestroy\n   * @method Container#destroy\n   * @param {string} name Name of the {@link Mapper} to target.\n   * @param {(string|number)} id See {@link Mapper#destroy}.\n   * @param {object} [opts] See {@link Mapper#destroy}.\n   * @returns {Promise} See {@link Mapper#destroy}.\n   * @see Mapper#destroy\n   * @since 3.0.0\n   */\n  destroy (name, id, opts) {\n    return this.getMapper(name).destroy(id, opts)\n  }\n\n  /**\n   * Fired during {@link Container#destroyAll}. See\n   * {@link Container~beforeDestroyAllListener} for how to listen for this event.\n   *\n   * @event Container#beforeDestroyAll\n   * @see Container~beforeDestroyAllListener\n   * @see Container#destroyAll\n   */\n  /**\n   * Callback signature for the {@link Container#event:beforeDestroyAll} event.\n   *\n   * @example\n   * function onBeforeDestroyAll (mapperName, query, opts) {\n   *   // do something\n   * }\n   * store.on('beforeDestroyAll', onBeforeDestroyAll);\n   *\n   * @callback Container~beforeDestroyAllListener\n   * @param {string} name The `name` argument received by {@link Mapper#beforeDestroyAll}.\n   * @param {object} query The `query` argument received by {@link Mapper#beforeDestroyAll}.\n   * @param {object} opts The `opts` argument received by {@link Mapper#beforeDestroyAll}.\n   * @see Container#event:beforeDestroyAll\n   * @see Container#destroyAll\n   * @since 3.0.0\n   */\n  /**\n   * Fired during {@link Container#destroyAll}. See\n   * {@link Container~afterDestroyAllListener} for how to listen for this event.\n   *\n   * @event Container#afterDestroyAll\n   * @see Container~afterDestroyAllListener\n   * @see Container#destroyAll\n   */\n\n  /**\n   * Callback signature for the {@link Container#event:afterDestroyAll} event.\n   *\n   * @example\n   * function onAfterDestroyAll (mapperName, query, opts, result) {\n   *   // do something\n   * }\n   * store.on('afterDestroyAll', onAfterDestroyAll);\n   *\n   * @callback Container~afterDestroyAllListener\n   * @param {string} name The `name` argument received by {@link Mapper#afterDestroyAll}.\n   * @param {object} query The `query` argument received by {@link Mapper#afterDestroyAll}.\n   * @param {object} opts The `opts` argument received by {@link Mapper#afterDestroyAll}.\n   * @param {object} result The `result` argument received by {@link Mapper#afterDestroyAll}.\n   * @see Container#event:afterDestroyAll\n   * @see Container#destroyAll\n   * @since 3.0.0\n   */\n  /**\n   * Wrapper for {@link Mapper#destroyAll}.\n   *\n   * @example\n   * // Destroy all \"draft\" blog posts\n   * import { Container } from 'js-data';\n   * import RethinkDBAdapter from 'js-data-rethinkdb';\n   * const store = new Container();\n   * store.registerAdapter('rethinkdb', new RethinkDBAdapter(), { default: true });\n   * store.defineMapper('post');\n   *\n   * store.destroyAll('post', { status: 'draft' }).then(() => {\n   *   // All \"draft\" blog posts have been destroyed\n   * });\n   *\n   * @fires Container#beforeDestroyAll\n   * @fires Container#afterDestroyAll\n   * @method Container#destroyAll\n   * @param {string} name Name of the {@link Mapper} to target.\n   * @param {object} [query] See {@link Mapper#destroyAll}.\n   * @param {object} [opts] See {@link Mapper#destroyAll}.\n   * @returns {Promise} See {@link Mapper#destroyAll}.\n   * @see Mapper#destroyAll\n   * @since 3.0.0\n   */\n  destroyAll (name, query, opts) {\n    return this.getMapper(name).destroyAll(query, opts)\n  }\n\n  /**\n   * Fired during {@link Container#find}. See\n   * {@link Container~beforeFindListener} for how to listen for this event.\n   *\n   * @event Container#beforeFind\n   * @see Container~beforeFindListener\n   * @see Container#find\n   */\n  /**\n   * Callback signature for the {@link Container#event:beforeFind} event.\n   *\n   * @example\n   * function onBeforeFind (mapperName, id, opts) {\n   *   // do something\n   * }\n   * store.on('beforeFind', onBeforeFind);\n   *\n   * @callback Container~beforeFindListener\n   * @param {string} name The `name` argument received by {@link Mapper#beforeFind}.\n   * @param {string|number} id The `id` argument received by {@link Mapper#beforeFind}.\n   * @param {object} opts The `opts` argument received by {@link Mapper#beforeFind}.\n   * @see Container#event:beforeFind\n   * @see Container#find\n   * @since 3.0.0\n   */\n  /**\n   * Fired during {@link Container#find}. See\n   * {@link Container~afterFindListener} for how to listen for this event.\n   *\n   * @event Container#afterFind\n   * @see Container~afterFindListener\n   * @see Container#find\n   */\n\n  /**\n   * Callback signature for the {@link Container#event:afterFind} event.\n   *\n   * @example\n   * function onAfterFind (mapperName, id, opts, result) {\n   *   // do something\n   * }\n   * store.on('afterFind', onAfterFind);\n   *\n   * @callback Container~afterFindListener\n   * @param {string} name The `name` argument received by {@link Mapper#afterFind}.\n   * @param {string|number} id The `id` argument received by {@link Mapper#afterFind}.\n   * @param {object} opts The `opts` argument received by {@link Mapper#afterFind}.\n   * @param {object} result The `result` argument received by {@link Mapper#afterFind}.\n   * @see Container#event:afterFind\n   * @see Container#find\n   * @since 3.0.0\n   */\n  /**\n   * Wrapper for {@link Mapper#find}.\n   *\n   * @example\n   * import { Container } from 'js-data';\n   * import RethinkDBAdapter from 'js-data-rethinkdb';\n   * const store = new Container();\n   * store.registerAdapter('rethinkdb', new RethinkDBAdapter(), { default: true });\n   * store.defineMapper('post');\n   *\n   * store.find('post', 1).then((post) => {\n   *   console.log(post) // { id: 1, ...}\n   * });\n   *\n   * @fires Container#beforeFind\n   * @fires Container#afterFind\n   * @method Container#find\n   * @param {string} name Name of the {@link Mapper} to target.\n   * @param {(string|number)} id See {@link Mapper#find}.\n   * @param {object} [opts] See {@link Mapper#find}.\n   * @returns {Promise} See {@link Mapper#find}.\n   * @see Mapper#find\n   * @since 3.0.0\n   */\n  find (name, id, opts) {\n    return this.getMapper(name).find(id, opts)\n  }\n\n  /**\n   * Fired during {@link Container#findAll}. See\n   * {@link Container~beforeFindAllListener} for how to listen for this event.\n   *\n   * @event Container#beforeFindAll\n   * @see Container~beforeFindAllListener\n   * @see Container#findAll\n   */\n  /**\n   * Callback signature for the {@link Container#event:beforeFindAll} event.\n   *\n   * @example\n   * function onBeforeFindAll (mapperName, query, opts) {\n   *   // do something\n   * }\n   * store.on('beforeFindAll', onBeforeFindAll);\n   *\n   * @callback Container~beforeFindAllListener\n   * @param {string} name The `name` argument received by {@link Mapper#beforeFindAll}.\n   * @param {object} query The `query` argument received by {@link Mapper#beforeFindAll}.\n   * @param {object} opts The `opts` argument received by {@link Mapper#beforeFindAll}.\n   * @see Container#event:beforeFindAll\n   * @see Container#findAll\n   * @since 3.0.0\n   */\n  /**\n   * Fired during {@link Container#findAll}. See\n   * {@link Container~afterFindAllListener} for how to listen for this event.\n   *\n   * @event Container#afterFindAll\n   * @see Container~afterFindAllListener\n   * @see Container#findAll\n   */\n\n  /**\n   * Callback signature for the {@link Container#event:afterFindAll} event.\n   *\n   * @example\n   * function onAfterFindAll (mapperName, query, opts, result) {\n   *   // do something\n   * }\n   * store.on('afterFindAll', onAfterFindAll);\n   *\n   * @callback Container~afterFindAllListener\n   * @param {string} name The `name` argument received by {@link Mapper#afterFindAll}.\n   * @param {object} query The `query` argument received by {@link Mapper#afterFindAll}.\n   * @param {object} opts The `opts` argument received by {@link Mapper#afterFindAll}.\n   * @param {object} result The `result` argument received by {@link Mapper#afterFindAll}.\n   * @see Container#event:afterFindAll\n   * @see Container#findAll\n   * @since 3.0.0\n   */\n  /**\n   * Wrapper for {@link Mapper#createRecord}.\n   *\n   * @example\n   * // Find all \"published\" blog posts\n   * import { Container } from 'js-data';\n   * import RethinkDBAdapter from 'js-data-rethinkdb';\n   * const store = new Container();\n   * store.registerAdapter('rethinkdb', new RethinkDBAdapter(), { default: true });\n   * store.defineMapper('post');\n   *\n   * store.findAll('post', { status: 'published' }).then((posts) => {\n   *   console.log(posts); // [{ id: 1, ...}, ...]\n   * });\n   *\n   * @fires Container#beforeFindAll\n   * @fires Container#afterFindAll\n   * @method Container#findAll\n   * @param {string} name Name of the {@link Mapper} to target.\n   * @param {object} [query] See {@link Mapper#findAll}.\n   * @param {object} [opts] See {@link Mapper#findAll}.\n   * @returns {Promise} See {@link Mapper#findAll}.\n   * @see Mapper#findAll\n   * @since 3.0.0\n   */\n  findAll (name, query, opts) {\n    return this.getMapper(name).findAll(query, opts)\n  }\n\n  /**\n   * Wrapper for {@link Mapper#getSchema}.\n   *\n   * @method Container#getSchema\n   * @param {string} name Name of the {@link Mapper} to target.\n   * @returns {Schema} See {@link Mapper#getSchema}.\n   * @see Mapper#getSchema\n   * @since 3.0.0\n   */\n  getSchema (name) {\n    return this.getMapper(name).getSchema()\n  }\n\n  /**\n   * Wrapper for {@link Mapper#is}.\n   *\n   * @example\n   * import { Container } from 'js-data';\n   * const store = new Container();\n   * store.defineMapper('post');\n   * const post = store.createRecord();\n   *\n   * console.log(store.is('post', post)); // true\n   * // Equivalent to what's above\n   * console.log(post instanceof store.getMapper('post').recordClass); // true\n   *\n   * @method Container#is\n   * @param {string} name Name of the {@link Mapper} to target.\n   * @param {Object|Record} record See {@link Mapper#is}.\n   * @returns {boolean} See {@link Mapper#is}.\n   * @see Mapper#is\n   * @since 3.0.0\n   */\n  is (name, record) {\n    return this.getMapper(name).is(record)\n  }\n\n  /**\n   * Wrapper for {@link Mapper#sum}.\n   *\n   * @example\n   * import { Container } from 'js-data';\n   * import RethinkDBAdapter from 'js-data-rethinkdb';\n   * const store = new Container();\n   * store.registerAdapter('rethinkdb', new RethinkDBAdapter(), { default: true });\n   * store.defineMapper('purchase_order');\n   *\n   * store.sum('purchase_order', 'amount', { status: 'paid' }).then((amountPaid) => {\n   *   console.log(amountPaid); // e.g. 451125.34\n   * });\n   *\n   * @method Container#sum\n   * @param {string} name Name of the {@link Mapper} to target.\n   * @param {string} field See {@link Mapper#sum}.\n   * @param {object} [query] See {@link Mapper#sum}.\n   * @param {object} [opts] See {@link Mapper#sum}.\n   * @returns {Promise} See {@link Mapper#sum}.\n   * @see Mapper#sum\n   * @since 3.0.0\n   */\n  sum (name, field, query, opts) {\n    return this.getMapper(name).sum(field, query, opts)\n  }\n\n  /**\n   * Wrapper for {@link Mapper#toJSON}.\n   *\n   * @example\n   * import { Container } from 'js-data';\n   * import RethinkDBAdapter from 'js-data-rethinkdb';\n   * const store = new Container();\n   * store.registerAdapter('rethinkdb', new RethinkDBAdapter(), { default: true });\n   * store.defineMapper('person', {\n   *   schema: {\n   *     properties: {\n   *       name: { type: 'string' },\n   *       id: { type: 'string' }\n   *     }\n   *   }\n   * });\n   * const person = store.createRecord('person', { id: 1, name: 'John', foo: 'bar' });\n   * // \"foo\" is stripped by toJSON()\n   * console.log(store.toJSON('person', person)); // {\"id\":1,\"name\":\"John\"}\n   *\n   * store.defineMapper('personRelaxed', {\n   *   schema: {\n   *     properties: {\n   *       name: { type: 'string' },\n   *       id: { type: 'string' }\n   *     },\n   *     additionalProperties: true\n   *   }\n   * });\n   * const person2 = store.createRecord('personRelaxed', { id: 1, name: 'John', foo: 'bar' });\n   * // \"foo\" is not stripped by toJSON\n   * console.log(store.toJSON('personRelaxed', person2)); // {\"id\":1,\"name\":\"John\",\"foo\":\"bar\"}\n   *\n   * @method Container#toJSON\n   * @param {string} name Name of the {@link Mapper} to target.\n   * @param {Record|Record[]} records See {@link Mapper#toJSON}.\n   * @param {object} [opts] See {@link Mapper#toJSON}.\n   * @returns {Object|Object[]} See {@link Mapper#toJSON}.\n   * @see Mapper#toJSON\n   * @since 3.0.0\n   */\n  toJSON (name, records, opts) {\n    return this.getMapper(name).toJSON(records, opts)\n  }\n\n  /**\n   * Fired during {@link Container#update}. See\n   * {@link Container~beforeUpdateListener} for how to listen for this event.\n   *\n   * @event Container#beforeUpdate\n   * @see Container~beforeUpdateListener\n   * @see Container#update\n   */\n  /**\n   * Callback signature for the {@link Container#event:beforeUpdate} event.\n   *\n   * @example\n   * function onBeforeUpdate (mapperName, id, props, opts) {\n   *   // do something\n   * }\n   * store.on('beforeUpdate', onBeforeUpdate);\n   *\n   * @callback Container~beforeUpdateListener\n   * @param {string} name The `name` argument received by {@link Mapper#beforeUpdate}.\n   * @param {string|number} id The `id` argument received by {@link Mapper#beforeUpdate}.\n   * @param {object} props The `props` argument received by {@link Mapper#beforeUpdate}.\n   * @param {object} opts The `opts` argument received by {@link Mapper#beforeUpdate}.\n   * @see Container#event:beforeUpdate\n   * @see Container#update\n   * @since 3.0.0\n   */\n  /**\n   * Fired during {@link Container#update}. See\n   * {@link Container~afterUpdateListener} for how to listen for this event.\n   *\n   * @event Container#afterUpdate\n   * @see Container~afterUpdateListener\n   * @see Container#update\n   */\n\n  /**\n   * Callback signature for the {@link Container#event:afterUpdate} event.\n   *\n   * @example\n   * function onAfterUpdate (mapperName, id, props, opts, result) {\n   *   // do something\n   * }\n   * store.on('afterUpdate', onAfterUpdate);\n   *\n   * @callback Container~afterUpdateListener\n   * @param {string} name The `name` argument received by {@link Mapper#afterUpdate}.\n   * @param {string|number} id The `id` argument received by {@link Mapper#afterUpdate}.\n   * @param {object} props The `props` argument received by {@link Mapper#afterUpdate}.\n   * @param {object} opts The `opts` argument received by {@link Mapper#afterUpdate}.\n   * @param {object} result The `result` argument received by {@link Mapper#afterUpdate}.\n   * @see Container#event:afterUpdate\n   * @see Container#update\n   * @since 3.0.0\n   */\n  /**\n   * Wrapper for {@link Mapper#update}.\n   *\n   * @example\n   * import { Container } from 'js-data';\n   * import RethinkDBAdapter from 'js-data-rethinkdb';\n   * const store = new Container();\n   * store.registerAdapter('rethinkdb', new RethinkDBAdapter(), { default: true });\n   * store.defineMapper('post');\n   *\n   * store.update('post', 1234, {\n   *   status: 'published',\n   *   published_at: new Date()\n   * }).then((post) => {\n   *   console.log(post); // { id: 1234, status: 'published', ... }\n   * });\n   *\n   * @fires Container#beforeUpdate\n   * @fires Container#afterUpdate\n   * @method Container#update\n   * @param {string} name Name of the {@link Mapper} to target.\n   * @param {(string|number)} id See {@link Mapper#update}.\n   * @param {object} props See {@link Mapper#update}.\n   * @param {object} [opts] See {@link Mapper#update}.\n   * @returns {Promise} See {@link Mapper#update}.\n   * @see Mapper#update\n   * @since 3.0.0\n   * @tutorial [\"http://www.js-data.io/v3.0/docs/saving-data\",\"Saving data\"]\n   */\n  update (name, id, props, opts) {\n    return this.getMapper(name).update(id, props, opts)\n  }\n\n  /**\n   * Fired during {@link Container#updateAll}. See\n   * {@link Container~beforeUpdateAllListener} for how to listen for this event.\n   *\n   * @event Container#beforeUpdateAll\n   * @see Container~beforeUpdateAllListener\n   * @see Container#updateAll\n   */\n  /**\n   * Callback signature for the {@link Container#event:beforeUpdateAll} event.\n   *\n   * @example\n   * function onBeforeUpdateAll (mapperName, props, query, opts) {\n   *   // do something\n   * }\n   * store.on('beforeUpdateAll', onBeforeUpdateAll);\n   *\n   * @callback Container~beforeUpdateAllListener\n   * @param {string} name The `name` argument received by {@link Mapper#beforeUpdateAll}.\n   * @param {object} props The `props` argument received by {@link Mapper#beforeUpdateAll}.\n   * @param {object} query The `query` argument received by {@link Mapper#beforeUpdateAll}.\n   * @param {object} opts The `opts` argument received by {@link Mapper#beforeUpdateAll}.\n   * @see Container#event:beforeUpdateAll\n   * @see Container#updateAll\n   * @since 3.0.0\n   */\n  /**\n   * Fired during {@link Container#updateAll}. See\n   * {@link Container~afterUpdateAllListener} for how to listen for this event.\n   *\n   * @event Container#afterUpdateAll\n   * @see Container~afterUpdateAllListener\n   * @see Container#updateAll\n   */\n\n  /**\n   * Callback signature for the {@link Container#event:afterUpdateAll} event.\n   *\n   * @example\n   * function onAfterUpdateAll (mapperName, props, query, opts, result) {\n   *   // do something\n   * }\n   * store.on('afterUpdateAll', onAfterUpdateAll);\n   *\n   * @callback Container~afterUpdateAllListener\n   * @param {string} name The `name` argument received by {@link Mapper#afterUpdateAll}.\n   * @param {object} props The `props` argument received by {@link Mapper#afterUpdateAll}.\n   * @param {object} query The `query` argument received by {@link Mapper#afterUpdateAll}.\n   * @param {object} opts The `opts` argument received by {@link Mapper#afterUpdateAll}.\n   * @param {object} result The `result` argument received by {@link Mapper#afterUpdateAll}.\n   * @see Container#event:afterUpdateAll\n   * @see Container#updateAll\n   * @since 3.0.0\n   */\n  /**\n   * Wrapper for {@link Mapper#updateAll}.\n   *\n   * @example\n   * // Turn all of John's blog posts into drafts.\n   * import { Container } from 'js-data';\n   * import RethinkDBAdapter from 'js-data-rethinkdb';\n   * const store = new Container();\n   * store.registerAdapter('rethinkdb', new RethinkDBAdapter(), { default: true });\n   * store.defineMapper('post');\n   *\n   * const update = { status: draft: published_at: null };\n   * const query = { userId: 1234 };\n   * store.updateAll('post', update, query).then((posts) => {\n   *   console.log(posts); // [...]\n   * });\n   *\n   * @fires Container#beforeUpdateAll\n   * @fires Container#afterUpdateAll\n   * @method Container#updateAll\n   * @param {string} name Name of the {@link Mapper} to target.\n   * @param {object} props See {@link Mapper#updateAll}.\n   * @param {object} [query] See {@link Mapper#updateAll}.\n   * @param {object} [opts] See {@link Mapper#updateAll}.\n   * @returns {Promise} See {@link Mapper#updateAll}.\n   * @see Mapper#updateAll\n   * @since 3.0.0\n   */\n  updateAll (name, props, query, opts) {\n    return this.getMapper(name).updateAll(props, query, opts)\n  }\n\n  /**\n   * Fired during {@link Container#updateMany}. See\n   * {@link Container~beforeUpdateManyListener} for how to listen for this event.\n   *\n   * @event Container#beforeUpdateMany\n   * @see Container~beforeUpdateManyListener\n   * @see Container#updateMany\n   */\n  /**\n   * Callback signature for the {@link Container#event:beforeUpdateMany} event.\n   *\n   * @example\n   * function onBeforeUpdateMany (mapperName, records, opts) {\n   *   // do something\n   * }\n   * store.on('beforeUpdateMany', onBeforeUpdateMany);\n   *\n   * @callback Container~beforeUpdateManyListener\n   * @param {string} name The `name` argument received by {@link Mapper#beforeUpdateMany}.\n   * @param {object} records The `records` argument received by {@link Mapper#beforeUpdateMany}.\n   * @param {object} opts The `opts` argument received by {@link Mapper#beforeUpdateMany}.\n   * @see Container#event:beforeUpdateMany\n   * @see Container#updateMany\n   * @since 3.0.0\n   */\n  /**\n   * Fired during {@link Container#updateMany}. See\n   * {@link Container~afterUpdateManyListener} for how to listen for this event.\n   *\n   * @event Container#afterUpdateMany\n   * @see Container~afterUpdateManyListener\n   * @see Container#updateMany\n   */\n\n  /**\n   * Callback signature for the {@link Container#event:afterUpdateMany} event.\n   *\n   * @example\n   * function onAfterUpdateMany (mapperName, records, opts, result) {\n   *   // do something\n   * }\n   * store.on('afterUpdateMany', onAfterUpdateMany);\n   *\n   * @callback Container~afterUpdateManyListener\n   * @param {string} name The `name` argument received by {@link Mapper#afterUpdateMany}.\n   * @param {object} records The `records` argument received by {@link Mapper#afterUpdateMany}.\n   * @param {object} opts The `opts` argument received by {@link Mapper#afterUpdateMany}.\n   * @param {object} result The `result` argument received by {@link Mapper#afterUpdateMany}.\n   * @see Container#event:afterUpdateMany\n   * @see Container#updateMany\n   * @since 3.0.0\n   */\n  /**\n   * Wrapper for {@link Mapper#updateMany}.\n   *\n   * @example\n   * import { Container } from 'js-data';\n   * import RethinkDBAdapter from 'js-data-rethinkdb';\n   * const store = new Container();\n   * store.registerAdapter('rethinkdb', new RethinkDBAdapter(), { default: true });\n   * store.defineMapper('post');\n   *\n   * store.updateMany('post', [\n   *   { id: 1234, status: 'draft' },\n   *   { id: 2468, status: 'published', published_at: new Date() }\n   * ]).then((posts) => {\n   *   console.log(posts); // [...]\n   * });\n   *\n   * @fires Container#beforeUpdateMany\n   * @fires Container#afterUpdateMany\n   * @method Container#updateMany\n   * @param {string} name Name of the {@link Mapper} to target.\n   * @param {(Object[]|Record[])} records See {@link Mapper#updateMany}.\n   * @param {object} [opts] See {@link Mapper#updateMany}.\n   * @returns {Promise} See {@link Mapper#updateMany}.\n   * @see Mapper#updateMany\n   * @since 3.0.0\n   */\n  updateMany (name, record, opts) {\n    return this.getMapper(name).updateMany(record, opts)\n  }\n\n  /**\n   * Wrapper for {@link Mapper#validate}.\n   *\n   * @example\n   * import { Container } from 'js-data';\n   * const store = new Container();\n   * store.defineMapper('post', {\n   *   schema: {\n   *     properties: {\n   *       name: { type: 'string' },\n   *       id: { type: 'string' }\n   *     }\n   *   }\n   * });\n   * let errors = store.validate('post', { name: 'John' });\n   * console.log(errors); // undefined\n   * errors = store.validate('post', { name: 123 });\n   * console.log(errors); // [{ expected: 'one of (string)', actual: 'number', path: 'name' }]\n   *\n   * @method Container#validate\n   * @param {string} name Name of the {@link Mapper} to target.\n   * @param {(Object[]|Record[])} records See {@link Mapper#validate}.\n   * @param {object} [opts] See {@link Mapper#validate}.\n   * @returns {Promise} See {@link Mapper#validate}.\n   * @see Mapper#validate\n   * @since 3.0.0\n   */\n  validate (name, record, opts) {\n    return this.getMapper(name).validate(record, opts)\n  }\n}\n","import utils from './utils'\n\nimport {\n  belongsToType,\n  hasManyType,\n  hasOneType\n} from './decorators'\nimport { proxiedMapperMethods, Container } from './Container'\nimport Collection from './Collection'\n\nconst DOMAIN = 'SimpleStore'\nconst proxiedCollectionMethods = [\n  'add',\n  'between',\n  'createIndex',\n  'filter',\n  'get',\n  'getAll',\n  'prune',\n  'query',\n  'toJSON',\n  'unsaved'\n]\nconst ownMethodsForScoping = [\n  'addToCache',\n  'cachedFind',\n  'cachedFindAll',\n  'cacheFind',\n  'cacheFindAll',\n  'hashQuery'\n]\n\nconst cachedFn = function (name, hashOrId, opts) {\n  const cached = this._completedQueries[name][hashOrId]\n  if (utils.isFunction(cached)) {\n    return cached(name, hashOrId, opts)\n  }\n  return cached\n}\n\nconst SIMPLESTORE_DEFAULTS = {\n  /**\n   * Whether to use the pending query if a `find` request for the specified\n   * record is currently underway. Can be set to `true`, `false`, or to a\n   * function that returns `true` or `false`.\n   *\n   * @default true\n   * @name SimpleStore#usePendingFind\n   * @since 3.0.0\n   * @type {boolean|Function}\n   */\n  usePendingFind: true,\n\n  /**\n   * Whether to use the pending query if a `findAll` request for the given query\n   * is currently underway. Can be set to `true`, `false`, or to a function that\n   * returns `true` or `false`.\n   *\n   * @default true\n   * @name SimpleStore#usePendingFindAll\n   * @since 3.0.0\n   * @type {boolean|Function}\n   */\n  usePendingFindAll: true\n}\n\n/**\n * The `SimpleStore` class is an extension of {@link Container}. Not only does\n * `SimpleStore` manage mappers, but also collections. `SimpleStore` implements the\n * asynchronous {@link Mapper} methods, such as {@link Mapper#find} and\n * {@link Mapper#create}. If you use the asynchronous `SimpleStore` methods\n * instead of calling them directly on the mappers, then the results of the\n * method calls will be inserted into the store's collections. You can think of\n * a `SimpleStore` as an [Identity Map](https://en.wikipedia.org/wiki/Identity_map_pattern)\n * for the [ORM](https://en.wikipedia.org/wiki/Object-relational_mapping)\n * (the Mappers).\n *\n * ```javascript\n * import { SimpleStore } from 'js-data';\n * ```\n *\n * @example\n * import { SimpleStore } from 'js-data';\n * import { HttpAdapter } from 'js-data-http';\n * const store = new SimpleStore();\n *\n * // SimpleStore#defineMapper returns a direct reference to the newly created\n * // Mapper.\n * const UserMapper = store.defineMapper('user');\n *\n * // SimpleStore#as returns the store scoped to a particular Mapper.\n * const UserStore = store.as('user');\n *\n * // Call \"find\" on \"UserMapper\" (Stateless ORM)\n * UserMapper.find(1).then((user) => {\n *   // retrieved a \"user\" record via the http adapter, but that's it\n *\n *   // Call \"find\" on \"store\" targeting \"user\" (Stateful SimpleStore)\n *   return store.find('user', 1); // same as \"UserStore.find(1)\"\n * }).then((user) => {\n *   // not only was a \"user\" record retrieved, but it was added to the\n *   // store's \"user\" collection\n *   const cachedUser = store.getCollection('user').get(1);\n *   console.log(user === cachedUser); // true\n * });\n *\n * @class SimpleStore\n * @extends Container\n * @param {object} [opts] Configuration options. See {@link Container}.\n * @param {boolean} [opts.collectionClass={@link Collection}] See {@link SimpleStore#collectionClass}.\n * @param {boolean} [opts.debug=false] See {@link Component#debug}.\n * @param {boolean|Function} [opts.usePendingFind=true] See {@link SimpleStore#usePendingFind}.\n * @param {boolean|Function} [opts.usePendingFindAll=true] See {@link SimpleStore#usePendingFindAll}.\n * @returns {SimpleStore}\n * @see Container\n * @since 3.0.0\n * @tutorial [\"http://www.js-data.io/v3.0/docs/components-of-jsdata#SimpleStore\",\"Components of JSData: SimpleStore\"]\n * @tutorial [\"http://www.js-data.io/v3.0/docs/working-with-the-SimpleStore\",\"Working with the SimpleStore\"]\n * @tutorial [\"http://www.js-data.io/v3.0/docs/jsdata-and-the-browser\",\"Notes on using JSData in the Browser\"]\n */\nexport default class SimpleStore extends Container {\n  constructor (opts = {}) {\n    // Fill in any missing options with the defaults\n    utils.fillIn(opts, SIMPLESTORE_DEFAULTS)\n    super(opts)\n\n    this.collectionClass = this.collectionClass || Collection\n    this._collections = {}\n    this._pendingQueries = {}\n    this._completedQueries = {}\n  }\n\n  /**\n   * Internal method used to handle Mapper responses.\n   *\n   * @method SimpleStore#_end\n   * @private\n   * @param {string} name Name of the {@link Collection} to which to\n   * add the data.\n   * @param {object} result The result from a Mapper.\n   * @param {object} [opts] Configuration options.\n   * @returns {(Object|Array)} Result.\n   */\n  _end (name, result, opts) {\n    let data = opts.raw ? result.data : result\n    if (data && utils.isFunction(this.addToCache)) {\n      data = this.addToCache(name, data, opts)\n      if (opts.raw) {\n        result.data = data\n      } else {\n        result = data\n      }\n    }\n    return result\n  }\n\n  /**\n   * Register a new event listener on this SimpleStore.\n   *\n   * Proxy for {@link Container#on}. If an event was emitted by a Mapper or\n   * Collection in the SimpleStore, then the name of the Mapper or Collection will\n   * be prepended to the arugments passed to the provided event handler.\n   *\n   * @example\n   * // Listen for all \"afterCreate\" events in a SimpleStore\n   * store.on('afterCreate', (mapperName, props, opts, result) => {\n   *   console.log(mapperName); // \"post\"\n   *   console.log(props.id); // undefined\n   *   console.log(result.id); // 1234\n   * });\n   * store.create('post', { title: 'Modeling your data' }).then((post) => {\n   *   console.log(post.id); // 1234\n   * });\n   *\n   * @example\n   * // Listen for the \"add\" event on a collection\n   * store.on('add', (mapperName, records) => {\n   *   console.log(records); // [...]\n   * });\n   *\n   * @example\n   * // Listen for \"change\" events on a record\n   * store.on('change', (mapperName, record, changes) => {\n   *   console.log(changes); // { changed: { title: 'Modeling your data' } }\n   * });\n   * post.title = 'Modeling your data';\n   *\n   * @method SimpleStore#on\n   * @param {string} event Name of event to subsribe to.\n   * @param {Function} listener Listener function to handle the event.\n   * @param {*} [ctx] Optional content in which to invoke the listener.\n   */\n\n  /**\n   * Used to bind to events emitted by collections in this store.\n   *\n   * @method SimpleStore#_onCollectionEvent\n   * @private\n   * @param {string} name Name of the collection that emitted the event.\n   * @param {...*} [args] Args passed to {@link Collection#emit}.\n   */\n  _onCollectionEvent (name, ...args) {\n    const type = args.shift()\n    this.emit(type, name, ...args)\n  }\n\n  /**\n   * This method takes the data received from {@link SimpleStore#find},\n   * {@link SimpleStore#findAll}, {@link SimpleStore#update}, etc., and adds the\n   * data to the store. _You don't need to call this method directly._\n   *\n   * If you're using the http adapter and your response data is in an unexpected\n   * format, you may need to override this method so the right data gets added\n   * to the store.\n   *\n   * @example\n   * const store = new SimpleStore({\n   *   addToCache (mapperName, data, opts) {\n   *     // Let's say for a particular Resource, response data is in a weird format\n   *     if (name === 'comment') {\n   *       // Re-assign the variable to add the correct records into the stores\n   *       data = data.items;\n   *     }\n   *     // Now perform default behavior\n   *     return SimpleStore.prototype.addToCache.call(this, mapperName, data, opts);\n   *   }\n   * });\n   *\n   * @example\n   * // Extend using ES2015 class syntax.\n   * class MyStore extends SimpleStore {\n   *   addToCache (mapperName, data, opts) {\n   *     // Let's say for a particular Resource, response data is in a weird format\n   *     if (name === 'comment') {\n   *       // Re-assign the variable to add the correct records into the stores\n   *       data = data.items;\n   *     }\n   *     // Now perform default behavior\n   *     return super.addToCache(mapperName, data, opts);\n   *   }\n   * }\n   * const store = new MyStore();\n   *\n   * @method SimpleStore#addToCache\n   * @param {string} name Name of the {@link Mapper} to target.\n   * @param {*} data Data from which data should be selected for add.\n   * @param {object} [opts] Configuration options.\n   */\n  addToCache (name, data, opts) {\n    return this.getCollection(name).add(data, opts)\n  }\n\n  /**\n   * Return the store scoped to a particular mapper/collection pair.\n   *\n   * @example <caption>SimpleStore.as</caption>\n   * const JSData = require('js-data');\n   * const { SimpleStore } = JSData;\n   * console.log('Using JSData v' + JSData.version.full);\n   *\n   * const store = new SimpleStore();\n   * const UserMapper = store.defineMapper('user');\n   * const UserStore = store.as('user');\n   *\n   * const user1 = store.createRecord('user', { name: 'John' });\n   * const user2 = UserStore.createRecord({ name: 'John' });\n   * const user3 = UserMapper.createRecord({ name: 'John' });\n   * console.log(user1 === user2);\n   * console.log(user2 === user3);\n   * console.log(user1 === user3);\n   *\n   * @method SimpleStore#as\n   * @param {string} name Name of the {@link Mapper}.\n   * @returns {Object} The store, scoped to a particular Mapper/Collection pair.\n   * @since 3.0.0\n   */\n  as (name) {\n    const props = {}\n    const original = this\n    const methods = ownMethodsForScoping\n      .concat(proxiedMapperMethods)\n      .concat(proxiedCollectionMethods)\n\n    methods.forEach(function (method) {\n      props[method] = {\n        writable: true,\n        value (...args) {\n          return original[method](name, ...args)\n        }\n      }\n    })\n    props.getMapper = {\n      writable: true,\n      value () {\n        return original.getMapper(name)\n      }\n    }\n    props.getCollection = {\n      writable: true,\n      value () {\n        return original.getCollection(name)\n      }\n    }\n    return Object.create(this, props)\n  }\n\n  /**\n   * Retrieve a cached `find` result, if any. This method is called during\n   * {@link SimpleStore#find} to determine if {@link Mapper#find} needs to be\n   * called. If this method returns `undefined` then {@link Mapper#find} will\n   * be called. Otherwise {@link SimpleStore#find} will immediately resolve with\n   * the return value of this method.\n   *\n   * When using {@link SimpleStore} in the browser, you can override this method\n   * to implement your own cache-busting strategy.\n   *\n   * @example\n   * const store = new SimpleStore({\n   *   cachedFind (mapperName, id, opts) {\n   *     // Let's say for a particular Resource, we always want to pull fresh from the server\n   *     if (mapperName === 'schedule') {\n   *       // Return undefined to trigger a Mapper#find call\n   *       return;\n   *     }\n   *     // Otherwise perform default behavior\n   *     return SimpleStore.prototype.cachedFind.call(this, mapperName, id, opts);\n   *   }\n   * });\n   *\n   * @example\n   * // Extend using ES2015 class syntax.\n   * class MyStore extends SimpleStore {\n   *   cachedFind (mapperName, id, opts) {\n   *     // Let's say for a particular Resource, we always want to pull fresh from the server\n   *     if (mapperName === 'schedule') {\n   *       // Return undefined to trigger a Mapper#find call\n   *       return;\n   *     }\n   *     // Otherwise perform default behavior\n   *     return super.cachedFind(mapperName, id, opts);\n   *   }\n   * }\n   * const store = new MyStore();\n   *\n   * @method SimpleStore#cachedFind\n   * @param {string} name The `name` argument passed to {@link SimpleStore#find}.\n   * @param {(string|number)} id The `id` argument passed to {@link SimpleStore#find}.\n   * @param {object} opts The `opts` argument passed to {@link SimpleStore#find}.\n   * @since 3.0.0\n   */\n  cachedFind = cachedFn\n\n  /**\n   * Retrieve a cached `findAll` result, if any. This method is called during\n   * {@link SimpleStore#findAll} to determine if {@link Mapper#findAll} needs to be\n   * called. If this method returns `undefined` then {@link Mapper#findAll} will\n   * be called. Otherwise {@link SimpleStore#findAll} will immediately resolve with\n   * the return value of this method.\n   *\n   * When using {@link SimpleStore} in the browser, you can override this method\n   * to implement your own cache-busting strategy.\n   *\n   * @example\n   * const store = new SimpleStore({\n   *   cachedFindAll (mapperName, hash, opts) {\n   *     // Let's say for a particular Resource, we always want to pull fresh from the server\n   *     if (mapperName === 'schedule') {\n   *       // Return undefined to trigger a Mapper#findAll call\n   *       return undefined;\n   *     }\n   *     // Otherwise perform default behavior\n   *     return SimpleStore.prototype.cachedFindAll.call(this, mapperName, hash, opts);\n   *   }\n   * });\n   *\n   * @example\n   * // Extend using ES2015 class syntax.\n   * class MyStore extends SimpleStore {\n   *   cachedFindAll (mapperName, hash, opts) {\n   *     // Let's say for a particular Resource, we always want to pull fresh from the server\n   *     if (mapperName === 'schedule') {\n   *       // Return undefined to trigger a Mapper#findAll call\n   *       return undefined;\n   *     }\n   *     // Otherwise perform default behavior\n   *     return super.cachedFindAll(mapperName, hash, opts);\n   *   }\n   * }\n   * const store = new MyStore();\n   *\n   * @method SimpleStore#cachedFindAll\n   * @param {string} name The `name` argument passed to {@link SimpleStore#findAll}.\n   * @param {string} hash The result of calling {@link SimpleStore#hashQuery} on\n   * the `query` argument passed to {@link SimpleStore#findAll}.\n   * @param {object} opts The `opts` argument passed to {@link SimpleStore#findAll}.\n   * @since 3.0.0\n   */\n  cachedFindAll = cachedFn\n\n  /**\n   * Mark a {@link Mapper#find} result as cached by adding an entry to\n   * {@link SimpleStore#_completedQueries}. By default, once a `find` entry is\n   * added it means subsequent calls to the same Resource with the same `id`\n   * argument will immediately resolve with the result of calling\n   * {@link SimpleStore#get} instead of delegating to {@link Mapper#find}.\n   *\n   * As part of implementing your own caching strategy, you may choose to\n   * override this method.\n   *\n   * @example\n   * const store = new SimpleStore({\n   *   cacheFind (mapperName, data, id, opts) {\n   *     // Let's say for a particular Resource, we always want to pull fresh from the server\n   *     if (mapperName === 'schedule') {\n   *       // Return without saving an entry to SimpleStore#_completedQueries\n   *       return;\n   *     }\n   *     // Otherwise perform default behavior\n   *     return SimpleStore.prototype.cacheFind.call(this, mapperName, data, id, opts);\n   *   }\n   * });\n   *\n   * @example\n   * // Extend using ES2015 class syntax.\n   * class MyStore extends SimpleStore {\n   *   cacheFind (mapperName, data, id, opts) {\n   *     // Let's say for a particular Resource, we always want to pull fresh from the server\n   *     if (mapperName === 'schedule') {\n   *       // Return without saving an entry to SimpleStore#_completedQueries\n   *       return;\n   *     }\n   *     // Otherwise perform default behavior\n   *     return super.cacheFind(mapperName, data, id, opts);\n   *   }\n   * }\n   * const store = new MyStore();\n   *\n   * @method SimpleStore#cacheFind\n   * @param {string} name The `name` argument passed to {@link SimpleStore#find}.\n   * @param {*} data The result to cache.\n   * @param {(string|number)} id The `id` argument passed to {@link SimpleStore#find}.\n   * @param {object} opts The `opts` argument passed to {@link SimpleStore#find}.\n   * @since 3.0.0\n   */\n  cacheFind (name, data, id, opts) {\n    this._completedQueries[name][id] = (name, id, opts) => this.get(name, id)\n  }\n\n  /**\n   * Mark a {@link Mapper#findAll} result as cached by adding an entry to\n   * {@link SimpleStore#_completedQueries}. By default, once a `findAll` entry is\n   * added it means subsequent calls to the same Resource with the same `query`\n   * argument will immediately resolve with the result of calling\n   * {@link SimpleStore#filter} instead of delegating to {@link Mapper#findAll}.\n   *\n   * As part of implementing your own caching strategy, you may choose to\n   * override this method.\n   *\n   * @example\n   * const store = new SimpleStore({\n   *   cachedFindAll (mapperName, data, hash, opts) {\n   *     // Let's say for a particular Resource, we always want to pull fresh from the server\n   *     if (mapperName === 'schedule') {\n   *       // Return without saving an entry to SimpleStore#_completedQueries\n   *       return;\n   *     }\n   *     // Otherwise perform default behavior.\n   *     return SimpleStore.prototype.cachedFindAll.call(this, mapperName, data, hash, opts);\n   *   }\n   * });\n   *\n   * @example\n   * // Extend using ES2015 class syntax.\n   * class MyStore extends SimpleStore {\n   *   cachedFindAll (mapperName, data, hash, opts) {\n   *     // Let's say for a particular Resource, we always want to pull fresh from the server\n   *     if (mapperName === 'schedule') {\n   *       // Return without saving an entry to SimpleStore#_completedQueries\n   *       return;\n   *     }\n   *     // Otherwise perform default behavior.\n   *     return super.cachedFindAll(mapperName, data, hash, opts);\n   *   }\n   * }\n   * const store = new MyStore();\n   *\n   * @method SimpleStore#cacheFindAll\n   * @param {string} name The `name` argument passed to {@link SimpleStore#findAll}.\n   * @param {*} data The result to cache.\n   * @param {string} hash The result of calling {@link SimpleStore#hashQuery} on\n   * the `query` argument passed to {@link SimpleStore#findAll}.\n   * @param {object} opts The `opts` argument passed to {@link SimpleStore#findAll}.\n   * @since 3.0.0\n   */\n  cacheFindAll (name, data, hash, opts) {\n    this._completedQueries[name][hash] = (name, hash, opts) => this.filter(name, utils.fromJson(hash))\n  }\n\n  /**\n   * Remove __all__ records from the in-memory store and reset\n   * {@link SimpleStore#_completedQueries}.\n   *\n   * @method SimpleStore#clear\n   * @returns {Object} Object containing all records that were in the store.\n   * @see SimpleStore#remove\n   * @see SimpleStore#removeAll\n   * @since 3.0.0\n   */\n  clear () {\n    const removed = {}\n    utils.forOwn(this._collections, (collection, name) => {\n      removed[name] = collection.removeAll()\n      this._completedQueries[name] = {}\n    })\n    return removed\n  }\n\n  /**\n   * Fired during {@link SimpleStore#create}. See\n   * {@link SimpleStore~beforeCreateListener} for how to listen for this event.\n   *\n   * @event SimpleStore#beforeCreate\n   * @see SimpleStore~beforeCreateListener\n   * @see SimpleStore#create\n   */\n  /**\n   * Callback signature for the {@link SimpleStore#event:beforeCreate} event.\n   *\n   * @example\n   * function onBeforeCreate (mapperName, props, opts) {\n   *   // do something\n   * }\n   * store.on('beforeCreate', onBeforeCreate);\n   *\n   * @callback SimpleStore~beforeCreateListener\n   * @param {string} name The `name` argument received by {@link Mapper#beforeCreate}.\n   * @param {object} props The `props` argument received by {@link Mapper#beforeCreate}.\n   * @param {object} opts The `opts` argument received by {@link Mapper#beforeCreate}.\n   * @see SimpleStore#event:beforeCreate\n   * @see SimpleStore#create\n   * @since 3.0.0\n   */\n  /**\n   * Fired during {@link SimpleStore#create}. See\n   * {@link SimpleStore~afterCreateListener} for how to listen for this event.\n   *\n   * @event SimpleStore#afterCreate\n   * @see SimpleStore~afterCreateListener\n   * @see SimpleStore#create\n   */\n\n  /**\n   * Callback signature for the {@link SimpleStore#event:afterCreate} event.\n   *\n   * @example\n   * function onAfterCreate (mapperName, props, opts, result) {\n   *   // do something\n   * }\n   * store.on('afterCreate', onAfterCreate);\n   *\n   * @callback SimpleStore~afterCreateListener\n   * @param {string} name The `name` argument received by {@link Mapper#afterCreate}.\n   * @param {object} props The `props` argument received by {@link Mapper#afterCreate}.\n   * @param {object} opts The `opts` argument received by {@link Mapper#afterCreate}.\n   * @param {object} result The `result` argument received by {@link Mapper#afterCreate}.\n   * @see SimpleStore#event:afterCreate\n   * @see SimpleStore#create\n   * @since 3.0.0\n   */\n  /**\n   * Wrapper for {@link Mapper#create}. Adds the created record to the store.\n   *\n   * @example\n   * import { SimpleStore } from 'js-data';\n   * import { HttpAdapter } from 'js-data-http';\n   *\n   * const store = new SimpleStore();\n   * store.registerAdapter('http', new HttpAdapter(), { default: true });\n   *\n   * store.defineMapper('book');\n   *\n   * // Since this example uses the http adapter, we'll get something like:\n   * //\n   * //   POST /book {\"author_id\":1234,...}\n   * store.create('book', {\n   *   author_id: 1234,\n   *   edition: 'First Edition',\n   *   title: 'Respect your Data'\n   * }).then((book) => {\n   *   console.log(book.id); // 120392\n   *   console.log(book.title); // \"Respect your Data\"\n   * });\n   *\n   * @fires SimpleStore#beforeCreate\n   * @fires SimpleStore#afterCreate\n   * @fires SimpleStore#add\n   * @method SimpleStore#create\n   * @param {string} name Name of the {@link Mapper} to target.\n   * @param {object} record Passed to {@link Mapper#create}.\n   * @param {object} [opts] Passed to {@link Mapper#create}. See\n   * {@link Mapper#create} for more configuration options.\n   * @returns {Promise} Resolves with the result of the create.\n   * @since 3.0.0\n   */\n  create (name, record, opts = {}) {\n    return super.create(name, record, opts)\n      .then((result) => this._end(name, result, opts))\n  }\n\n  /**\n   * Fired during {@link SimpleStore#createMany}. See\n   * {@link SimpleStore~beforeCreateManyListener} for how to listen for this event.\n   *\n   * @event SimpleStore#beforeCreateMany\n   * @see SimpleStore~beforeCreateManyListener\n   * @see SimpleStore#createMany\n   */\n  /**\n   * Callback signature for the {@link SimpleStore#event:beforeCreateMany} event.\n   *\n   * @example\n   * function onBeforeCreateMany (mapperName, records, opts) {\n   *   // do something\n   * }\n   * store.on('beforeCreateMany', onBeforeCreateMany);\n   *\n   * @callback SimpleStore~beforeCreateManyListener\n   * @param {string} name The `name` argument received by {@link Mapper#beforeCreateMany}.\n   * @param {object} records The `records` argument received by {@link Mapper#beforeCreateMany}.\n   * @param {object} opts The `opts` argument received by {@link Mapper#beforeCreateMany}.\n   * @see SimpleStore#event:beforeCreateMany\n   * @see SimpleStore#createMany\n   * @since 3.0.0\n   */\n  /**\n   * Fired during {@link SimpleStore#createMany}. See\n   * {@link SimpleStore~afterCreateManyListener} for how to listen for this event.\n   *\n   * @event SimpleStore#afterCreateMany\n   * @see SimpleStore~afterCreateManyListener\n   * @see SimpleStore#createMany\n   */\n\n  /**\n   * Callback signature for the {@link SimpleStore#event:afterCreateMany} event.\n   *\n   * @example\n   * function onAfterCreateMany (mapperName, records, opts, result) {\n   *   // do something\n   * }\n   * store.on('afterCreateMany', onAfterCreateMany);\n   *\n   * @callback SimpleStore~afterCreateManyListener\n   * @param {string} name The `name` argument received by {@link Mapper#afterCreateMany}.\n   * @param {object} records The `records` argument received by {@link Mapper#afterCreateMany}.\n   * @param {object} opts The `opts` argument received by {@link Mapper#afterCreateMany}.\n   * @param {object} result The `result` argument received by {@link Mapper#afterCreateMany}.\n   * @see SimpleStore#event:afterCreateMany\n   * @see SimpleStore#createMany\n   * @since 3.0.0\n   */\n  /**\n   * Wrapper for {@link Mapper#createMany}. Adds the created records to the\n   * store.\n   *\n   * @example\n   * import { SimpleStore } from 'js-data';\n   * import { HttpAdapter } from 'js-data-http';\n   *\n   * const store = new SimpleStore();\n   * store.registerAdapter('http', new HttpAdapter(), { default: true });\n   *\n   * store.defineMapper('book');\n   *\n   * // Since this example uses the http adapter, we'll get something like:\n   * //\n   * //   POST /book [{\"author_id\":1234,...},{...}]\n   * store.createMany('book', [{\n   *   author_id: 1234,\n   *   edition: 'First Edition',\n   *   title: 'Respect your Data'\n   * }, {\n   *   author_id: 1234,\n   *   edition: 'Second Edition',\n   *   title: 'Respect your Data'\n   * }]).then((books) => {\n   *   console.log(books[0].id); // 142394\n   *   console.log(books[0].title); // \"Respect your Data\"\n   * });\n   *\n   * @fires SimpleStore#beforeCreateMany\n   * @fires SimpleStore#afterCreateMany\n   * @fires SimpleStore#add\n   * @method SimpleStore#createMany\n   * @param {string} name Name of the {@link Mapper} to target.\n   * @param {array} records Passed to {@link Mapper#createMany}.\n   * @param {object} [opts] Passed to {@link Mapper#createMany}. See\n   * {@link Mapper#createMany} for more configuration options.\n   * @returns {Promise} Resolves with the result of the create.\n   * @since 3.0.0\n   */\n  createMany (name, records, opts = {}) {\n    return super.createMany(name, records, opts)\n      .then((result) => this._end(name, result, opts))\n  }\n\n  defineMapper (name, opts) {\n    const self = this\n    const mapper = super.defineMapper(name, opts)\n    self._pendingQueries[name] = {}\n    self._completedQueries[name] = {}\n    mapper.relationList || Object.defineProperty(mapper, 'relationList', { value: [] })\n\n    const collectionOpts = {\n      // Make sure the collection has somewhere to store \"added\" timestamps\n      _added: {},\n      // Give the collection a reference to this SimpleStore\n      datastore: self,\n      // The mapper tied to the collection\n      mapper\n    }\n\n    if (opts && ('onConflict' in opts)) {\n      collectionOpts.onConflict = opts.onConflict\n    }\n\n    // The SimpleStore uses a subclass of Collection that is \"SimpleStore-aware\"\n    const collection = self._collections[name] = new self.collectionClass(null, collectionOpts)  // eslint-disable-line\n\n    const schema = mapper.schema || {}\n    const properties = schema.properties || {}\n    // TODO: Make it possible index nested properties?\n    utils.forOwn(properties, function (opts, prop) {\n      if (opts.indexed) {\n        collection.createIndex(prop)\n      }\n    })\n\n    // Create a secondary index on the \"added\" timestamps of records in the\n    // collection\n    collection.createIndex('addedTimestamps', ['$'], {\n      fieldGetter (obj) {\n        return collection._added[collection.recordId(obj)]\n      }\n    })\n\n    collection.on('all', function (...args) {\n      self._onCollectionEvent(name, ...args)\n    })\n\n    return mapper\n  }\n\n  /**\n   * Fired during {@link SimpleStore#destroy}. See\n   * {@link SimpleStore~beforeDestroyListener} for how to listen for this event.\n   *\n   * @event SimpleStore#beforeDestroy\n   * @see SimpleStore~beforeDestroyListener\n   * @see SimpleStore#destroy\n   */\n  /**\n   * Callback signature for the {@link SimpleStore#event:beforeDestroy} event.\n   *\n   * @example\n   * function onBeforeDestroy (mapperName, id, opts) {\n   *   // do something\n   * }\n   * store.on('beforeDestroy', onBeforeDestroy);\n   *\n   * @callback SimpleStore~beforeDestroyListener\n   * @param {string} name The `name` argument received by {@link Mapper#beforeDestroy}.\n   * @param {string|number} id The `id` argument received by {@link Mapper#beforeDestroy}.\n   * @param {object} opts The `opts` argument received by {@link Mapper#beforeDestroy}.\n   * @see SimpleStore#event:beforeDestroy\n   * @see SimpleStore#destroy\n   * @since 3.0.0\n   */\n  /**\n   * Fired during {@link SimpleStore#destroy}. See\n   * {@link SimpleStore~afterDestroyListener} for how to listen for this event.\n   *\n   * @event SimpleStore#afterDestroy\n   * @see SimpleStore~afterDestroyListener\n   * @see SimpleStore#destroy\n   */\n\n  /**\n   * Callback signature for the {@link SimpleStore#event:afterDestroy} event.\n   *\n   * @example\n   * function onAfterDestroy (mapperName, id, opts, result) {\n   *   // do something\n   * }\n   * store.on('afterDestroy', onAfterDestroy);\n   *\n   * @callback SimpleStore~afterDestroyListener\n   * @param {string} name The `name` argument received by {@link Mapper#afterDestroy}.\n   * @param {string|number} id The `id` argument received by {@link Mapper#afterDestroy}.\n   * @param {object} opts The `opts` argument received by {@link Mapper#afterDestroy}.\n   * @param {object} result The `result` argument received by {@link Mapper#afterDestroy}.\n   * @see SimpleStore#event:afterDestroy\n   * @see SimpleStore#destroy\n   * @since 3.0.0\n   */\n  /**\n   * Wrapper for {@link Mapper#destroy}. Removes any destroyed record from the\n   * in-memory store. Clears out any {@link SimpleStore#_completedQueries} entries\n   * associated with the provided `id`.\n   *\n   * @example\n   * import { SimpleStore } from 'js-data';\n   * import { HttpAdapter } from 'js-data-http';\n   *\n   * const store = new SimpleStore();\n   * store.registerAdapter('http', new HttpAdapter(), { default: true });\n   *\n   * store.defineMapper('book');\n   *\n   * store.add('book', { id: 1234, title: 'Data Management is Hard' });\n   *\n   * // Since this example uses the http adapter, we'll get something like:\n   * //\n   * //   DELETE /book/1234\n   * store.destroy('book', 1234).then(() => {\n   *   // The book record is no longer in the in-memory store\n   *   console.log(store.get('book', 1234)); // undefined\n   *\n   *   return store.find('book', 1234);\n   * }).then((book) {\n   *   // The book was deleted from the database too\n   *   console.log(book); // undefined\n   * });\n   *\n   * @fires SimpleStore#beforeDestroy\n   * @fires SimpleStore#afterDestroy\n   * @fires SimpleStore#remove\n   * @method SimpleStore#destroy\n   * @param {string} name Name of the {@link Mapper} to target.\n   * @param {(string|number)} id Passed to {@link Mapper#destroy}.\n   * @param {object} [opts] Passed to {@link Mapper#destroy}. See\n   * {@link Mapper#destroy} for more configuration options.\n   * @returns {Promise} Resolves when the destroy operation completes.\n   * @since 3.0.0\n   */\n  destroy (name, id, opts = {}) {\n    return super.destroy(name, id, opts).then((result) => {\n      const record = this.getCollection(name).remove(id, opts)\n\n      if (opts.raw) {\n        result.data = record\n      } else {\n        result = record\n      }\n      delete this._pendingQueries[name][id]\n      delete this._completedQueries[name][id]\n      return result\n    })\n  }\n\n  /**\n   * Fired during {@link SimpleStore#destroyAll}. See\n   * {@link SimpleStore~beforeDestroyAllListener} for how to listen for this event.\n   *\n   * @event SimpleStore#beforeDestroyAll\n   * @see SimpleStore~beforeDestroyAllListener\n   * @see SimpleStore#destroyAll\n   */\n  /**\n   * Callback signature for the {@link SimpleStore#event:beforeDestroyAll} event.\n   *\n   * @example\n   * function onBeforeDestroyAll (mapperName, query, opts) {\n   *   // do something\n   * }\n   * store.on('beforeDestroyAll', onBeforeDestroyAll);\n   *\n   * @callback SimpleStore~beforeDestroyAllListener\n   * @param {string} name The `name` argument received by {@link Mapper#beforeDestroyAll}.\n   * @param {object} query The `query` argument received by {@link Mapper#beforeDestroyAll}.\n   * @param {object} opts The `opts` argument received by {@link Mapper#beforeDestroyAll}.\n   * @see SimpleStore#event:beforeDestroyAll\n   * @see SimpleStore#destroyAll\n   * @since 3.0.0\n   */\n  /**\n   * Fired during {@link SimpleStore#destroyAll}. See\n   * {@link SimpleStore~afterDestroyAllListener} for how to listen for this event.\n   *\n   * @event SimpleStore#afterDestroyAll\n   * @see SimpleStore~afterDestroyAllListener\n   * @see SimpleStore#destroyAll\n   */\n\n  /**\n   * Callback signature for the {@link SimpleStore#event:afterDestroyAll} event.\n   *\n   * @example\n   * function onAfterDestroyAll (mapperName, query, opts, result) {\n   *   // do something\n   * }\n   * store.on('afterDestroyAll', onAfterDestroyAll);\n   *\n   * @callback SimpleStore~afterDestroyAllListener\n   * @param {string} name The `name` argument received by {@link Mapper#afterDestroyAll}.\n   * @param {object} query The `query` argument received by {@link Mapper#afterDestroyAll}.\n   * @param {object} opts The `opts` argument received by {@link Mapper#afterDestroyAll}.\n   * @param {object} result The `result` argument received by {@link Mapper#afterDestroyAll}.\n   * @see SimpleStore#event:afterDestroyAll\n   * @see SimpleStore#destroyAll\n   * @since 3.0.0\n   */\n  /**\n   * Wrapper for {@link Mapper#destroyAll}. Removes any destroyed records from\n   * the in-memory store.\n   *\n   * @example\n   * import { SimpleStore } from 'js-data';\n   * import { HttpAdapter } from 'js-data-http';\n   *\n   * const store = new SimpleStore();\n   * store.registerAdapter('http', new HttpAdapter(), { default: true });\n   *\n   * store.defineMapper('book');\n   *\n   * store.add('book', { id: 1234, title: 'Data Management is Hard' });\n   *\n   * // Since this example uses the http adapter, we'll get something like:\n   * //\n   * //   DELETE /book/1234\n   * store.destroy('book', 1234).then(() => {\n   *   // The book record is gone from the in-memory store\n   *   console.log(store.get('book', 1234)); // undefined\n   *   return store.find('book', 1234);\n   * }).then((book) {\n   *   // The book was deleted from the database too\n   *   console.log(book); // undefined\n   * });\n   *\n   * @fires SimpleStore#beforeDestroyAll\n   * @fires SimpleStore#afterDestroyAll\n   * @fires SimpleStore#remove\n   * @method SimpleStore#destroyAll\n   * @param {string} name Name of the {@link Mapper} to target.\n   * @param {object} [query] Passed to {@link Mapper#destroyAll}.\n   * @param {object} [opts] Passed to {@link Mapper#destroyAll}. See\n   * {@link Mapper#destroyAll} for more configuration options.\n   * @returns {Promise} Resolves when the delete completes.\n   * @since 3.0.0\n   */\n  destroyAll (name, query, opts = {}) {\n    return super.destroyAll(name, query, opts).then((result) => {\n      const records = this.getCollection(name).removeAll(query, opts)\n\n      if (opts.raw) {\n        result.data = records\n      } else {\n        result = records\n      }\n      const hash = this.hashQuery(name, query, opts)\n      delete this._pendingQueries[name][hash]\n      delete this._completedQueries[name][hash]\n      return result\n    })\n  }\n\n  eject (name, id, opts) {\n    console.warn('DEPRECATED: \"eject\" is deprecated, use \"remove\" instead')\n    return this.remove(name, id, opts)\n  }\n\n  ejectAll (name, query, opts) {\n    console.warn('DEPRECATED: \"ejectAll\" is deprecated, use \"removeAll\" instead')\n    return this.removeAll(name, query, opts)\n  }\n\n  /**\n   * Fired during {@link SimpleStore#find}. See\n   * {@link SimpleStore~beforeFindListener} for how to listen for this event.\n   *\n   * @event SimpleStore#beforeFind\n   * @see SimpleStore~beforeFindListener\n   * @see SimpleStore#find\n   */\n  /**\n   * Callback signature for the {@link SimpleStore#event:beforeFind} event.\n   *\n   * @example\n   * function onBeforeFind (mapperName, id, opts) {\n   *   // do something\n   * }\n   * store.on('beforeFind', onBeforeFind);\n   *\n   * @callback SimpleStore~beforeFindListener\n   * @param {string} name The `name` argument received by {@link Mapper#beforeFind}.\n   * @param {string|number} id The `id` argument received by {@link Mapper#beforeFind}.\n   * @param {object} opts The `opts` argument received by {@link Mapper#beforeFind}.\n   * @see SimpleStore#event:beforeFind\n   * @see SimpleStore#find\n   * @since 3.0.0\n   */\n  /**\n   * Fired during {@link SimpleStore#find}. See\n   * {@link SimpleStore~afterFindListener} for how to listen for this event.\n   *\n   * @event SimpleStore#afterFind\n   * @see SimpleStore~afterFindListener\n   * @see SimpleStore#find\n   */\n\n  /**\n   * Callback signature for the {@link SimpleStore#event:afterFind} event.\n   *\n   * @example\n   * function onAfterFind (mapperName, id, opts, result) {\n   *   // do something\n   * }\n   * store.on('afterFind', onAfterFind);\n   *\n   * @callback SimpleStore~afterFindListener\n   * @param {string} name The `name` argument received by {@link Mapper#afterFind}.\n   * @param {string|number} id The `id` argument received by {@link Mapper#afterFind}.\n   * @param {object} opts The `opts` argument received by {@link Mapper#afterFind}.\n   * @param {object} result The `result` argument received by {@link Mapper#afterFind}.\n   * @see SimpleStore#event:afterFind\n   * @see SimpleStore#find\n   * @since 3.0.0\n   */\n  /**\n   * Wrapper for {@link Mapper#find}. Adds any found record to the store.\n   *\n   * @example\n   * import { SimpleStore } from 'js-data';\n   * import { HttpAdapter } from 'js-data-http';\n   *\n   * const store = new SimpleStore();\n   * store.registerAdapter('http', new HttpAdapter(), { default: true });\n   *\n   * store.defineMapper('book');\n   *\n   * // Since this example uses the http adapter, we'll get something like:\n   * //\n   * //   GET /book/1234\n   * store.find('book', 1234).then((book) => {\n   *   // The book record is now in the in-memory store\n   *   console.log(store.get('book', 1234) === book); // true\n   * });\n   *\n   * @fires SimpleStore#beforeFind\n   * @fires SimpleStore#afterFind\n   * @fires SimpleStore#add\n   * @method SimpleStore#find\n   * @param {string} name Name of the {@link Mapper} to target.\n   * @param {(string|number)} id Passed to {@link Mapper#find}.\n   * @param {object} [opts] Passed to {@link Mapper#find}.\n   * @param {boolean} [opts.force] Bypass cacheFind\n   * @param {boolean|Function} [opts.usePendingFind] See {@link SimpleStore#usePendingFind}\n   * @returns {Promise} Resolves with the result, if any.\n   * @since 3.0.0\n   */\n  find (name, id, opts = {}) {\n    const mapper = this.getMapper(name)\n    const pendingQuery = this._pendingQueries[name][id]\n    const usePendingFind = opts.usePendingFind === undefined ? this.usePendingFind : opts.usePendingFind\n    utils._(opts, mapper)\n\n    if (pendingQuery && (utils.isFunction(usePendingFind) ? usePendingFind.call(this, name, id, opts) : usePendingFind)) {\n      return pendingQuery\n    }\n    const item = this.cachedFind(name, id, opts)\n\n    if (opts.force || !item) {\n      const promise = this._pendingQueries[name][id] = super.find(name, id, opts)\n      return promise\n        .then((result) => {\n          delete this._pendingQueries[name][id]\n          result = this._end(name, result, opts)\n          this.cacheFind(name, result, id, opts)\n          return result\n        }, (err) => {\n          delete this._pendingQueries[name][id]\n          return utils.reject(err)\n        })\n    }\n\n    return utils.resolve(item)\n  }\n\n  /**\n   * Fired during {@link SimpleStore#findAll}. See\n   * {@link SimpleStore~beforeFindAllListener} for how to listen for this event.\n   *\n   * @event SimpleStore#beforeFindAll\n   * @see SimpleStore~beforeFindAllListener\n   * @see SimpleStore#findAll\n   */\n  /**\n   * Callback signature for the {@link SimpleStore#event:beforeFindAll} event.\n   *\n   * @example\n   * function onBeforeFindAll (mapperName, query, opts) {\n   *   // do something\n   * }\n   * store.on('beforeFindAll', onBeforeFindAll);\n   *\n   * @callback SimpleStore~beforeFindAllListener\n   * @param {string} name The `name` argument received by {@link Mapper#beforeFindAll}.\n   * @param {object} query The `query` argument received by {@link Mapper#beforeFindAll}.\n   * @param {object} opts The `opts` argument received by {@link Mapper#beforeFindAll}.\n   * @see SimpleStore#event:beforeFindAll\n   * @see SimpleStore#findAll\n   * @since 3.0.0\n   */\n  /**\n   * Fired during {@link SimpleStore#findAll}. See\n   * {@link SimpleStore~afterFindAllListener} for how to listen for this event.\n   *\n   * @event SimpleStore#afterFindAll\n   * @see SimpleStore~afterFindAllListener\n   * @see SimpleStore#findAll\n   */\n\n  /**\n   * Callback signature for the {@link SimpleStore#event:afterFindAll} event.\n   *\n   * @example\n   * function onAfterFindAll (mapperName, query, opts, result) {\n   *   // do something\n   * }\n   * store.on('afterFindAll', onAfterFindAll);\n   *\n   * @callback SimpleStore~afterFindAllListener\n   * @param {string} name The `name` argument received by {@link Mapper#afterFindAll}.\n   * @param {object} query The `query` argument received by {@link Mapper#afterFindAll}.\n   * @param {object} opts The `opts` argument received by {@link Mapper#afterFindAll}.\n   * @param {object} result The `result` argument received by {@link Mapper#afterFindAll}.\n   * @see SimpleStore#event:afterFindAll\n   * @see SimpleStore#findAll\n   * @since 3.0.0\n   */\n  /**\n   * Wrapper for {@link Mapper#findAll}. Adds any found records to the store.\n   *\n   * @example\n   * import { SimpleStore } from 'js-data';\n   * import { HttpAdapter } from 'js-data-http';\n   *\n   * const store = new SimpleStore();\n   * store.registerAdapter('http', new HttpAdapter(), { default: true });\n   *\n   * store.defineMapper('movie');\n   *\n   * // Since this example uses the http adapter, we'll get something like:\n   * //\n   * //   GET /movie?rating=PG\n   * store.find('movie', { rating: 'PG' }).then((movies) => {\n   *   // The movie records are now in the in-memory store\n   *   console.log(store.filter('movie'));\n   * });\n   *\n   * @fires SimpleStore#beforeFindAll\n   * @fires SimpleStore#afterFindAll\n   * @fires SimpleStore#add\n   * @method SimpleStore#findAll\n   * @param {string} name Name of the {@link Mapper} to target.\n   * @param {object} [query] Passed to {@link Mapper.findAll}.\n   * @param {object} [opts] Passed to {@link Mapper.findAll}.\n   * @param {boolean} [opts.force] Bypass cacheFindAll\n   * @param {boolean|Function} [opts.usePendingFindAll] See {@link SimpleStore#usePendingFindAll}\n   * @returns {Promise} Resolves with the result, if any.\n   * @since 3.0.0\n   */\n  findAll (name, query, opts = {}) {\n    const mapper = this.getMapper(name)\n    const hash = this.hashQuery(name, query, opts)\n    const pendingQuery = this._pendingQueries[name][hash]\n    const usePendingFindAll = opts.usePendingFindAll === undefined ? this.usePendingFindAll : opts.usePendingFindAll\n    utils._(opts, mapper)\n\n    if (pendingQuery && (utils.isFunction(usePendingFindAll) ? usePendingFindAll.call(this, name, query, opts) : usePendingFindAll)) {\n      return pendingQuery\n    }\n\n    const items = this.cachedFindAll(name, hash, opts)\n\n    if (opts.force || !items) {\n      const promise = this._pendingQueries[name][hash] = super.findAll(name, query, opts)\n      return promise\n        .then((result) => {\n          delete this._pendingQueries[name][hash]\n          result = this._end(name, result, opts)\n          this.cacheFindAll(name, result, hash, opts)\n          return result\n        }, (err) => {\n          delete this._pendingQueries[name][hash]\n          return utils.reject(err)\n        })\n    }\n\n    return utils.resolve(items)\n  }\n\n  /**\n   * Return the {@link Collection} with the given name, if for some\n   * reason you need a direct reference to the collection.\n   *\n   * @method SimpleStore#getCollection\n   * @param {string} name Name of the {@link Collection} to retrieve.\n   * @returns {Collection}\n   * @since 3.0.0\n   * @throws {Error} Thrown if the specified {@link Collection} does not\n   * exist.\n   */\n  getCollection (name) {\n    const collection = this._collections[name]\n    if (!collection) {\n      throw utils.err(`${DOMAIN}#getCollection`, name)(404, 'collection')\n    }\n    return collection\n  }\n\n  /**\n   * Hashing function used to cache {@link SimpleStore#find} and\n   * {@link SimpleStore#findAll} requests. This method simply JSONifies the\n   * `query` argument passed to {@link SimpleStore#find} or\n   * {@link SimpleStore#findAll}.\n   *\n   * Override this method for custom hashing behavior.\n   * @method SimpleStore#hashQuery\n   * @param {string} name The `name` argument passed to {@link SimpleStore#find}\n   * or {@link SimpleStore#findAll}.\n   * @param {object} query The `query` argument passed to {@link SimpleStore#find}\n   * or {@link SimpleStore#findAll}.\n   * @returns {string} The JSONified `query`.\n   * @since 3.0.0\n   */\n  hashQuery (name, query, opts) {\n    return utils.toJson(query || {})\n  }\n\n  inject (name, records, opts) {\n    console.warn('DEPRECATED: \"inject\" is deprecated, use \"add\" instead')\n    return this.add(name, records, opts)\n  }\n\n  /**\n   * Wrapper for {@link Collection#remove}. Removes the specified\n   * {@link Record} from the store.\n   *\n   * @example <caption>SimpleStore#remove</caption>\n   * const JSData = require('js-data');\n   * const { SimpleStore } = JSData;\n   * console.log('Using JSData v' + JSData.version.full);\n   *\n   * const store = new SimpleStore();\n   * store.defineMapper('book');\n   * console.log(store.getAll('book').length);\n   * store.add('book', { id: 1234 });\n   * console.log(store.getAll('book').length);\n   * store.remove('book', 1234);\n   * console.log(store.getAll('book').length);\n   *\n   * @fires SimpleStore#remove\n   * @method SimpleStore#remove\n   * @param {string} name The name of the {@link Collection} to target.\n   * @param {string|number} id The primary key of the {@link Record} to remove.\n   * @param {object} [opts] Configuration options.\n   * @param {string[]} [opts.with] Relations of the {@link Record} to also\n   * remove from the store.\n   * @returns {Record} The removed {@link Record}, if any.\n   * @see Collection#add\n   * @see Collection#add\n   * @since 3.0.0\n   */\n  remove (name, id, opts) {\n    const record = this.getCollection(name).remove(id, opts)\n    if (record) {\n      this.removeRelated(name, [record], opts)\n    }\n    return record\n  }\n\n  /**\n   * Wrapper for {@link Collection#removeAll}. Removes the selected\n   * {@link Record}s from the store.\n   *\n   * @example <caption>SimpleStore#removeAll</caption>\n   * const JSData = require('js-data');\n   * const { SimpleStore } = JSData;\n   * console.log('Using JSData v' + JSData.version.full);\n   *\n   * const store = new SimpleStore();\n   * store.defineMapper('movie');\n   * console.log(store.getAll('movie').length);\n   * store.add('movie', [{ id: 3, rating: 'R' }, { id: 4, rating: 'PG-13' });\n   * console.log(store.getAll('movie').length);\n   * store.removeAll('movie', { rating: 'R' });\n   * console.log(store.getAll('movie').length);\n   *\n   * @fires SimpleStore#remove\n   * @method SimpleStore#removeAll\n   * @param {string} name The name of the {@link Collection} to target.\n   * @param {object} [query={}] Selection query. See {@link query}.\n   * @param {object} [query.where] See {@link query.where}.\n   * @param {number} [query.offset] See {@link query.offset}.\n   * @param {number} [query.limit] See {@link query.limit}.\n   * @param {string|Array[]} [query.orderBy] See {@link query.orderBy}.\n   * @param {object} [opts] Configuration options.\n   * @param {string[]} [opts.with] Relations of the {@link Record} to also\n   * remove from the store.\n   * @returns {Record} The removed {@link Record}s, if any.\n   * @see Collection#add\n   * @see Collection#add\n   * @since 3.0.0\n   */\n  removeAll (name, query, opts) {\n    if (!query || !Object.keys(query).length) {\n      this._completedQueries[name] = {}\n    } else {\n      this._completedQueries[name][this.hashQuery(name, query, opts)] = undefined\n    }\n    const records = this.getCollection(name).removeAll(query, opts)\n    if (records.length) {\n      this.removeRelated(name, records, opts)\n    }\n    return records\n  }\n\n  /**\n   * Remove from the store {@link Record}s that are related to the provided\n   * {@link Record}(s).\n   *\n   * @fires SimpleStore#remove\n   * @method SimpleStore#removeRelated\n   * @param {string} name The name of the {@link Collection} to target.\n   * @param {Record|Record[]} records {@link Record}s whose relations are to be\n   * removed.\n   * @param {object} [opts] Configuration options.\n   * @param {string[]} [opts.with] Relations of the {@link Record}(s) to remove\n   * from the store.\n   * @since 3.0.0\n   */\n  removeRelated (name, records, opts) {\n    if (!utils.isArray(records)) {\n      records = [records]\n    }\n    utils.forEachRelation(this.getMapper(name), opts, (def, optsCopy) => {\n      records.forEach((record) => {\n        let relatedData\n        let query\n        if (def.foreignKey && (def.type === hasOneType || def.type === hasManyType)) {\n          query = { [def.foreignKey]: def.getForeignKey(record) }\n        } else if (def.type === hasManyType && def.localKeys) {\n          query = {\n            where: {\n              [def.getRelation().idAttribute]: {\n                in: utils.get(record, def.localKeys)\n              }\n            }\n          }\n        } else if (def.type === hasManyType && def.foreignKeys) {\n          query = {\n            where: {\n              [def.foreignKeys]: {\n                contains: def.getForeignKey(record)\n              }\n            }\n          }\n        } else if (def.type === belongsToType) {\n          relatedData = this.remove(def.relation, def.getForeignKey(record), optsCopy)\n        }\n        if (query) {\n          relatedData = this.removeAll(def.relation, query, optsCopy)\n        }\n        if (relatedData) {\n          if (utils.isArray(relatedData) && !relatedData.length) {\n            return\n          }\n          if (def.type === hasOneType) {\n            relatedData = relatedData[0]\n          }\n          def.setLocalField(record, relatedData)\n        }\n      })\n    })\n  }\n\n  /**\n   * Fired during {@link SimpleStore#update}. See\n   * {@link SimpleStore~beforeUpdateListener} for how to listen for this event.\n   *\n   * @event SimpleStore#beforeUpdate\n   * @see SimpleStore~beforeUpdateListener\n   * @see SimpleStore#update\n   */\n  /**\n   * Callback signature for the {@link SimpleStore#event:beforeUpdate} event.\n   *\n   * @example\n   * function onBeforeUpdate (mapperName, id, props, opts) {\n   *   // do something\n   * }\n   * store.on('beforeUpdate', onBeforeUpdate);\n   *\n   * @callback SimpleStore~beforeUpdateListener\n   * @param {string} name The `name` argument received by {@link Mapper#beforeUpdate}.\n   * @param {string|number} id The `id` argument received by {@link Mapper#beforeUpdate}.\n   * @param {object} props The `props` argument received by {@link Mapper#beforeUpdate}.\n   * @param {object} opts The `opts` argument received by {@link Mapper#beforeUpdate}.\n   * @see SimpleStore#event:beforeUpdate\n   * @see SimpleStore#update\n   * @since 3.0.0\n   */\n  /**\n   * Fired during {@link SimpleStore#update}. See\n   * {@link SimpleStore~afterUpdateListener} for how to listen for this event.\n   *\n   * @event SimpleStore#afterUpdate\n   * @see SimpleStore~afterUpdateListener\n   * @see SimpleStore#update\n   */\n\n  /**\n   * Callback signature for the {@link SimpleStore#event:afterUpdate} event.\n   *\n   * @example\n   * function onAfterUpdate (mapperName, id, props, opts, result) {\n   *   // do something\n   * }\n   * store.on('afterUpdate', onAfterUpdate);\n   *\n   * @callback SimpleStore~afterUpdateListener\n   * @param {string} name The `name` argument received by {@link Mapper#afterUpdate}.\n   * @param {string|number} id The `id` argument received by {@link Mapper#afterUpdate}.\n   * @param {object} props The `props` argument received by {@link Mapper#afterUpdate}.\n   * @param {object} opts The `opts` argument received by {@link Mapper#afterUpdate}.\n   * @param {object} result The `result` argument received by {@link Mapper#afterUpdate}.\n   * @see SimpleStore#event:afterUpdate\n   * @see SimpleStore#update\n   * @since 3.0.0\n   */\n  /**\n   * Wrapper for {@link Mapper#update}. Adds the updated {@link Record} to the\n   * store.\n   *\n   * @example\n   * import { SimpleStore } from 'js-data';\n   * import { HttpAdapter } from 'js-data-http';\n   *\n   * const store = new SimpleStore();\n   * store.registerAdapter('http', new HttpAdapter(), { default: true });\n   *\n   * store.defineMapper('post');\n   *\n   * // Since this example uses the http adapter, we'll get something like:\n   * //\n   * //   PUT /post/1234 {\"status\":\"published\"}\n   * store.update('post', 1, { status: 'published' }).then((post) => {\n   *   // The post record has also been updated in the in-memory store\n   *   console.log(store.get('post', 1234));\n   * });\n   *\n   * @fires SimpleStore#beforeUpdate\n   * @fires SimpleStore#afterUpdate\n   * @fires SimpleStore#add\n   * @method SimpleStore#update\n   * @param {string} name Name of the {@link Mapper} to target.\n   * @param {(string|number)} id Passed to {@link Mapper#update}.\n   * @param {object} record Passed to {@link Mapper#update}.\n   * @param {object} [opts] Passed to {@link Mapper#update}. See\n   * {@link Mapper#update} for more configuration options.\n   * @returns {Promise} Resolves with the result of the update.\n   * @since 3.0.0\n   */\n  update (name, id, record, opts = {}) {\n    return super.update(name, id, record, opts)\n      .then((result) => this._end(name, result, opts))\n  }\n\n  /**\n   * Fired during {@link SimpleStore#updateAll}. See\n   * {@link SimpleStore~beforeUpdateAllListener} for how to listen for this event.\n   *\n   * @event SimpleStore#beforeUpdateAll\n   * @see SimpleStore~beforeUpdateAllListener\n   * @see SimpleStore#updateAll\n   */\n  /**\n   * Callback signature for the {@link SimpleStore#event:beforeUpdateAll} event.\n   *\n   * @example\n   * function onBeforeUpdateAll (mapperName, props, query, opts) {\n   *   // do something\n   * }\n   * store.on('beforeUpdateAll', onBeforeUpdateAll);\n   *\n   * @callback SimpleStore~beforeUpdateAllListener\n   * @param {string} name The `name` argument received by {@link Mapper#beforeUpdateAll}.\n   * @param {object} props The `props` argument received by {@link Mapper#beforeUpdateAll}.\n   * @param {object} query The `query` argument received by {@link Mapper#beforeUpdateAll}.\n   * @param {object} opts The `opts` argument received by {@link Mapper#beforeUpdateAll}.\n   * @see SimpleStore#event:beforeUpdateAll\n   * @see SimpleStore#updateAll\n   * @since 3.0.0\n   */\n  /**\n   * Fired during {@link SimpleStore#updateAll}. See\n   * {@link SimpleStore~afterUpdateAllListener} for how to listen for this event.\n   *\n   * @event SimpleStore#afterUpdateAll\n   * @see SimpleStore~afterUpdateAllListener\n   * @see SimpleStore#updateAll\n   */\n\n  /**\n   * Callback signature for the {@link SimpleStore#event:afterUpdateAll} event.\n   *\n   * @example\n   * function onAfterUpdateAll (mapperName, props, query, opts, result) {\n   *   // do something\n   * }\n   * store.on('afterUpdateAll', onAfterUpdateAll);\n   *\n   * @callback SimpleStore~afterUpdateAllListener\n   * @param {string} name The `name` argument received by {@link Mapper#afterUpdateAll}.\n   * @param {object} props The `props` argument received by {@link Mapper#afterUpdateAll}.\n   * @param {object} query The `query` argument received by {@link Mapper#afterUpdateAll}.\n   * @param {object} opts The `opts` argument received by {@link Mapper#afterUpdateAll}.\n   * @param {object} result The `result` argument received by {@link Mapper#afterUpdateAll}.\n   * @see SimpleStore#event:afterUpdateAll\n   * @see SimpleStore#updateAll\n   * @since 3.0.0\n   */\n  /**\n   * Wrapper for {@link Mapper#updateAll}. Adds the updated {@link Record}s to\n   * the store.\n   *\n   * @example\n   * import { SimpleStore } from 'js-data';\n   * import { HttpAdapter } from 'js-data-http';\n   *\n   * const store = new SimpleStore();\n   * store.registerAdapter('http', new HttpAdapter(), { default: true });\n   *\n   * store.defineMapper('post');\n   *\n   * // Since this example uses the http adapter, we'll get something like:\n   * //\n   * //   PUT /post?author_id=1234 {\"status\":\"published\"}\n   * store.updateAll('post', { author_id: 1234 }, { status: 'published' }).then((posts) => {\n   *   // The post records have also been updated in the in-memory store\n   *   console.log(store.filter('posts', { author_id: 1234 }));\n   * });\n   *\n   * @fires SimpleStore#beforeUpdateAll\n   * @fires SimpleStore#afterUpdateAll\n   * @fires SimpleStore#add\n   * @method SimpleStore#updateAll\n   * @param {string} name Name of the {@link Mapper} to target.\n   * @param {object} props Passed to {@link Mapper#updateAll}.\n   * @param {object} [query] Passed to {@link Mapper#updateAll}.\n   * @param {object} [opts] Passed to {@link Mapper#updateAll}. See\n   * {@link Mapper#updateAll} for more configuration options.\n   * @returns {Promise} Resolves with the result of the update.\n   * @since 3.0.0\n   */\n  updateAll (name, props, query, opts = {}) {\n    return super.updateAll(name, props, query, opts)\n      .then((result) => this._end(name, result, opts))\n  }\n\n  /**\n   * Fired during {@link SimpleStore#updateMany}. See\n   * {@link SimpleStore~beforeUpdateManyListener} for how to listen for this event.\n   *\n   * @event SimpleStore#beforeUpdateMany\n   * @see SimpleStore~beforeUpdateManyListener\n   * @see SimpleStore#updateMany\n   */\n  /**\n   * Callback signature for the {@link SimpleStore#event:beforeUpdateMany} event.\n   *\n   * @example\n   * function onBeforeUpdateMany (mapperName, records, opts) {\n   *   // do something\n   * }\n   * store.on('beforeUpdateMany', onBeforeUpdateMany);\n   *\n   * @callback SimpleStore~beforeUpdateManyListener\n   * @param {string} name The `name` argument received by {@link Mapper#beforeUpdateMany}.\n   * @param {object} records The `records` argument received by {@link Mapper#beforeUpdateMany}.\n   * @param {object} opts The `opts` argument received by {@link Mapper#beforeUpdateMany}.\n   * @see SimpleStore#event:beforeUpdateMany\n   * @see SimpleStore#updateMany\n   * @since 3.0.0\n   */\n  /**\n   * Fired during {@link SimpleStore#updateMany}. See\n   * {@link SimpleStore~afterUpdateManyListener} for how to listen for this event.\n   *\n   * @event SimpleStore#afterUpdateMany\n   * @see SimpleStore~afterUpdateManyListener\n   * @see SimpleStore#updateMany\n   */\n\n  /**\n   * Callback signature for the {@link SimpleStore#event:afterUpdateMany} event.\n   *\n   * @example\n   * function onAfterUpdateMany (mapperName, records, opts, result) {\n   *   // do something\n   * }\n   * store.on('afterUpdateMany', onAfterUpdateMany);\n   *\n   * @callback SimpleStore~afterUpdateManyListener\n   * @param {string} name The `name` argument received by {@link Mapper#afterUpdateMany}.\n   * @param {object} records The `records` argument received by {@link Mapper#afterUpdateMany}.\n   * @param {object} opts The `opts` argument received by {@link Mapper#afterUpdateMany}.\n   * @param {object} result The `result` argument received by {@link Mapper#afterUpdateMany}.\n   * @see SimpleStore#event:afterUpdateMany\n   * @see SimpleStore#updateMany\n   * @since 3.0.0\n   */\n  /**\n   * Wrapper for {@link Mapper#updateMany}. Adds the updated {@link Record}s to\n   * the store.\n   *\n   * @example\n   * import { SimpleStore } from 'js-data';\n   * import { HttpAdapter } from 'js-data-http';\n   *\n   * const store = new SimpleStore();\n   * store.registerAdapter('http', new HttpAdapter(), { default: true });\n   *\n   * store.defineMapper('post');\n   *\n   * // Since this example uses the http adapter, we'll get something like:\n   * //\n   * //   PUT /post [{\"id\":3,status\":\"published\"},{\"id\":4,status\":\"published\"}]\n   * store.updateMany('post', [\n   *   { id: 3, status: 'published' },\n   *   { id: 4, status: 'published' }\n   * ]).then((posts) => {\n   *   // The post records have also been updated in the in-memory store\n   *   console.log(store.getAll('post', 3, 4));\n   * });\n   *\n   * @fires SimpleStore#beforeUpdateMany\n   * @fires SimpleStore#afterUpdateMany\n   * @fires SimpleStore#add\n   * @method SimpleStore#updateMany\n   * @param {string} name Name of the {@link Mapper} to target.\n   * @param {(Object[]|Record[])} records Passed to {@link Mapper#updateMany}.\n   * @param {object} [opts] Passed to {@link Mapper#updateMany}. See\n   * {@link Mapper#updateMany} for more configuration options.\n   * @returns {Promise} Resolves with the result of the update.\n   * @since 3.0.0\n   */\n  updateMany (name, records, opts = {}) {\n    return super.updateMany(name, records, opts)\n      .then((result) => this._end(name, result, opts))\n  }\n\n  /**\n   * Wrapper for {@link Collection#add}.\n   *\n   * @example <caption>SimpleStore#add</caption>\n   * const JSData = require('js-data');\n   * const { SimpleStore } = JSData;\n   * console.log('Using JSData v' + JSData.version.full);\n   *\n   * const store = new SimpleStore();\n   * store.defineMapper('book');\n   *\n   * // Add one book to the in-memory store:\n   * store.add('book', { id: 1, title: 'Respect your Data' });\n   * // Add multiple books to the in-memory store:\n   * store.add('book', [\n   *   { id: 2, title: 'Easy data recipes' },\n   *   { id: 3, title: 'Active Record 101' }\n   * ]);\n   *\n   * @fires SimpleStore#add\n   * @method SimpleStore#add\n   * @param {(string|number)} name Name of the {@link Mapper} to target.\n   * @param {(Object|Object[]|Record|Record[])} records See {@link Collection#add}.\n   * @param {object} [opts] Configuration options. See {@link Collection#add}.\n   * @returns {(Object|Object[]|Record|Record[])} See {@link Collection#add}.\n   * @see Collection#add\n   * @see Collection#add\n   * @since 3.0.0\n   */\n  add (name, records, opts) {\n    return this.getCollection(name).add(records, opts)\n  }\n\n  /**\n   * Wrapper for {@link Collection#between}.\n   *\n   * @example\n   * // Get all users ages 18 to 30\n   * const users = store.between('user', 18, 30, { index: 'age' });\n   *\n   * @example\n   * // Same as above\n   * const users = store.between('user', [18], [30], { index: 'age' });\n   *\n   * @method SimpleStore#between\n   * @param {(string|number)} name Name of the {@link Mapper} to target.\n   * @param {array} leftKeys See {@link Collection#between}.\n   * @param {array} rightKeys See {@link Collection#between}.\n   * @param {object} [opts] Configuration options. See {@link Collection#between}.\n   * @returns {Object[]|Record[]} See {@link Collection#between}.\n   * @see Collection#between\n   * @see Collection#between\n   * @since 3.0.0\n   */\n  between (name, leftKeys, rightKeys, opts) {\n    return this.getCollection(name).between(leftKeys, rightKeys, opts)\n  }\n\n  /**\n   * Wrapper for {@link Collection#createIndex}.\n   *\n   * @example\n   * // Index users by age\n   * store.createIndex('user', 'age');\n   *\n   * @example\n   * // Index users by status and role\n   * store.createIndex('user', 'statusAndRole', ['status', 'role']);\n   *\n   * @method SimpleStore#createIndex\n   * @param {(string|number)} name Name of the {@link Mapper} to target.\n   * @param {string} indexName See {@link Collection#createIndex}.\n   * @param {string[]} [fieldList] See {@link Collection#createIndex}.\n   * @param {object} [opts] Configuration options. See {@link Collection#between}.\n   * @see Collection#createIndex\n   * @see Collection#createIndex\n   * @since 3.0.0\n   */\n  createIndex (name, indexName, fieldList, opts) {\n    return this.getCollection(name).createIndex(indexName, fieldList, opts)\n  }\n\n  /**\n   * Wrapper for {@link Collection#filter}.\n   *\n   * @example <caption>SimpleStore#filter</caption>\n   * const JSData = require('js-data');\n   * const { SimpleStore } = JSData;\n   * console.log('Using JSData v' + JSData.version.full);\n   *\n   * const store = new SimpleStore();\n   * store.defineMapper('post');\n   * store.add('post', [\n   *   { id: 1, status: 'draft', created_at_timestamp: new Date().getTime() }\n   * ]);\n   *\n   * // Get the draft posts created less than three months ago\n   * let posts = store.filter('post', {\n   *   where: {\n   *     status: {\n   *       '==': 'draft'\n   *     },\n   *     created_at_timestamp: {\n   *       '>=': (new Date().getTime() - (1000 \\* 60 \\* 60 \\* 24 \\* 30 \\* 3)) // 3 months ago\n   *     }\n   *   }\n   * });\n   * console.log(posts);\n   *\n   * // Use a custom filter function\n   * posts = store.filter('post', function (post) { return post.id % 2 === 0 });\n   *\n   * @method SimpleStore#filter\n   * @param {(string|number)} name Name of the {@link Mapper} to target.\n   * @param {(Object|Function)} [queryOrFn={}] See {@link Collection#filter}.\n   * @param {object} [thisArg] See {@link Collection#filter}.\n   * @returns {Array} See {@link Collection#filter}.\n   * @see Collection#filter\n   * @see Collection#filter\n   * @since 3.0.0\n   */\n  filter (name, queryOrFn, thisArg) {\n    return this.getCollection(name).filter(queryOrFn, thisArg)\n  }\n\n  /**\n   * Wrapper for {@link Collection#get}.\n   *\n   * @example <caption>SimpleStore#get</caption>\n   * const JSData = require('js-data');\n   * const { SimpleStore } = JSData;\n   * console.log('Using JSData v' + JSData.version.full);\n   *\n   * const store = new SimpleStore();\n   * store.defineMapper('post');\n   * store.add('post', [\n   *   { id: 1, status: 'draft', created_at_timestamp: new Date().getTime() }\n   * ]);\n   *\n   * console.log(store.get('post', 1)); // {...}\n   * console.log(store.get('post', 2)); // undefined\n   *\n   * @method SimpleStore#get\n   * @param {(string|number)} name Name of the {@link Mapper} to target.\n   * @param {(string|number)} id See {@link Collection#get}.\n   * @returns {(Object|Record)} See {@link Collection#get}.\n   * @see Collection#get\n   * @see Collection#get\n   * @since 3.0.0\n   */\n  get (name, id) {\n    return this.getCollection(name).get(id)\n  }\n\n  /**\n   * Wrapper for {@link Collection#getAll}.\n   *\n   * @example\n   * // Get the posts where \"status\" is \"draft\" or \"inReview\"\n   * const posts = store.getAll('post', 'draft', 'inReview', { index: 'status' });\n   *\n   * @example\n   * // Same as above\n   * const posts = store.getAll('post', ['draft'], ['inReview'], { index: 'status' });\n   *\n   * @method SimpleStore#getAll\n   * @param {(string|number)} name Name of the {@link Mapper} to target.\n   * @param {...Array} [keyList] See {@link Collection#getAll}.\n   * @param {object} [opts] See {@link Collection#getAll}.\n   * @returns {Array} See {@link Collection#getAll}.\n   * @see Collection#getAll\n   * @see Collection#getAll\n   * @since 3.0.0\n   */\n  getAll (name, ...args) {\n    return this.getCollection(name).getAll(...args)\n  }\n\n  /**\n   * Wrapper for {@link Collection#prune}.\n   *\n   * @method SimpleStore#prune\n   * @param {object} [opts] See {@link Collection#prune}.\n   * @returns {Array} See {@link Collection#prune}.\n   * @see Collection#prune\n   * @see Collection#prune\n   * @since 3.0.0\n   */\n  prune (name, opts) {\n    return this.getCollection(name).prune(opts)\n  }\n\n  /**\n   * Wrapper for {@link Collection#query}.\n   *\n   * @example\n   * // Grab page 2 of users between ages 18 and 30\n   * store.query('user')\n   *   .between(18, 30, { index: 'age' }) // between ages 18 and 30\n   *   .skip(10) // second page\n   *   .limit(10) // page size\n   *   .run();\n   *\n   * @method SimpleStore#query\n   * @param {(string|number)} name Name of the {@link Mapper} to target.\n   * @returns {Query} See {@link Collection#query}.\n   * @see Collection#query\n   * @see Collection#query\n   * @since 3.0.0\n   */\n  query (name) {\n    return this.getCollection(name).query()\n  }\n\n  /**\n   * Wrapper for {@link Collection#toJSON}.\n   *\n   * @example\n   * store.defineMapper('post', {\n   *   schema: {\n   *     properties: {\n   *       id: { type: 'number' },\n   *       title: { type: 'string' }\n   *     }\n   *   }\n   * });\n   * store.add('post', [\n   *   { id: 1, status: 'published', title: 'Respect your Data' },\n   *   { id: 2, status: 'draft', title: 'Connecting to a data source' }\n   * ]);\n   * console.log(store.toJSON('post'));\n   * const draftsJSON = store.query('post')\n   *   .filter({ status: 'draft' })\n   *   .mapCall('toJSON')\n   *   .run();\n   *\n   * @method SimpleStore#toJSON\n   * @param {(string|number)} name Name of the {@link Mapper} to target.\n   * @param {object} [opts] See {@link Collection#toJSON}.\n   * @returns {Array} See {@link Collection#toJSON}.\n   * @see Collection#toJSON\n   * @see Collection#toJSON\n   * @since 3.0.0\n   */\n  toJSON (name, opts) {\n    return this.getCollection(name).toJSON(opts)\n  }\n\n  /**\n   * Wrapper for {@link Collection#unsaved}.\n   *\n   * @method SimpleStore#unsaved\n   * @returns {Array} See {@link Collection#unsaved}.\n   * @see Collection#unsaved\n   * @see Collection#unsaved\n   * @since 3.0.0\n   */\n  unsaved (name, opts) {\n    return this.getCollection(name).unsaved(opts)\n  }\n}\n\n/**\n * Fired when a record changes. Only works for records that have tracked fields.\n * See {@link SimpleStore~changeListener} on how to listen for this event.\n *\n * @event SimpleStore#change\n * @see SimpleStore~changeListener\n */\n\n/**\n * Callback signature for the {@link SimpleStore#event:change} event.\n *\n * @example\n * function onChange (mapperName, record, changes) {\n *   // do something\n * }\n * store.on('change', onChange);\n *\n * @callback SimpleStore~changeListener\n * @param {string} name The name of the associated {@link Mapper}.\n * @param {Record} record The Record that changed.\n * @param {object} changes The changes.\n * @see SimpleStore#event:change\n * @since 3.0.0\n */\n\n/**\n * Fired when one or more records are added to the in-memory store. See\n * {@link SimpleStore~addListener} on how to listen for this event.\n *\n * @event SimpleStore#add\n * @see SimpleStore~addListener\n * @see SimpleStore#event:add\n * @see SimpleStore#add\n * @see SimpleStore#create\n * @see SimpleStore#createMany\n * @see SimpleStore#find\n * @see SimpleStore#findAll\n * @see SimpleStore#update\n * @see SimpleStore#updateAll\n * @see SimpleStore#updateMany\n */\n\n/**\n * Callback signature for the {@link SimpleStore#event:add} event.\n *\n * @example\n * function onAdd (mapperName, recordOrRecords) {\n *   // do something\n * }\n * store.on('add', onAdd);\n *\n * @callback SimpleStore~addListener\n * @param {string} name The name of the associated {@link Mapper}.\n * @param {Record|Record[]} The Record or Records that were added.\n * @see SimpleStore#event:add\n * @see SimpleStore#add\n * @see SimpleStore#create\n * @see SimpleStore#createMany\n * @see SimpleStore#find\n * @see SimpleStore#findAll\n * @see SimpleStore#update\n * @see SimpleStore#updateAll\n * @see SimpleStore#updateMany\n * @since 3.0.0\n */\n\n/**\n * Fired when one or more records are removed from the in-memory store. See\n * {@link SimpleStore~removeListener} for how to listen for this event.\n *\n * @event SimpleStore#remove\n * @see SimpleStore~removeListener\n * @see SimpleStore#event:remove\n * @see SimpleStore#clear\n * @see SimpleStore#destroy\n * @see SimpleStore#destroyAll\n * @see SimpleStore#remove\n * @see SimpleStore#removeAll\n */\n\n/**\n * Callback signature for the {@link SimpleStore#event:remove} event.\n *\n * @example\n * function onRemove (mapperName, recordsOrRecords) {\n *   // do something\n * }\n * store.on('remove', onRemove);\n *\n * @callback SimpleStore~removeListener\n * @param {string} name The name of the associated {@link Mapper}.\n * @param {Record|Record[]} Record or Records that were removed.\n * @see SimpleStore#event:remove\n * @see SimpleStore#clear\n * @see SimpleStore#destroy\n * @see SimpleStore#destroyAll\n * @see SimpleStore#remove\n * @see SimpleStore#removeAll\n * @since 3.0.0\n */\n\n/**\n * Create a subclass of this SimpleStore:\n * @example <caption>SimpleStore.extend</caption>\n * const JSData = require('js-data');\n * const { SimpleStore } = JSData;\n * console.log('Using JSData v' + JSData.version.full);\n *\n * // Extend the class using ES2015 class syntax.\n * class CustomSimpleStoreClass extends SimpleStore {\n *   foo () { return 'bar'; }\n *   static beep () { return 'boop'; }\n * }\n * const customSimpleStore = new CustomSimpleStoreClass();\n * console.log(customSimpleStore.foo());\n * console.log(CustomSimpleStoreClass.beep());\n *\n * // Extend the class using alternate method.\n * const OtherSimpleStoreClass = SimpleStore.extend({\n *   foo () { return 'bar'; }\n * }, {\n *   beep () { return 'boop'; }\n * })\n * const otherSimpleStore = new OtherSimpleStoreClass();\n * console.log(otherSimpleStore.foo());\n * console.log(OtherSimpleStoreClass.beep());\n *\n * // Extend the class, providing a custom constructor.\n * function AnotherSimpleStoreClass () {\n *   SimpleStore.call(this)\n *   this.created_at = new Date().getTime()\n * }\n * SimpleStore.extend({\n *   constructor: AnotherSimpleStoreClass,\n *   foo () { return 'bar'; }\n * }, {\n *   beep () { return 'boop'; }\n * })\n * const anotherSimpleStore = new AnotherSimpleStoreClass();\n * console.log(anotherSimpleStore.created_at);\n * console.log(anotherSimpleStore.foo());\n * console.log(AnotherSimpleStoreClass.beep());\n *\n * @method SimpleStore.extend\n * @param {object} [props={}] Properties to add to the prototype of the\n * subclass.\n * @param {object} [props.constructor] Provide a custom constructor function\n * to be used as the subclass itself.\n * @param {object} [classProps={}] Static properties to add to the subclass.\n * @returns {Constructor} Subclass of this SimpleStore class.\n * @since 3.0.0\n */\n","import utils from './utils'\nimport './decorators'\nimport Collection from './Collection'\n\nconst DOMAIN = 'LinkedCollection'\n\n/**\n * Extends {@link Collection}. Used by a {@link DataStore} to implement an\n * Identity Map.\n *\n * ```javascript\n * import {LinkedCollection} from 'js-data'\n * ```\n *\n * @class LinkedCollection\n * @extends Collection\n * @param {array} [records] Initial set of records to insert into the\n * collection. See {@link Collection}.\n * @param {object} [opts] Configuration options. See {@link Collection}.\n * @returns {Mapper}\n */\nexport default class LinkedCollection extends Collection {\n  // Make sure this collection has somewhere to store \"added\" timestamps\n  // _added = {}\n\n  constructor (records, opts) {\n    super(records, opts)\n    // Make sure this collection has somewhere to store \"added\" timestamps\n\n    // Make sure this collection has a reference to a datastore\n    if (!this.datastore) {\n      throw utils.err(`new ${DOMAIN}`, 'opts.datastore')(400, 'DataStore', this.datastore)\n    }\n  }\n\n  _addMeta (record, timestamp) {\n    // Track when this record was added\n    this._added[this.recordId(record)] = timestamp\n\n    if (utils.isFunction(record._set)) {\n      record._set('$', timestamp)\n    }\n  }\n\n  _clearMeta (record) {\n    delete this._added[this.recordId(record)]\n    if (utils.isFunction(record._set)) {\n      record._set('$') // unset\n    }\n  }\n\n  _onRecordEvent (...args) {\n    Collection.prototype._onRecordEvent.apply(this, args)\n    const event = args[0]\n    // This is a very brute force method\n    // Lots of room for optimization\n    if (utils.isString(event) && event.indexOf('change') === 0) {\n      this.updateIndexes(args[1])\n    }\n  }\n\n  add (records, opts) {\n    const mapper = this.mapper\n    const timestamp = new Date().getTime()\n    const singular = utils.isObject(records) && !utils.isArray(records)\n\n    if (singular) {\n      records = [records]\n    }\n    records = super.add(records, opts)\n\n    if (mapper.relationList.length && records.length) {\n      // Check the currently visited record for relations that need to be\n      // inserted into their respective collections.\n      mapper.relationList.forEach(function (def) {\n        def.addLinkedRecords(records)\n      })\n    }\n\n    records.forEach((record) => this._addMeta(record, timestamp))\n\n    return singular ? records[0] : records\n  }\n\n  remove (idOrRecord, opts) {\n    const mapper = this.mapper\n    const record = super.remove(idOrRecord, opts)\n    if (record) {\n      this._clearMeta(record)\n    }\n\n    if (mapper.relationList.length && record) {\n      mapper.relationList.forEach(function (def) {\n        def.removeLinkedRecords(mapper, [record])\n      })\n    }\n\n    return record\n  }\n\n  removeAll (query, opts) {\n    const mapper = this.mapper\n    const records = super.removeAll(query, opts)\n    records.forEach(this._clearMeta, this)\n\n    if (mapper.relationList.length && records.length) {\n      mapper.relationList.forEach(function (def) {\n        def.removeLinkedRecords(mapper, records)\n      })\n    }\n\n    return records\n  }\n}\n\n/**\n * Create a subclass of this LinkedCollection:\n *\n * @example <caption>LinkedCollection.extend</caption>\n * const JSData = require('js-data');\n * const { LinkedCollection } = JSData;\n * console.log('Using JSData v' + JSData.version.full);\n *\n * // Extend the class using ES2015 class syntax.\n * class CustomLinkedCollectionClass extends LinkedCollection {\n *   foo () { return 'bar'; }\n *   static beep () { return 'boop'; }\n * }\n * const customLinkedCollection = new CustomLinkedCollectionClass();\n * console.log(customLinkedCollection.foo());\n * console.log(CustomLinkedCollectionClass.beep());\n *\n * // Extend the class using alternate method.\n * const OtherLinkedCollectionClass = LinkedCollection.extend({\n *   foo () { return 'bar'; }\n * }, {\n *   beep () { return 'boop'; }\n * });\n * const otherLinkedCollection = new OtherLinkedCollectionClass();\n * console.log(otherLinkedCollection.foo());\n * console.log(OtherLinkedCollectionClass.beep());\n *\n * // Extend the class, providing a custom constructor.\n * function AnotherLinkedCollectionClass () {\n *   LinkedCollection.call(this);\n *   this.created_at = new Date().getTime();\n * }\n * LinkedCollection.extend({\n *   constructor: AnotherLinkedCollectionClass,\n *   foo () { return 'bar'; }\n * }, {\n *   beep () { return 'boop'; }\n * });\n * const anotherLinkedCollection = new AnotherLinkedCollectionClass();\n * console.log(anotherLinkedCollection.created_at);\n * console.log(anotherLinkedCollection.foo());\n * console.log(AnotherLinkedCollectionClass.beep());\n *\n * @method LinkedCollection.extend\n * @param {object} [props={}] Properties to add to the prototype of the\n * subclass.\n * @param {object} [props.constructor] Provide a custom constructor function\n * to be used as the subclass itself.\n * @param {object} [classProps={}] Static properties to add to the subclass.\n * @returns {Constructor} Subclass of this LinkedCollection class.\n * @since 3.0.0\n */\n","import utils, { safeSetLink, safeSetProp } from './utils'\n\nimport {\n  belongsToType,\n  hasManyType,\n  hasOneType\n} from './decorators'\nimport SimpleStore from './SimpleStore'\nimport LinkedCollection from './LinkedCollection'\n\nconst DATASTORE_DEFAULTS = {\n  /**\n   * Whether in-memory relations should be unlinked from records after they are\n   * destroyed.\n   *\n   * @default true\n   * @name DataStore#unlinkOnDestroy\n   * @since 3.0.0\n   * @type {boolean}\n   */\n  unlinkOnDestroy: true\n}\n\n/**\n * The `DataStore` class is an extension of {@link SimpleStore}. Not only does\n * `DataStore` manage mappers and store data in collections, it uses the\n * {@link LinkedCollection} class to link related records together in memory.\n *\n * ```javascript\n * import { DataStore } from 'js-data';\n * ```\n *\n * @example\n * import { DataStore } from 'js-data';\n * import HttpAdapter from 'js-data-http';\n * const store = new DataStore();\n *\n * // DataStore#defineMapper returns a direct reference to the newly created\n * // Mapper.\n * const UserMapper = store.defineMapper('user');\n *\n * // DataStore#as returns the store scoped to a particular Mapper.\n * const UserStore = store.as('user');\n *\n * // Call \"find\" on \"UserMapper\" (Stateless ORM)\n * UserMapper.find(1).then((user) => {\n *   // retrieved a \"user\" record via the http adapter, but that's it\n *\n *   // Call \"find\" on \"store\" targeting \"user\" (Stateful DataStore)\n *   return store.find('user', 1); // same as \"UserStore.find(1)\"\n * }).then((user) => {\n *   // not only was a \"user\" record retrieved, but it was added to the\n *   // store's \"user\" collection\n *   const cachedUser = store.getCollection('user').get(1);\n *   console.log(user === cachedUser); // true\n * });\n *\n * @class DataStore\n * @extends SimpleStore\n * @param {object} [opts] Configuration options. See {@link SimpleStore}.\n * @param {boolean} [opts.collectionClass={@link LinkedCollection}] See {@link DataStore#collectionClass}.\n * @param {boolean} [opts.debug=false] See {@link Component#debug}.\n * @param {boolean} [opts.unlinkOnDestroy=true] See {@link DataStore#unlinkOnDestroy}.\n * @param {boolean|Function} [opts.usePendingFind=true] See {@link DataStore#usePendingFind}.\n * @param {boolean|Function} [opts.usePendingFindAll=true] See {@link DataStore#usePendingFindAll}.\n * @returns {DataStore}\n * @see SimpleStore\n * @since 3.0.0\n * @tutorial [\"http://www.js-data.io/v3.0/docs/components-of-jsdata#datastore\",\"Components of JSData: DataStore\"]\n * @tutorial [\"http://www.js-data.io/v3.0/docs/working-with-the-datastore\",\"Working with the DataStore\"]\n * @tutorial [\"http://www.js-data.io/v3.0/docs/jsdata-and-the-browser\",\"Notes on using JSData in the Browser\"]\n */\nexport default class DataStore extends SimpleStore {\n  constructor (opts = {}) {\n    // Fill in any missing options with the defaults\n    utils.fillIn(opts, DATASTORE_DEFAULTS)\n    opts.collectionClass || (opts.collectionClass = LinkedCollection)\n    super(opts)\n  }\n\n  /**\n   * Creates a new [Mapper] with [name] from the [opts]\n   * @param {string} name\n   * @param {object} opts\n   * @returns {*}\n   */\n  defineMapper (name, opts) {\n    // Complexity of this method is beyond simply using => functions to bind context\n    const self = this\n    const mapper = super.defineMapper(name, opts)\n    const idAttribute = mapper.idAttribute\n    const collection = this.getCollection(name)\n\n    mapper.relationList.forEach(function (def) {\n      const relation = def.relation\n      const localField = def.localField\n      const path = `links.${localField}`\n      const foreignKey = def.foreignKey\n      const type = def.type\n      const updateOpts = { index: foreignKey }\n      let descriptor\n\n      const getter = function () { return this._get(path) }\n\n      if (type === belongsToType) {\n        if (!collection.indexes[foreignKey]) {\n          collection.createIndex(foreignKey)\n        }\n\n        descriptor = {\n          get: getter,\n          // e.g. profile.user = someUser\n          // or comment.post = somePost\n          set (record) {\n            // e.g. const otherUser = profile.user\n            const currentParent = this._get(path)\n            // e.g. profile.user === someUser\n            if (record === currentParent) {\n              return currentParent\n            }\n            const id = utils.get(this, idAttribute)\n            const inverseDef = def.getInverse(mapper)\n\n            // e.g. profile.user !== someUser\n            // or comment.post !== somePost\n            if (currentParent && inverseDef) {\n              this.removeInverseRelation(currentParent, id, inverseDef, idAttribute)\n            }\n            if (record) {\n              // e.g. profile.user = someUser\n              const relatedIdAttribute = def.getRelation().idAttribute\n              const relatedId = utils.get(record, relatedIdAttribute)\n\n              // Prefer store record\n              if (relatedId !== undefined && this._get('$')) {\n                record = self.get(relation, relatedId) || record\n              }\n\n              // Set locals\n              // e.g. profile.user = someUser\n              // or comment.post = somePost\n              safeSetLink(this, localField, record)\n              safeSetProp(this, foreignKey, relatedId)\n              collection.updateIndex(this, updateOpts)\n\n              if (inverseDef) {\n                this.setupInverseRelation(record, id, inverseDef, idAttribute)\n              }\n            } else {\n              // Unset in-memory link only\n              // e.g. profile.user = undefined\n              // or comment.post = undefined\n              safeSetLink(this, localField, undefined)\n            }\n            return record\n          }\n        }\n\n        let foreignKeyDescriptor = Object.getOwnPropertyDescriptor(mapper.recordClass.prototype, foreignKey)\n        if (!foreignKeyDescriptor) {\n          foreignKeyDescriptor = {\n            enumerable: true\n          }\n        }\n        const originalGet = foreignKeyDescriptor.get\n        foreignKeyDescriptor.get = function () {\n          if (originalGet) {\n            return originalGet.call(this)\n          }\n          return this._get(`props.${foreignKey}`)\n        }\n        const originalSet = foreignKeyDescriptor.set\n        foreignKeyDescriptor.set = function (value) {\n          if (originalSet) {\n            originalSet.call(this, value)\n          }\n          const currentParent = utils.get(this, localField)\n          const id = utils.get(this, idAttribute)\n          const inverseDef = def.getInverse(mapper)\n          const currentParentId = currentParent ? utils.get(currentParent, def.getRelation().idAttribute) : undefined\n\n          if (inverseDef && currentParent && currentParentId !== undefined && currentParentId !== value) {\n            if (inverseDef.type === hasOneType) {\n              safeSetLink(currentParent, inverseDef.localField, undefined)\n            } else if (inverseDef.type === hasManyType) {\n              const children = utils.get(currentParent, inverseDef.localField)\n              if (id === undefined) {\n                utils.remove(children, (child) => child === this)\n              } else {\n                utils.remove(children, (child) => child === this || id === utils.get(child, idAttribute))\n              }\n            }\n          }\n\n          safeSetProp(this, foreignKey, value)\n          collection.updateIndex(this, updateOpts)\n\n          if ((value === undefined || value === null)) {\n            if (currentParentId !== undefined) {\n              // Unset locals\n              utils.set(this, localField, undefined)\n            }\n          } else if (this._get('$')) {\n            const storeRecord = self.get(relation, value)\n            if (storeRecord) {\n              utils.set(this, localField, storeRecord)\n            }\n          }\n        }\n        Object.defineProperty(mapper.recordClass.prototype, foreignKey, foreignKeyDescriptor)\n      } else if (type === hasManyType) {\n        const localKeys = def.localKeys\n        const foreignKeys = def.foreignKeys\n\n        // TODO: Handle case when belongsTo relation isn't ever defined\n        if (self._collections[relation] && foreignKey && !self.getCollection(relation).indexes[foreignKey]) {\n          self.getCollection(relation).createIndex(foreignKey)\n        }\n\n        descriptor = {\n          get () {\n            const current = getter.call(this)\n            if (!current) {\n              this._set(path, [])\n            }\n            return getter.call(this)\n          },\n          // e.g. post.comments = someComments\n          // or user.groups = someGroups\n          // or group.users = someUsers\n          set (records) {\n            if (records && !utils.isArray(records)) {\n              records = [records]\n            }\n            const id = utils.get(this, idAttribute)\n            const relatedIdAttribute = def.getRelation().idAttribute\n            const inverseDef = def.getInverse(mapper)\n            const inverseLocalField = inverseDef.localField\n            const current = this._get(path) || []\n            const toLink = []\n            const toLinkIds = {}\n\n            if (records) {\n              records.forEach((record) => {\n                // e.g. comment.id\n                const relatedId = utils.get(record, relatedIdAttribute)\n                const currentParent = utils.get(record, inverseLocalField)\n                if (currentParent && currentParent !== this) {\n                  const currentChildrenOfParent = utils.get(currentParent, localField)\n                  // e.g. somePost.comments.remove(comment)\n                  if (relatedId === undefined) {\n                    utils.remove(currentChildrenOfParent, (child) => child === record)\n                  } else {\n                    utils.remove(currentChildrenOfParent, (child) => child === record || relatedId === utils.get(child, relatedIdAttribute))\n                  }\n                }\n                if (relatedId !== undefined) {\n                  if (this._get('$')) {\n                    // Prefer store record\n                    record = self.get(relation, relatedId) || record\n                  }\n                  // e.g. toLinkIds[comment.id] = comment\n                  toLinkIds[relatedId] = record\n                }\n                toLink.push(record)\n              })\n            }\n\n            // e.g. post.comments = someComments\n            if (foreignKey) {\n              current.forEach((record) => {\n                // e.g. comment.id\n                const relatedId = utils.get(record, relatedIdAttribute)\n                if ((relatedId === undefined && toLink.indexOf(record) === -1) || (relatedId !== undefined && !(relatedId in toLinkIds))) {\n                  // Update (unset) inverse relation\n                  if (records) {\n                    // e.g. comment.post_id = undefined\n                    safeSetProp(record, foreignKey, undefined)\n                    // e.g. CommentCollection.updateIndex(comment, { index: 'post_id' })\n                    self.getCollection(relation).updateIndex(record, updateOpts)\n                  }\n                  // e.g. comment.post = undefined\n                  safeSetLink(record, inverseLocalField, undefined)\n                }\n              })\n              toLink.forEach((record) => {\n                // Update (set) inverse relation\n                // e.g. comment.post_id = post.id\n                safeSetProp(record, foreignKey, id)\n                // e.g. CommentCollection.updateIndex(comment, { index: 'post_id' })\n                self.getCollection(relation).updateIndex(record, updateOpts)\n                // e.g. comment.post = post\n                safeSetLink(record, inverseLocalField, this)\n              })\n            } else if (localKeys) {\n              // Update locals\n              // e.g. group.users = someUsers\n              // Update (set) inverse relation\n              const ids = toLink.map((child) => utils.get(child, relatedIdAttribute)).filter((id) => id !== undefined)\n              // e.g. group.user_ids = [1,2,3,...]\n              utils.set(this, localKeys, ids)\n              // Update (unset) inverse relation\n              if (inverseDef.foreignKeys) {\n                current.forEach((child) => {\n                  const relatedId = utils.get(child, relatedIdAttribute)\n                  if ((relatedId === undefined && toLink.indexOf(child) === -1) || (relatedId !== undefined && !(relatedId in toLinkIds))) {\n                    // Update inverse relation\n                    // safeSetLink(child, inverseLocalField, undefined)\n                    const parents = utils.get(child, inverseLocalField) || []\n                    // e.g. someUser.groups.remove(group)\n                    if (id === undefined) {\n                      utils.remove(parents, (parent) => parent === this)\n                    } else {\n                      utils.remove(parents, (parent) => parent === this || id === utils.get(parent, idAttribute))\n                    }\n                  }\n                })\n                toLink.forEach((child) => {\n                  // Update (set) inverse relation\n                  const parents = utils.get(child, inverseLocalField)\n                  // e.g. someUser.groups.push(group)\n                  if (id === undefined) {\n                    utils.noDupeAdd(parents, this, (parent) => parent === this)\n                  } else {\n                    utils.noDupeAdd(parents, this, (parent) => parent === this || id === utils.get(parent, idAttribute))\n                  }\n                })\n              }\n            } else if (foreignKeys) {\n              // e.g. user.groups = someGroups\n              // Update (unset) inverse relation\n              current.forEach((parent) => {\n                const ids = utils.get(parent, foreignKeys) || []\n                // e.g. someGroup.user_ids.remove(user.id)\n                utils.remove(ids, (_key) => id === _key)\n                const children = utils.get(parent, inverseLocalField)\n                // e.g. someGroup.users.remove(user)\n                if (id === undefined) {\n                  utils.remove(children, (child) => child === this)\n                } else {\n                  utils.remove(children, (child) => child === this || id === utils.get(child, idAttribute))\n                }\n              })\n              // Update (set) inverse relation\n              toLink.forEach((parent) => {\n                const ids = utils.get(parent, foreignKeys) || []\n                utils.noDupeAdd(ids, id, (_key) => id === _key)\n                const children = utils.get(parent, inverseLocalField)\n                if (id === undefined) {\n                  utils.noDupeAdd(children, this, (child) => child === this)\n                } else {\n                  utils.noDupeAdd(children, this, (child) => child === this || id === utils.get(child, idAttribute))\n                }\n              })\n            }\n\n            this._set(path, toLink)\n            return toLink\n          }\n        }\n      } else if (type === hasOneType) {\n        // TODO: Handle case when belongsTo relation isn't ever defined\n        if (self._collections[relation] && foreignKey && !self.getCollection(relation).indexes[foreignKey]) {\n          self.getCollection(relation).createIndex(foreignKey)\n        }\n        descriptor = {\n          get: getter,\n          // e.g. user.profile = someProfile\n          set (record) {\n            const current = this._get(path)\n            if (record === current) {\n              return current\n            }\n            const inverseLocalField = def.getInverse(mapper).localField\n            // Update (unset) inverse relation\n            if (current) {\n              safeSetProp(current, foreignKey, undefined)\n              self.getCollection(relation).updateIndex(current, updateOpts)\n              safeSetLink(current, inverseLocalField, undefined)\n            }\n            if (record) {\n              const relatedId = utils.get(record, def.getRelation().idAttribute)\n              // Prefer store record\n              if (relatedId !== undefined) {\n                record = self.get(relation, relatedId) || record\n              }\n\n              // Set locals\n              safeSetLink(this, localField, record)\n\n              // Update (set) inverse relation\n              safeSetProp(record, foreignKey, utils.get(this, idAttribute))\n              self.getCollection(relation).updateIndex(record, updateOpts)\n              safeSetLink(record, inverseLocalField, this)\n            } else {\n              // Unset locals\n              safeSetLink(this, localField, undefined)\n            }\n            return record\n          }\n        }\n      }\n\n      if (descriptor) {\n        descriptor.enumerable = def.enumerable === undefined ? false : def.enumerable\n        if (def.get) {\n          const origGet = descriptor.get\n          descriptor.get = function () {\n            return def.get(def, this, (...args) => origGet.apply(this, args))\n          }\n        }\n        if (def.set) {\n          const origSet = descriptor.set\n          descriptor.set = function (related) {\n            return def.set(def, this, related, (value) => origSet.call(this, value === undefined ? related : value))\n          }\n        }\n        Object.defineProperty(mapper.recordClass.prototype, localField, descriptor)\n      }\n    })\n\n    return mapper\n  }\n\n  destroy (name, id, opts = {}) {\n    return super.destroy(name, id, opts).then((result) => {\n      let record\n      if (opts.raw) {\n        record = result.data\n      } else {\n        record = result\n      }\n\n      if (record && this.unlinkOnDestroy) {\n        const _opts = utils.plainCopy(opts)\n        _opts.withAll = true\n        utils.forEachRelation(this.getMapper(name), _opts, (def) => {\n          utils.set(record, def.localField, undefined)\n        })\n      }\n      return result\n    })\n  }\n\n  destroyAll (name, query, opts = {}) {\n    return super.destroyAll(name, query, opts).then((result) => {\n      let records\n      if (opts.raw) {\n        records = result.data\n      } else {\n        records = result\n      }\n\n      if (records && records.length && this.unlinkOnDestroy) {\n        const _opts = utils.plainCopy(opts)\n        _opts.withAll = true\n        utils.forEachRelation(this.getMapper(name), _opts, (def) => {\n          records.forEach((record) => {\n            utils.set(record, def.localField, undefined)\n          })\n        })\n      }\n      return result\n    })\n  }\n}\n","/**\n * Registered as `js-data` in NPM and Bower.\n *\n * Also available from CDN.JS and JSDelivr.\n *\n * @module js-data\n *\n * @example <caption>Install from NPM</caption>\n * npm i --save js-data@beta\n * @example <caption>Install from Bower</caption>\n * bower i --save js-data@3.0.0-beta.1\n * @example <caption>Install from CDN.JS</caption>\n * <script src=\"https://cdnjs.cloudflare.com/ajax/libs/js-data/3.0.0-beta.1/js-data.min.js\"></script>\n * @example <caption>Install from JSDelivr</caption>\n * <script src=\"https://cdn.jsdelivr.net/js-data/3.0.0-beta.1/js-data.min.js\"></script>\n * @example <caption>Load into your app via script tag</caption>\n * <script src=\"/path/to/js-data.min.js\"></script>\n * <script>\n *   console.log(JSData.version.full); // \"3.0.0-beta.1\"\n * </script>\n * @example <caption>Load into your app via CommonJS</caption>\n * var JSData = require('js-data');\n * @example <caption>Load into your app via ES2015 Modules</caption>\n * import * as JSData from 'js-data';\n * @example <caption>Load into your app via AMD</caption>\n * define('myApp', ['js-data'], function (JSData) { ... });\n */\n\n/**\n * JSData's utility methods.\n *\n * @example\n * import { utils } from 'js-data';\n * console.log(utils.isString('foo')); // true\n *\n * @name module:js-data.utils\n * @property {Function} Promise See {@link utils.Promise}.\n * @see utils\n * @since 3.0.0\n * @type {Object}\n */\nimport utils from './utils'\n\n/**\n * JSData's {@link Collection} class.\n *\n * @example\n * import { Collection } from 'js-data';\n * const collection = new Collection();\n *\n * @name module:js-data.Collection\n * @see Collection\n * @since 3.0.0\n * @tutorial [\"http://www.js-data.io/v3.0/docs/components-of-jsdata#collection\",\"Components of JSData: Collection\"]\n * @type {Constructor}\n */\nimport Collection from './Collection'\n\n/**\n * JSData's {@link Component} class. Most components in JSData extend this\n * class.\n *\n * @example\n * import { Component } from 'js-data';\n * // Make a custom component.\n * const MyComponent = Component.extend({\n *   myMethod (someArg) { ... }\n * });\n *\n * @name module:js-data.Component\n * @see Component\n * @since 3.0.0\n * @type {Constructor}\n */\nimport Component from './Component'\n\n/**\n * JSData's {@link Container} class. Defines and manages {@link Mapper}s. Used\n * in Node.js and in the browser, though in the browser you may want to use\n * {@link DataStore} instead.\n *\n * @example\n * import { Container } from 'js-data';\n * const store = new Container();\n *\n * @name module:js-data.Container\n * @see Container\n * @since 3.0.0\n * @tutorial [\"http://www.js-data.io/v3.0/docs/components-of-jsdata#container\",\"Components of JSData: Container\"]\n * @type {Constructor}\n */\nimport { Container } from './Container'\n\n/**\n * JSData's {@link DataStore} class. Primarily for use in the browser. In\n * Node.js you probably want to use {@link Container} instead.\n *\n * @example\n * import { DataStore } from 'js-data';\n * const store = new DataStore();\n *\n * @name module:js-data.DataStore\n * @see DataStore\n * @since 3.0.0\n * @tutorial [\"http://www.js-data.io/v3.0/docs/components-of-jsdata#datastore\",\"Components of JSData: DataStore\"]\n * @type {Constructor}\n */\nimport DataStore from './DataStore'\n\n/**\n * JSData's {@link Index} class, based on [mindex]{@link https://github.com/internalfx/mindex}.\n *\n * @name module:js-data.Index\n * @see Index\n * @since 3.0.0\n * @type {Constructor}\n */\nimport Index from '../lib/mindex/index'\n\n/**\n * JSData's {@link LinkedCollection} class. Used by the {@link DataStore}\n * component. If you need to create a collection manually, you should probably\n * use the {@link Collection} class.\n *\n * @name module:js-data.LinkedCollection\n * @see DataStore\n * @see LinkedCollection\n * @since 3.0.0\n * @type {Constructor}\n */\nimport LinkedCollection from './LinkedCollection'\n\n/**\n * JSData's {@link Mapper} class. The core of the ORM.\n *\n * @example <caption>Recommended use</caption>\n * import { Container } from 'js-data';\n * const store = new Container();\n * store.defineMapper('user');\n *\n * @example <caption>Create Mapper manually</caption>\n * import { Mapper } from 'js-data';\n * const UserMapper = new Mapper({ name: 'user' });\n *\n * @name module:js-data.Mapper\n * @see Container\n * @see Mapper\n * @since 3.0.0\n * @tutorial [\"http://www.js-data.io/v3.0/docs/modeling-your-data\",\"Modeling your data\"]\n * @tutorial [\"http://www.js-data.io/v3.0/docs/components-of-jsdata#mapper\",\"Components of JSData: Mapper\"]\n * @type {Constructor}\n */\nimport Mapper from './Mapper'\n\n/**\n * JSData's {@link Query} class. Used by the {@link Collection} component.\n *\n * @name module:js-data.Query\n * @see Query\n * @since 3.0.0\n * @type {Constructor}\n */\nimport Query from './Query'\n\n/**\n * JSData's {@link Record} class.\n *\n * @example\n * import { Container } from 'js-data';\n * const store = new Container();\n * store.defineMapper('user');\n * const user = store.createRecord('user');\n *\n * @name module:js-data.Record\n * @see Record\n * @since 3.0.0\n * @tutorial [\"http://www.js-data.io/v3.0/docs/components-of-jsdata#record\",\"Components of JSData: Record\"]\n * @type {Constructor}\n */\nimport Record from './Record'\n\n/**\n * JSData's {@link Schema} class. Implements http://json-schema.org/draft-04.\n *\n * @example\n * import { Container, Schema } from 'js-data';\n * const userSchema = new Schema({\n *   properties: {\n *     id: { type: 'string' },\n *     name: { type: 'string' }\n *   }\n * });\n * const store = new Container();\n * store.defineMapper('user', {\n *   schema: userSchema\n * });\n *\n * @name module:js-data.Schema\n * @see Schema\n * @see http://json-schema.org/\n * @since 3.0.0\n * @tutorial [\"http://www.js-data.io/v3.0/docs/components-of-jsdata#schema\",\"Components of JSData: schema\"]\n * @tutorial [\"http://www.js-data.io/v3.0/docs/schemas\",\"JSData's Schema Syntax\"]\n * @type {Constructor}\n */\nimport Schema from './Schema'\n\n/**\n * JSData's {@link Settable} class.\n *\n * @example\n * import { Settable } from 'js-data';\n * const obj = new Settable();\n * obj.set('secret', 'value');\n * console.log(JSON.stringify(obj)); // {}\n *\n * @name module:js-data.Settable\n * @see Settable\n * @since 3.0.0\n * @type {Constructor}\n */\nimport Settable from './Settable'\n\n/**\n * JSData's {@link SimpleStore} class. Primarily for use in the browser. In\n * Node.js you probably want to use {@link Container} instead.\n *\n * @example\n * import { SimpleStore } from 'js-data';\n * const store = new SimpleStore();\n *\n * @name module:js-data.SimpleStore\n * @see SimpleStore\n * @since 3.0.0\n * @tutorial [\"http://www.js-data.io/v3.0/docs/components-of-jsdata#SimpleStore\",\"Components of JSData: SimpleStore\"]\n * @type {Constructor}\n */\nimport SimpleStore from './SimpleStore'\n\n/**\n * Describes the version of this `JSData` object.\n *\n * @example\n * console.log(JSData.version.full); // \"3.0.0-beta.1\"\n *\n * @name version\n * @memberof module:js-data\n * @property {string} full The full semver value.\n * @property {number} major The major version number.\n * @property {number} minor The minor version number.\n * @property {number} patch The patch version number.\n * @property {(string|boolean)} alpha The alpha version value, otherwise `false`\n * if the current version is not alpha.\n * @property {(string|boolean)} beta The beta version value, otherwise `false`\n * if the current version is not beta.\n * @since 2.0.0\n * @type {Object}\n */\nexport const version = '<%= version %>'\n\nexport * from './decorators'\n\nexport {\n  Collection,\n  Component,\n  Container,\n  DataStore,\n  Index,\n  LinkedCollection,\n  Mapper,\n  Query,\n  Record,\n  Schema,\n  Settable,\n  SimpleStore,\n  utils\n}\n"],"names":["DOMAIN","INFINITY","MAX_INTEGER","BOOL_TAG","DATE_TAG","FUNC_TAG","NUMBER_TAG","OBJECT_TAG","REGEXP_TAG","STRING_TAG","objToString","Object","prototype","toString","PATH","ERRORS","arguments","toInteger","value","sign","remainder","toStr","call","isPlainObject","constructor","mkdirP","object","path","parts","split","forEach","key","utils","Promise","_","dest","src","forOwn","undefined","isFunction","indexOf","_forRelation","opts","def","fn","thisArg","relationName","relation","containedName","index","with","_getIndex","localField","withAll","optsCopy","fillIn","getRelation","slice","_activeWith","splice","i","length","substr","list","_relation","isObject","addHiddenPropsToTarget","target","props","map","keys","propName","descriptor","getOwnPropertyDescriptor","enumerable","defineProperties","areDifferent","newObject","oldObject","diff","diffObjects","diffCount","added","removed","changed","copy","from","to","stackFrom","stackTo","blacklist","plain","isArray","isDate","Date","getTime","isRegExp","RegExp","source","match","lastIndex","create","getPrototypeOf","err","push","result","hasOwnProperty","isBlacklisted","deepFillIn","existing","deepMixIn","equalsFn","ignore","deepEqual","newKeys","filter","oldKeys","oldValue","newValue","equal","a","b","domain","code","prefix","message","apply","Array","Error","eventify","getter","setter","_events","emit","events","args","type","shift","listeners","f","c","all","unshift","off","func","on","findIndex","array","record","forEachRelation","mapper","relationList","obj","len","fromJson","json","isString","JSON","parse","get","prop","last","pop","getSuper","instance","isCtor","ctor","__super__","__proto__","intersection","array1","array2","item","matches","test","isBoolean","isInteger","isNull","isNumber","isSorN","isUndefined","logify","dbg","log","level","debug","toUpperCase","name","console","noDupeAdd","omit","_props","pick","reduce","plainCopy","reject","remove","resolve","set","_path","exec","_equal","toJson","stringify","unset","safeSetProp","field","_set","safeSetLink","Settable","_get","_unset","Component","defineProperty","writable","_listeners","INDEX_ERR","reserved","limit","offset","orderBy","skip","sort","where","escapeRegExp","percentRegExp","underscoreRegExp","escape","pattern","replace","Query","collection","data","fields","ops","predicates","clause","expr","op","groups","_where","prev","parser","_applyWhereFromArray","_applyWhereFromObject","group","isOr","keep","first","charAt","evaluate","_testArrayGroup","_testObjectGroup","leftKeys","rightKeys","getIndex","between","cA","cB","temp","compare","predicate","like","query","getData","forEachFn","keyList","concat","getAll","flags","num","Math","min","mapFn","funcName","isectEmpty","isectNotEmpty","in","notIn","contains","notContains","belongsToType","hasManyType","hasOneType","Relation","relatedMapper","options","TYPE_NAME","validateOptions","related","DOMAIN_ERR","foreignKey","localKey","relationFields","idAttribute","relatedRecord","_setForeignKey","relatedRecords","relatedData","inverse","findInverseRelation","isInversedTo","records","datastore","getLocalField","add","linkRecord","isEmptyLinks","canFindLinkFor","findExistingLinksFor","setLocalField","relatedId","unsaved","relatedCollection","canAutoAddLinks","setForeignKey","id","relationData","is","createRecord","createLinked","then","getCollection","BelongsToRelation","HasManyRelation","localKeys","foreignKeys","hasForeignKeys","recordId","ids","findExistingLinksByForeignKey","findExistingLinksByLocalKeys","findExistingLinksByForeignKeys","foreignIdField","createMany","HasOneRelation","RelationType","belongsTo","assignTo","hasMany","hasOne","superMethod","store","bind","creatingPath","noValidatePath","keepChangeHistoryPath","previousPath","Record","noValidate","keepChangeHistory","validateOnSet","toJSON","_mapper","quickHasChanges","validate","currentParent","inverseDef","children","child","relations","adapter","getAdapterName","tasks","task","raw","load","previous","preserve","commit","postProcess","changesOnly","changes","silent","hashCode","insertAt","removeAt","binarySearch","lo","hi","compared","mid","found","Index","fieldList","fieldGetter","isIndex","values","pos","dataLocation","newIndex","results","order","cb","visitAll","leftInclusive","rightInclusive","_between","leftKey","rightKey","currKey","peek","isUnique","removeRecord","j","insertRecord","COLLECTION_DEFAULTS","commitOnMerge","emitRecordEvents","onConflict","Collection","queryClass","indexes","beforeAdd","singular","existingNoValidate","updateIndexes","_onRecordEvent","afterAdd","run","queryOrFn","instances","removeAll","Ctor","initialValue","idOrRecord","beforeRemove","afterRemove","queryOrRecords","beforeRemoveAll","afterRemoveAll","mapCall","updateRecord","types","boolean","integer","null","number","string","segmentToString","segment","str","makePath","segments","makeError","actual","expected","addError","errors","maxLengthCommon","keyword","schema","max","minLengthCommon","validationKeywords","allOf","allErrors","_schema","anyOf","validated","dependencies","enum","possibleValues","join","items","checkingTuple","maximum","exclusiveMaximum","maxItems","maxLength","maxProperties","minimum","exclusiveMinimum","minItems","minLength","minProperties","multipleOf","not","oneOf","properties","additionalProperties","patternProperties","toValidate","undef","origProp","required","existingOnly","prevProp","validType","_type","validator","typeGroupValidators","uniqueItems","runOps","ANY_OPS","ARRAY_OPS","NUMERIC_OPS","OBJECT_OPS","STRING_OPS","validateAny","ctx","shouldPop","extends","changingPath","changedPath","changeHistoryPath","eventIdPath","silentPath","validationFailureMsg","numeric","Schema","definition","_definition","validationKeyword","unsetter","track","makeDescriptor","hasSet","default","orig","applyDefaults","configurable","keyPath","originalGet","error","current","changing","clearTimeout","setTimeout","changeRecord","timestamp","changeHistory","originalSet","_copy","applyDefaultsHooks","validatingHooks","makeNotify","getSchema","toProcess","originalExistingOnly","notify","notify2","LIFECYCLE_METHODS","count","defaults","destroy","destroyAll","find","findAll","sum","update","adapterArgs","beforeAssign","updateAll","updateMany","MAPPER_DEFAULTS","_adapters","applySchema","defaultAdapter","Mapper","lifecycleMethods","recordClass","methods","isPrototypeOf","_data","wrap","crud","originalRecord","parentRelationMap","adapterResponse","_runHook","_createParentRecordIfRequired","relationMap","_invokeAdapterMethod","createdProps","_createOrAssignChildRecordIfRequired","originalProps","_commitChanges","_end","recordOrRecords","newValues","isRequiresParentId","createParentRecord","context","isRequiresChildId","createChildRecord","parent","originalRecords","belongsToRelationData","Boolean","createdRecordsData","belongsToData","createdRecordData","ensureLinkedDataHasProperType","RecordCtor","method","config","upper","before","after","_value","getAdapter","_opts","assign","_result","getAdapters","hookName","hookArgs","defaultValueIndex","overridenResult","propsOrRecords","conversionOptions","pass","_record","some","_name","getMapperByName","getMapper","proxiedMapperMethods","Container","_mappers","mapperClass","mapperDefaults","original","_onMapperEvent","defineRelations","warn","defineMapper","proxiedCollectionMethods","ownMethodsForScoping","cachedFn","hashOrId","cached","_completedQueries","SIMPLESTORE_DEFAULTS","usePendingFind","usePendingFindAll","SimpleStore","collectionClass","_collections","_pendingQueries","addToCache","hash","self","collectionOpts","_added","indexed","createIndex","_onCollectionEvent","hashQuery","pendingQuery","cachedFind","force","promise","cacheFind","cachedFindAll","cacheFindAll","removeRelated","getForeignKey","indexName","prune","LinkedCollection","event","addLinkedRecords","_addMeta","_clearMeta","removeLinkedRecords","DATASTORE_DEFAULTS","unlinkOnDestroy","DataStore","updateOpts","getInverse","removeInverseRelation","relatedIdAttribute","updateIndex","setupInverseRelation","foreignKeyDescriptor","currentParentId","storeRecord","inverseLocalField","toLink","toLinkIds","currentChildrenOfParent","parents","_key","origGet","origSet","version"],"mappings":"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"}