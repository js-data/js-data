{"version":3,"file":"js-data.js","sources":["../src/utils.js","../src/Settable.js","../src/Component.js","../src/Query.js","../src/Relation.js","../src/Relation/BelongsTo.js","../src/Relation/HasMany.js","../src/Relation/HasOne.js","../src/relations.js","../src/decorators.js","../src/Record.js","../lib/mindex/_utils.js","../lib/mindex/index.js","../src/Collection.js","../src/Schema.js","../src/Mapper.js","../src/Container.js","../src/SimpleStore.js","../src/LinkedCollection.js","../src/DataStore.js","../src/index.js"],"sourcesContent":["/**\n * Utility methods used by JSData.\n *\n * @example\n * import { utils } from 'js-data';\n * console.log(utils.isString('foo')); // true\n *\n * @namespace utils\n * @type {Object}\n */\n\nconst DOMAIN = 'utils'\n\nconst INFINITY = 1 / 0\nconst MAX_INTEGER = 1.7976931348623157e+308\nconst BOOL_TAG = '[object Boolean]'\nconst DATE_TAG = '[object Date]'\nconst FUNC_TAG = '[object Function]'\nconst NUMBER_TAG = '[object Number]'\nconst OBJECT_TAG = '[object Object]'\nconst REGEXP_TAG = '[object RegExp]'\nconst STRING_TAG = '[object String]'\nconst objToString = Object.prototype.toString\nconst PATH = /^(.+)\\.(.+)$/\n\nconst ERRORS = {\n  '400' () { return `expected: ${arguments[0]}, found: ${arguments[2] ? arguments[1] : typeof arguments[1]}` },\n  '404' () { return `${arguments[0]} not found` }\n}\n\nconst toInteger = function (value) {\n  if (!value) {\n    return 0\n  }\n  // Coerce to number\n  value = +value\n  if (value === INFINITY || value === -INFINITY) {\n    const sign = (value < 0 ? -1 : 1)\n    return sign * MAX_INTEGER\n  }\n  const remainder = value % 1\n  return value === value ? (remainder ? value - remainder : value) : 0 // eslint-disable-line\n}\n\nconst toStr = function (value) {\n  return objToString.call(value)\n}\n\nconst isPlainObject = function (value) {\n  return (!!value && typeof value === 'object' && value.constructor === Object)\n}\n\nconst mkdirP = function (object, path) {\n  if (!path) {\n    return object\n  }\n  const parts = path.split('.')\n  parts.forEach(function (key) {\n    if (!object[key]) {\n      object[key] = {}\n    }\n    object = object[key]\n  })\n  return object\n}\n\nconst utils = {\n  /**\n   * Reference to the Promise constructor used by JSData. Defaults to\n   * `window.Promise` or `global.Promise`.\n   *\n   * @example <caption>Make JSData use a different `Promise` constructor</caption>\n   * import Promise from 'bluebird';\n   * import { utils } from 'js-data';\n   * utils.Promise = Promise;\n   *\n   * @name utils.Promise\n   * @since 3.0.0\n   * @type {Function}\n   */\n  Promise: Promise,\n\n  /**\n   * Shallow copy properties that meet the following criteria from `src` to\n   * `dest`:\n   *\n   * - own enumerable\n   * - not a function\n   * - does not start with \"_\"\n   *\n   * @method utils._\n   * @param {object} dest Destination object.\n   * @param {object} src Source object.\n   * @private\n   * @since 3.0.0\n   */\n  _ (dest, src) {\n    utils.forOwn(src, function (value, key) {\n      if (key && dest[key] === undefined && !utils.isFunction(value) && key.indexOf('_') !== 0) {\n        dest[key] = value\n      }\n    })\n  },\n\n  /**\n   * Recursively iterates over relations found in `opts.with`.\n   *\n   * @method utils._forRelation\n   * @param {object} opts Configuration options.\n   * @param {Relation} def Relation definition.\n   * @param {Function} fn Callback function.\n   * @param {*} [thisArg] Execution context for the callback function.\n   * @private\n   * @since 3.0.0\n   */\n  _forRelation (opts, def, fn, thisArg) {\n    const relationName = def.relation\n    let containedName = null\n    let index\n    opts || (opts = {})\n    opts.with || (opts.with = [])\n\n    if ((index = utils._getIndex(opts.with, relationName)) >= 0) {\n      containedName = relationName\n    } else if ((index = utils._getIndex(opts.with, def.localField)) >= 0) {\n      containedName = def.localField\n    }\n\n    if (opts.withAll) {\n      fn.call(thisArg, def, {})\n      return\n    } else if (!containedName) {\n      return\n    }\n    let optsCopy = {}\n    utils.fillIn(optsCopy, def.getRelation())\n    utils.fillIn(optsCopy, opts)\n    optsCopy.with = opts.with.slice()\n    optsCopy._activeWith = optsCopy.with.splice(index, 1)[0]\n    optsCopy.with.forEach(function (relation, i) {\n      if (relation && relation.indexOf(containedName) === 0 && relation.length >= containedName.length && relation[containedName.length] === '.') {\n        optsCopy.with[i] = relation.substr(containedName.length + 1)\n      } else {\n        optsCopy.with[i] = ''\n      }\n    })\n    fn.call(thisArg, def, optsCopy)\n  },\n\n  /**\n   * Find the index of a relation in the given list\n   *\n   * @method utils._getIndex\n   * @param {string[]} list List to search.\n   * @param {string} relation Relation to find.\n   * @private\n   * @returns {number}\n   */\n  _getIndex (list, relation) {\n    let index = -1\n    list.forEach(function (_relation, i) {\n      if (_relation === relation) {\n        index = i\n        return false\n      } else if (utils.isObject(_relation)) {\n        if (_relation.relation === relation) {\n          index = i\n          return false\n        }\n      }\n    })\n    return index\n  },\n\n  /**\n   * Define hidden (non-enumerable), writable properties on `target` from the\n   * provided `props`.\n   *\n   * @example\n   * import { utils } from 'js-data';\n   * function Cat () {}\n   * utils.addHiddenPropsToTarget(Cat.prototype, {\n   *   say () {\n   *     console.log('meow');\n   *   }\n   * });\n   * const cat = new Cat();\n   * cat.say(); // \"meow\"\n   *\n   * @method utils.addHiddenPropsToTarget\n   * @param {object} target That to which `props` should be added.\n   * @param {object} props Properties to be added to `target`.\n   * @since 3.0.0\n   */\n  addHiddenPropsToTarget (target, props) {\n    const map = {}\n    Object.keys(props).forEach(function (propName) {\n      const descriptor = Object.getOwnPropertyDescriptor(props, propName)\n\n      descriptor.enumerable = false\n      map[propName] = descriptor\n    })\n    Object.defineProperties(target, map)\n  },\n\n  /**\n   * Return whether the two objects are deeply different.\n   *\n   * @example\n   * import { utils } from 'js-data';\n   * utils.areDifferent({}, {}); // false\n   * utils.areDifferent({ a: 1 }, { a: 1 }); // false\n   * utils.areDifferent({ foo: 'bar' }, {}); // true\n   *\n   * @method utils.areDifferent\n   * @param {object} a Base object.\n   * @param {object} b Comparison object.\n   * @param {object} [opts] Configuration options.\n   * @param {Function} [opts.equalsFn={@link utils.deepEqual}] Equality function.\n   * @param {array} [opts.ignore=[]] Array of strings or RegExp of fields to ignore.\n   * @returns {boolean} Whether the two objects are deeply different.\n   * @see utils.diffObjects\n   * @since 3.0.0\n   */\n  areDifferent (newObject, oldObject, opts) {\n    opts || (opts = {})\n    const diff = utils.diffObjects(newObject, oldObject, opts)\n    const diffCount = Object.keys(diff.added).length +\n    Object.keys(diff.removed).length +\n    Object.keys(diff.changed).length\n    return diffCount > 0\n  },\n\n  /**\n   * Verified that the given constructor is being invoked via `new`, as opposed\n   * to just being called like a normal function.\n   *\n   * @example\n   * import { utils } from 'js-data';\n   * function Cat () {\n   *   utils.classCallCheck(this, Cat);\n   * }\n   * const cat = new Cat(); // this is ok\n   * Cat(); // this throws an error\n   *\n   * @method utils.classCallCheck\n   * @param {*} instance Instance that is being constructed.\n   * @param {Constructor} ctor Constructor function used to construct the\n   * instance.\n   * @since 3.0.0\n   * @throws {Error} Throws an error if the constructor is being improperly\n   * invoked.\n   */\n  classCallCheck (instance, ctor) {\n    if (!(instance instanceof ctor)) {\n      throw utils.err(`${ctor.name}`)(500, 'Cannot call a class as a function')\n    }\n  },\n\n  /**\n   * Deep copy a value.\n   *\n   * @example\n   * import { utils } from 'js-data';\n   * const a = { foo: { bar: 'baz' } };\n   * const b = utils.copy(a);\n   * a === b; // false\n   * utils.areDifferent(a, b); // false\n   *\n   * @param {*} from Value to deep copy.\n   * @param {*} [to] Destination object for the copy operation.\n   * @param {*} [stackFrom] For internal use.\n   * @param {*} [stackTo] For internal use.\n   * @param {string[]|RegExp[]} [blacklist] List of strings or RegExp of\n   * properties to skip.\n   * @param {boolean} [plain] Whether to make a plain copy (don't try to use\n   * original prototype).\n   * @returns {*} Deep copy of `from`.\n   * @since 3.0.0\n   */\n  copy (from, to, stackFrom, stackTo, blacklist, plain) {\n    if (!to) {\n      to = from\n      if (from) {\n        if (utils.isArray(from)) {\n          to = utils.copy(from, [], stackFrom, stackTo, blacklist, plain)\n        } else if (utils.isDate(from)) {\n          to = new Date(from.getTime())\n        } else if (utils.isRegExp(from)) {\n          to = new RegExp(from.source, from.toString().match(/[^/]*$/)[0])\n          to.lastIndex = from.lastIndex\n        } else if (utils.isObject(from)) {\n          if (plain) {\n            to = utils.copy(from, {}, stackFrom, stackTo, blacklist, plain)\n          } else {\n            to = utils.copy(from, Object.create(Object.getPrototypeOf(from)), stackFrom, stackTo, blacklist, plain)\n          }\n        }\n      }\n    } else {\n      if (from === to) {\n        throw utils.err(`${DOMAIN}.copy`)(500, 'Cannot copy! Source and destination are identical.')\n      }\n\n      stackFrom = stackFrom || []\n      stackTo = stackTo || []\n\n      if (utils.isObject(from)) {\n        let index = stackFrom.indexOf(from)\n        if (index !== -1) {\n          return stackTo[index]\n        }\n\n        stackFrom.push(from)\n        stackTo.push(to)\n      }\n\n      let result\n      if (utils.isArray(from)) {\n        let i\n        to.length = 0\n        for (i = 0; i < from.length; i++) {\n          result = utils.copy(from[i], null, stackFrom, stackTo, blacklist, plain)\n          if (utils.isObject(from[i])) {\n            stackFrom.push(from[i])\n            stackTo.push(result)\n          }\n          to.push(result)\n        }\n      } else {\n        if (utils.isArray(to)) {\n          to.length = 0\n        } else {\n          utils.forOwn(to, function (value, key) {\n            delete to[key]\n          })\n        }\n        for (var key in from) {\n          if (from.hasOwnProperty(key)) {\n            if (utils.isBlacklisted(key, blacklist)) {\n              continue\n            }\n            result = utils.copy(from[key], null, stackFrom, stackTo, blacklist, plain)\n            if (utils.isObject(from[key])) {\n              stackFrom.push(from[key])\n              stackTo.push(result)\n            }\n            to[key] = result\n          }\n        }\n      }\n    }\n    return to\n  },\n\n  /**\n   * Recursively shallow fill in own enumerable properties from `source` to\n   * `dest`.\n   *\n   * @example\n   * import { utils } from 'js-data';\n   * const a = { foo: { bar: 'baz' }, beep: 'boop' };\n   * const b = { beep: 'bip' };\n   * utils.deepFillIn(b, a);\n   * console.log(b); // {\"foo\":{\"bar\":\"baz\"},\"beep\":\"bip\"}\n   *\n   * @method utils.deepFillIn\n   * @param {object} dest The destination object.\n   * @param {object} source The source object.\n   * @see utils.fillIn\n   * @see utils.deepMixIn\n   * @since 3.0.0\n   */\n  deepFillIn (dest, source) {\n    if (source) {\n      utils.forOwn(source, function (value, key) {\n        const existing = dest[key]\n        if (isPlainObject(value) && isPlainObject(existing)) {\n          utils.deepFillIn(existing, value)\n        } else if (!dest.hasOwnProperty(key) || dest[key] === undefined) {\n          dest[key] = value\n        }\n      })\n    }\n    return dest\n  },\n\n  /**\n   * Recursively shallow copy enumerable properties from `source` to `dest`.\n   *\n   * @example\n   * import { utils } from 'js-data';\n   * const a = { foo: { bar: 'baz' }, beep: 'boop' };\n   * const b = { beep: 'bip' };\n   * utils.deepFillIn(b, a);\n   * console.log(b); // {\"foo\":{\"bar\":\"baz\"},\"beep\":\"boop\"}\n   *\n   * @method utils.deepMixIn\n   * @param {object} dest The destination object.\n   * @param {object} source The source object.\n   * @see utils.fillIn\n   * @see utils.deepFillIn\n   * @since 3.0.0\n   */\n  deepMixIn (dest, source) {\n    if (source) {\n      for (var key in source) {\n        const value = source[key]\n        const existing = dest[key]\n        if (isPlainObject(value) && isPlainObject(existing)) {\n          utils.deepMixIn(existing, value)\n        } else {\n          dest[key] = value\n        }\n      }\n    }\n    return dest\n  },\n\n  /**\n   * Return a diff of the base object to the comparison object.\n   *\n   * @example\n   * import { utils } from 'js-data';\n   * const oldObject = { foo: 'bar', a: 1234 };\n   * const newObject = { beep: 'boop', a: 5678 };\n   * const diff = utils.diffObjects(oldObject, newObject);\n   * console.log(diff.added); // {\"beep\":\"boop\"}\n   * console.log(diff.changed); // {\"a\":5678}\n   * console.log(diff.removed); // {\"foo\":undefined}\n   *\n   * @method utils.diffObjects\n   * @param {object} newObject Comparison object.\n   * @param {object} oldObject Base object.\n   * @param {object} [opts] Configuration options.\n   * @param {Function} [opts.equalsFn={@link utils.deepEqual}] Equality function.\n   * @param {array} [opts.ignore=[]] Array of strings or RegExp of fields to ignore.\n   * @returns {Object} The diff from the base object to the comparison object.\n   * @see utils.areDifferent\n   * @since 3.0.0\n   */\n  diffObjects (newObject, oldObject, opts) {\n    opts || (opts = {})\n    let equalsFn = opts.equalsFn\n    let blacklist = opts.ignore\n    const diff = {\n      added: {},\n      changed: {},\n      removed: {}\n    }\n    if (!utils.isFunction(equalsFn)) {\n      equalsFn = utils.deepEqual\n    }\n\n    const newKeys = Object.keys(newObject).filter(function (key) {\n      return !utils.isBlacklisted(key, blacklist)\n    })\n    const oldKeys = Object.keys(oldObject).filter(function (key) {\n      return !utils.isBlacklisted(key, blacklist)\n    })\n\n    // Check for properties that were added or changed\n    newKeys.forEach(function (key) {\n      const oldValue = oldObject[key]\n      const newValue = newObject[key]\n      if (equalsFn(oldValue, newValue)) {\n        return\n      }\n      if (oldValue === undefined) {\n        diff.added[key] = newValue\n      } else {\n        diff.changed[key] = newValue\n      }\n    })\n\n    // Check for properties that were removed\n    oldKeys.forEach(function (key) {\n      const oldValue = oldObject[key]\n      const newValue = newObject[key]\n      if (newValue === undefined && oldValue !== undefined) {\n        diff.removed[key] = undefined\n      }\n    })\n\n    return diff\n  },\n\n  /**\n   * Return whether the two values are equal according to the `==` operator.\n   *\n   * @example\n   * import { utils } from 'js-data';\n   * console.log(utils.equal(1,1)); // true\n   * console.log(utils.equal(1,'1')); // true\n   * console.log(utils.equal(93, 66)); // false\n   *\n   * @method utils.equal\n   * @param {*} a First value in the comparison.\n   * @param {*} b Second value in the comparison.\n   * @returns {boolean} Whether the two values are equal according to `==`.\n   * @since 3.0.0\n   */\n  equal (a, b) {\n    return a == b // eslint-disable-line\n  },\n\n  /**\n   * Produce a factory function for making Error objects with the provided\n   * metadata. Used throughout the various js-data components.\n   *\n   * @example\n   * import { utils } from 'js-data';\n   * const errorFactory = utils.err('domain', 'target');\n   * const error400 = errorFactory(400, 'expected type', 'actual type');\n   * console.log(error400); // [Error: [domain:target] expected: expected type, found: string\nhttp://www.js-data.io/v3.0/docs/errors#400]\n   * @method utils.err\n   * @param {string} domain Namespace.\n   * @param {string} target Target.\n   * @returns {Function} Factory function.\n   * @since 3.0.0\n   */\n  err (domain, target) {\n    return function (code) {\n      const prefix = `[${domain}:${target}] `\n      let message = ERRORS[code].apply(null, Array.prototype.slice.call(arguments, 1))\n      message = `${prefix}${message}\nhttp://www.js-data.io/v3.0/docs/errors#${code}`\n      return new Error(message)\n    }\n  },\n\n  /**\n   * Add eventing capabilities into the target object.\n   *\n   * @example\n   * import { utils } from 'js-data';\n   * const user = { name: 'John' };\n   * utils.eventify(user);\n   * user.on('foo', () => console.log(arguments));\n   * user.emit('foo', 1, 'bar'); // should log to console values (1, \"bar\")\n   *\n   * @method utils.eventify\n   * @param {object} target Target object.\n   * @param {Function} [getter] Custom getter for retrieving the object's event\n   * listeners.\n   * @param {Function} [setter] Custom setter for setting the object's event\n   * listeners.\n   * @since 3.0.0\n   */\n  eventify (target, getter, setter) {\n    target = target || this\n    let _events = {}\n    if (!getter && !setter) {\n      getter = function () { return _events }\n      setter = function (value) { _events = value }\n    }\n    Object.defineProperties(target, {\n      emit: {\n        value (...args) {\n          const events = getter.call(this) || {}\n          const type = args.shift()\n          let listeners = events[type] || []\n          let i\n          for (i = 0; i < listeners.length; i++) {\n            listeners[i].f.apply(listeners[i].c, args)\n          }\n          listeners = events.all || []\n          args.unshift(type)\n          for (i = 0; i < listeners.length; i++) {\n            listeners[i].f.apply(listeners[i].c, args)\n          }\n        }\n      },\n      off: {\n        value (type, func) {\n          const events = getter.call(this)\n          const listeners = events[type]\n          if (!listeners) {\n            setter.call(this, {})\n          } else if (func) {\n            for (let i = 0; i < listeners.length; i++) {\n              if (listeners[i].f === func) {\n                listeners.splice(i, 1)\n                break\n              }\n            }\n          } else {\n            listeners.splice(0, listeners.length)\n          }\n        }\n      },\n      on: {\n        value (type, func, thisArg) {\n          if (!getter.call(this)) {\n            setter.call(this, {})\n          }\n          const events = getter.call(this)\n          events[type] = events[type] || []\n          events[type].push({\n            c: thisArg,\n            f: func\n          })\n        }\n      }\n    })\n  },\n\n  /**\n   * Used for sublcassing. Invoke this method in the context of a superclass to\n   * to produce a subclass based on `props` and `classProps`.\n   *\n   * @example\n   * import { utils } from 'js-data';\n   * function Animal () {}\n   * Animal.extend = utils.extend;\n   * const Cat = Animal.extend({\n   *   say () {\n   *     console.log('meow');\n   *   }\n   * });\n   * const cat = new Cat();\n   * cat instanceof Animal; // true\n   * cat instanceof Cat; // true\n   * cat.say(); // \"meow\"\n   *\n   * @method utils.extend\n   * @param {object} props Instance properties for the subclass.\n   * @param {object} [props.constructor] Provide a custom constructor function\n   * to use as the subclass.\n   * @param {object} props Static properties for the subclass.\n   * @returns {Constructor} A new subclass.\n   * @since 3.0.0\n   */\n  extend (props, classProps) {\n    const superClass = this\n    let subClass\n\n    props || (props = {})\n    classProps || (classProps = {})\n\n    if (props.hasOwnProperty('constructor')) {\n      subClass = props.constructor\n      delete props.constructor\n    } else {\n      subClass = function (...args) {\n        utils.classCallCheck(this, subClass)\n        superClass.apply(this, args)\n      }\n    }\n\n    // Setup inheritance of instance members\n    subClass.prototype = Object.create(superClass && superClass.prototype, {\n      constructor: {\n        configurable: true,\n        enumerable: false,\n        value: subClass,\n        writable: true\n      }\n    })\n\n    const obj = Object\n    // Setup inheritance of static members\n    if (obj.setPrototypeOf) {\n      obj.setPrototypeOf(subClass, superClass)\n    } else if (classProps.strictEs6Class) {\n      subClass.__proto__ = superClass // eslint-disable-line\n    } else {\n      utils.forOwn(superClass, function (value, key) {\n        subClass[key] = value\n      })\n    }\n    if (!subClass.hasOwnProperty('__super__')) {\n      Object.defineProperty(subClass, '__super__', {\n        configurable: true,\n        value: superClass\n      })\n    }\n\n    utils.addHiddenPropsToTarget(subClass.prototype, props)\n    utils.fillIn(subClass, classProps)\n\n    return subClass\n  },\n\n  /**\n   * Shallow copy own enumerable properties from `src` to `dest` that are on\n   * `src` but are missing from `dest.\n   *\n   * @example\n   * import { utils } from 'js-data';\n   * const a = { foo: 'bar', beep: 'boop' };\n   * const b = { beep: 'bip' };\n   * utils.fillIn(b, a);\n   * console.log(b); // {\"foo\":\"bar\",\"beep\":\"bip\"}\n   *\n   * @method utils.fillIn\n   * @param {object} dest The destination object.\n   * @param {object} source The source object.\n   * @see utils.deepFillIn\n   * @see utils.deepMixIn\n   * @since 3.0.0\n   */\n  fillIn (dest, src) {\n    utils.forOwn(src, function (value, key) {\n      if (!dest.hasOwnProperty(key) || dest[key] === undefined) {\n        dest[key] = value\n      }\n    })\n  },\n\n  /**\n   * Find the last index of an item in an array according to the given checker function.\n   *\n   * @example\n   * import { utils } from 'js-data';\n   *\n   * const john = { name: 'John', age: 20 };\n   * const sara = { name: 'Sara', age: 25 };\n   * const dan = { name: 'Dan', age: 20 };\n   * const users = [john, sara, dan];\n   *\n   * console.log(utils.findIndex(users, (user) => user.age === 25)); // 1\n   * console.log(utils.findIndex(users, (user) => user.age > 19)); // 2\n   * console.log(utils.findIndex(users, (user) => user.name === 'John')); // 0\n   * console.log(utils.findIndex(users, (user) => user.name === 'Jimmy')); // -1\n   *\n   * @method utils.findIndex\n   * @param {array} array The array to search.\n   * @param {Function} fn Checker function.\n   * @returns {number} Index if found or -1 if not found.\n   * @since 3.0.0\n   */\n  findIndex (array, fn) {\n    let index = -1\n    if (!array) {\n      return index\n    }\n    array.forEach(function (record, i) {\n      if (fn(record)) {\n        index = i\n        return false\n      }\n    })\n    return index\n  },\n\n  /**\n   * Recursively iterate over a {@link Mapper}'s relations according to\n   * `opts.with`.\n   *\n   * @method utils.forEachRelation\n   * @param {Mapper} mapper Mapper.\n   * @param {object} opts Configuration options.\n   * @param {Function} fn Callback function.\n   * @param {*} thisArg Execution context for the callback function.\n   * @since 3.0.0\n   */\n  forEachRelation (mapper, opts, fn, thisArg) {\n    const relationList = mapper.relationList || []\n    if (!relationList.length) {\n      return\n    }\n    relationList.forEach(function (def) {\n      utils._forRelation(opts, def, fn, thisArg)\n    })\n  },\n\n  /**\n   * Iterate over an object's own enumerable properties.\n   *\n   * @example\n   * import { utils } from 'js-data';\n   * const a = { b: 1, c: 4 };\n   * let sum = 0;\n   * utils.forOwn(a, function (value, key) {\n   *   sum += value;\n   * });\n   * console.log(sum); // 5\n   *\n   * @method utils.forOwn\n   * @param {object} object The object whose properties are to be enumerated.\n   * @param {Function} fn Iteration function.\n   * @param {object} [thisArg] Content to which to bind `fn`.\n   * @since 3.0.0\n   */\n  forOwn (obj, fn, thisArg) {\n    const keys = Object.keys(obj)\n    const len = keys.length\n    let i\n    for (i = 0; i < len; i++) {\n      if (fn.call(thisArg, obj[keys[i]], keys[i], obj) === false) {\n        break\n      }\n    }\n  },\n\n  /**\n   * Proxy for `JSON.parse`.\n   *\n   * @example\n   * import { utils } from 'js-data';\n   *\n   * const a = utils.fromJson('{\"name\" : \"John\"}');\n   * console.log(a); // { name: 'John' }\n   *\n   * @method utils.fromJson\n   * @param {string} json JSON to parse.\n   * @returns {Object} Parsed object.\n   * @see utils.toJson\n   * @since 3.0.0\n   */\n  fromJson (json) {\n    return utils.isString(json) ? JSON.parse(json) : json\n  },\n\n  /**\n   * Retrieve the specified property from the given object. Supports retrieving\n   * nested properties.\n   *\n   * @example\n   * import { utils } from 'js-data';\n   * const a = { foo: { bar: 'baz' }, beep: 'boop' };\n   * console.log(utils.get(a, 'beep')); // \"boop\"\n   * console.log(utils.get(a, 'foo.bar')); // \"baz\"\n   *\n   * @method utils.get\n   * @param {object} object Object from which to retrieve a property's value.\n   * @param {string} prop Property to retrieve.\n   * @returns {*} Value of the specified property.\n   * @see utils.set\n   * @since 3.0.0\n   */\n  'get': function (object, prop) {\n    if (!prop) {\n      return\n    }\n    const parts = prop.split('.')\n    const last = parts.pop()\n\n    while (prop = parts.shift()) { // eslint-disable-line\n      object = object[prop]\n      if (object == null) { // eslint-disable-line\n        return\n      }\n    }\n\n    return object[last]\n  },\n\n  /**\n   * Return the superclass for the given instance or subclass. If an instance is\n   * provided, then finds the parent class of the instance's constructor.\n   *\n   * @example\n   * import { utils } from 'js-data';\n   * // using ES2015 classes\n   * class Foo {}\n   * class Bar extends Foo {}\n   * const barInstance = new Bar();\n   * let baseType = utils.getSuper(barInstance);\n   * console.log(Foo === baseType); // true\n   *\n   * // using Function constructor with utils.extend\n   * function Foo () {}\n   * Foo.extend = utils.extend;\n   * const Bar = Foo.extend();\n   * const barInstance = new Bar();\n   * let baseType = utils.getSuper(barInstance);\n   * console.log(Foo === baseType); // true\n   *\n   * @method utils.getSuper\n   * @param {Object|Function} instance Instance or constructor.\n   * @param {boolean} [isCtor=false] Whether `instance` is a constructor.\n   * @returns {Constructor} The superclass (grandparent constructor).\n   * @since 3.0.0\n   */\n  getSuper (instance, isCtor) {\n    const ctor = isCtor ? instance : instance.constructor\n    if (ctor.hasOwnProperty('__super__')) {\n      return ctor.__super__\n    }\n    return Object.getPrototypeOf(ctor) || ctor.__proto__ // eslint-disable-line\n  },\n\n  /**\n   * Return the intersection of two arrays.\n   *\n   * @example\n   * import { utils } from 'js-data';\n   * const arrA = ['green', 'red', 'blue', 'red'];\n   * const arrB = ['green', 'yellow', 'red'];\n   * const intersected = utils.intersection(arrA, arrB);\n   *\n   * console.log(intersected); // ['green', 'red'])\n   *\n   * @method utils.intersection\n   * @param {array} array1 First array.\n   * @param {array} array2 Second array.\n   * @returns {Array} Array of elements common to both arrays.\n   * @since 3.0.0\n   */\n  intersection (array1, array2) {\n    if (!array1 || !array2) {\n      return []\n    }\n    const result = []\n    let item\n    let i\n    const len = array1.length\n    for (i = 0; i < len; i++) {\n      item = array1[i]\n      if (result.indexOf(item) !== -1) {\n        continue\n      }\n      if (array2.indexOf(item) !== -1) {\n        result.push(item)\n      }\n    }\n    return result\n  },\n\n  /**\n   * Proxy for `Array.isArray`.\n   *\n   * @example\n   * import { utils } from 'js-data';\n   * const a = [1,2,3,4,5];\n   * const b = { foo: \"bar\" };\n   * console.log(utils.isArray(a)); // true\n   * console.log(utils.isArray(b)); // false\n   *\n   * @method utils.isArray\n   * @param {*} value The value to test.\n   * @returns {boolean} Whether the provided value is an array.\n   * @since 3.0.0\n   */\n  isArray: Array.isArray,\n\n  /**\n   * Return whether `prop` is matched by any string or regular expression in\n   * `blacklist`.\n   *\n   * @example\n   * import { utils } from 'js-data';\n   * const blacklist = [/^\\$hashKey/g, /^_/g, 'id'];\n   * console.log(utils.isBlacklisted(\"$hashKey\", blacklist)); // true\n   * console.log(utils.isBlacklisted(\"id\", blacklist)); // true\n   * console.log(utils.isBlacklisted(\"_myProp\", blacklist)); // true\n   * console.log(utils.isBlacklisted(\"my_id\", blacklist)); // false\n   *\n   * @method utils.isBlacklisted\n   * @param {string} prop The name of a property to check.\n   * @param {array} blacklist Array of strings and regular expressions.\n   * @returns {boolean} Whether `prop` was matched.\n   * @since 3.0.0\n   */\n  isBlacklisted (prop, blacklist) {\n    if (!blacklist || !blacklist.length) {\n      return false\n    }\n    let matches\n    for (var i = 0; i < blacklist.length; i++) {\n      if ((toStr(blacklist[i]) === REGEXP_TAG && blacklist[i].test(prop)) || blacklist[i] === prop) {\n        matches = prop\n        return !!matches\n      }\n    }\n    return !!matches\n  },\n\n  /**\n   * Return whether the provided value is a boolean.\n   *\n   * @example\n   * import { utils } from 'js-data';\n   * const a = true;\n   * const b = { foo: \"bar\" };\n   * console.log(utils.isBoolean(a)); // true\n   * console.log(utils.isBoolean(b)); // false\n   *\n   * @method utils.isBoolean\n   * @param {*} value The value to test.\n   * @returns {boolean} Whether the provided value is a boolean.\n   * @since 3.0.0\n   */\n  isBoolean (value) {\n    return toStr(value) === BOOL_TAG\n  },\n\n  /**\n   * Return whether the provided value is a date.\n   *\n   * @example\n   * import { utils } from 'js-data';\n   * const a = new Date();\n   * const b = { foo: \"bar\" };\n   * console.log(utils.isDate(a)); // true\n   * console.log(utils.isDate(b)); // false\n   *\n   * @method utils.isDate\n   * @param {*} value The value to test.\n   * @returns {Date} Whether the provided value is a date.\n   * @since 3.0.0\n   */\n  isDate (value) {\n    return (value && typeof value === 'object' && toStr(value) === DATE_TAG)\n  },\n\n  /**\n   * Return whether the provided value is a function.\n   *\n   * @example\n   * import { utils } from 'js-data';\n   * const a = function () { console.log('foo bar'); };\n   * const b = { foo: \"bar\" };\n   * console.log(utils.isFunction(a)); // true\n   * console.log(utils.isFunction(b)); // false\n   *\n   * @method utils.isFunction\n   * @param {*} value The value to test.\n   * @returns {boolean} Whether the provided value is a function.\n   * @since 3.0.0\n   */\n  isFunction (value) {\n    return typeof value === 'function' || (value && toStr(value) === FUNC_TAG)\n  },\n\n  /**\n   * Return whether the provided value is an integer.\n   *\n   * @example\n   * import { utils } from 'js-data';\n   * const a = 1;\n   * const b = 1.25;\n   * const c = '1';\n   * console.log(utils.isInteger(a)); // true\n   * console.log(utils.isInteger(b)); // false\n   * console.log(utils.isInteger(c)); // false\n   *\n   * @method utils.isInteger\n   * @param {*} value The value to test.\n   * @returns {boolean} Whether the provided value is an integer.\n   * @since 3.0.0\n   */\n  isInteger (value) {\n    return toStr(value) === NUMBER_TAG && value == toInteger(value) // eslint-disable-line\n  },\n\n  /**\n   * Return whether the provided value is `null`.\n   *\n   * @example\n   * import { utils } from 'js-data';\n   * const a = null;\n   * const b = { foo: \"bar\" };\n   * console.log(utils.isNull(a)); // true\n   * console.log(utils.isNull(b)); // false\n   *\n   * @method utils.isNull\n   * @param {*} value The value to test.\n   * @returns {boolean} Whether the provided value is `null`.\n   * @since 3.0.0\n   */\n  isNull (value) {\n    return value === null\n  },\n\n  /**\n   * Return whether the provided value is a number.\n   *\n   * @example\n   * import { utils } from 'js-data';\n   * const a = 1;\n   * const b = -1.25;\n   * const c = '1';\n   * console.log(utils.isNumber(a)); // true\n   * console.log(utils.isNumber(b)); // true\n   * console.log(utils.isNumber(c)); // false\n   *\n   * @method utils.isNumber\n   * @param {*} value The value to test.\n   * @returns {boolean} Whether the provided value is a number.\n   * @since 3.0.0\n   */\n  isNumber (value) {\n    const type = typeof value\n    return type === 'number' || (value && type === 'object' && toStr(value) === NUMBER_TAG)\n  },\n\n  /**\n   * Return whether the provided value is an object.\n   *\n   * @example\n   * import { utils } from 'js-data';\n   * const a = { foo: \"bar\" };\n   * const b = 'foo bar';\n   * console.log(utils.isObject(a)); // true\n   * console.log(utils.isObject(b)); // false\n   *\n   * @method utils.isObject\n   * @param {*} value The value to test.\n   * @returns {boolean} Whether the provided value is an object.\n   * @since 3.0.0\n   */\n  isObject (value) {\n    return toStr(value) === OBJECT_TAG\n  },\n\n  /**\n   * Return whether the provided value is a regular expression.\n   *\n   * @example\n   * import { utils } from 'js-data';\n   * const a = /^\\$.+$/ig;\n   * const b = new RegExp('^\\$.+$', 'ig');\n   * const c = { foo: \"bar\" };\n   * console.log(utils.isRegExp(a)); // true\n   * console.log(utils.isRegExp(b)); // true\n   * console.log(utils.isRegExp(c)); // false\n   *\n   * @method utils.isRegExp\n   * @param {*} value The value to test.\n   * @returns {boolean} Whether the provided value is a regular expression.\n   * @since 3.0.0\n   */\n  isRegExp (value) {\n    return toStr(value) === REGEXP_TAG\n  },\n\n  /**\n   * Return whether the provided value is a string or a number.\n   *\n   * @example\n   * import { utils } from 'js-data';\n   * console.log(utils.isSorN('')); // true\n   * console.log(utils.isSorN(-1.65)); // true\n   * console.log(utils.isSorN('my string')); // true\n   * console.log(utils.isSorN({})); // false\n   * console.log(utils.isSorN([1,2,4])); // false\n   *\n   * @method utils.isSorN\n   * @param {*} value The value to test.\n   * @returns {boolean} Whether the provided value is a string or a number.\n   * @since 3.0.0\n   */\n  isSorN (value) {\n    return utils.isString(value) || utils.isNumber(value)\n  },\n\n  /**\n   * Return whether the provided value is a string.\n   *\n   * @example\n   * import { utils } from 'js-data';\n   * console.log(utils.isString('')); // true\n   * console.log(utils.isString('my string')); // true\n   * console.log(utils.isString(100)); // false\n   * console.log(utils.isString([1,2,4])); // false\n   *\n   * @method utils.isString\n   * @param {*} value The value to test.\n   * @returns {boolean} Whether the provided value is a string.\n   * @since 3.0.0\n   */\n  isString (value) {\n    return typeof value === 'string' || (value && typeof value === 'object' && toStr(value) === STRING_TAG)\n  },\n\n  /**\n   * Return whether the provided value is a `undefined`.\n   *\n   * @example\n   * import { utils } from 'js-data';\n   * const a = undefined;\n   * const b = { foo: \"bar\"};\n   * console.log(utils.isUndefined(a)); // true\n   * console.log(utils.isUndefined(b.baz)); // true\n   * console.log(utils.isUndefined(b)); // false\n   * console.log(utils.isUndefined(b.foo)); // false\n   *\n   * @method utils.isUndefined\n   * @param {*} value The value to test.\n   * @returns {boolean} Whether the provided value is a `undefined`.\n   * @since 3.0.0\n   */\n  isUndefined (value) {\n    return value === undefined\n  },\n\n  /**\n   * Mix in logging capabilities to the target.\n   *\n   * @example\n   * import { utils } from 'js-data';\n   * const a = { foo: \"bar\"};\n   *\n   * // Add standard logging to an object\n   * utils.logify(a);\n   * a.log('info', 'test log info'); // output 'test log info' to console.\n   *\n   * // Toggle debug output of an object\n   * a.dbg('test debug output'); // does not output because debug is off.\n   * a.debug = true;\n   * a.dbg('test debug output'); // output 'test debug output' to console.\n   *\n   * @method utils.logify\n   * @param {*} target The target.\n   * @since 3.0.0\n   */\n  logify (target) {\n    utils.addHiddenPropsToTarget(target, {\n      dbg (...args) {\n        if (utils.isFunction(this.log)) {\n          this.log('debug', ...args)\n        }\n      },\n      log (level, ...args) {\n        if (level && !args.length) {\n          args.push(level)\n          level = 'debug'\n        }\n        if (level === 'debug' && !this.debug) {\n          return\n        }\n        const prefix = `${level.toUpperCase()}: (${this.name || this.constructor.name})`\n        if (utils.isFunction(console[level])) {\n          console[level](prefix, ...args)\n        } else {\n          console.log(prefix, ...args)\n        }\n      }\n    })\n  },\n\n  /**\n   * Adds the given record to the provided array only if it's not already in the\n   * array.\n   *\n   * @example\n   * import { utils } from 'js-data';\n   * const colors = ['red', 'green', 'yellow'];\n   *\n   * console.log(colors.length); // 3\n   * utils.noDupeAdd(colors, 'red');\n   * console.log(colors.length); // 3, red already exists\n   *\n   * utils.noDupeAdd(colors, 'blue');\n   * console.log(colors.length); // 4, blue was added\n   *\n   * @method utils.noDupeAdd\n   * @param {array} array The array.\n   * @param {*} record The value to add.\n   * @param {Function} fn Callback function passed to {@link utils.findIndex}.\n   * @since 3.0.0\n   */\n  noDupeAdd (array, record, fn) {\n    if (!array) {\n      return\n    }\n    const index = this.findIndex(array, fn)\n    if (index < 0) {\n      array.push(record)\n    }\n  },\n\n  /**\n   * Return a shallow copy of the provided object, minus the properties\n   * specified in `keys`.\n   *\n   * @example\n   * import { utils } from 'js-data';\n   * const a = { name: 'John', $hashKey: 1214910 };\n   *\n   * let b = utils.omit(a, ['$hashKey']);\n   * console.log(b); // { name: 'John' }\n   *\n   * @method utils.omit\n   * @param {object} props The object to copy.\n   * @param {string[]} keys Array of strings, representing properties to skip.\n   * @returns {Object} Shallow copy of `props`, minus `keys`.\n   * @since 3.0.0\n   */\n  omit (props, keys) {\n    const _props = {}\n    utils.forOwn(props, function (value, key) {\n      if (keys.indexOf(key) === -1) {\n        _props[key] = value\n      }\n    })\n    return _props\n  },\n\n  /**\n   * Return a shallow copy of the provided object, but only include the\n   * properties specified in `keys`.\n   *\n   * @example\n   * import { utils } from 'js-data';\n   * const a = { name: 'John', $hashKey: 1214910 };\n   *\n   * let b = utils.pick(a, ['$hashKey']);\n   * console.log(b); // { $hashKey: 1214910 }\n   *\n   * @method utils.pick\n   * @param {object} props The object to copy.\n   * @param {string[]} keys Array of strings, representing properties to keep.\n   * @returns {Object} Shallow copy of `props`, but only including `keys`.\n   * @since 3.0.0\n   */\n  pick (props, keys) {\n    return keys.reduce((map, key) => {\n      map[key] = props[key]\n      return map\n    }, {})\n  },\n\n  /**\n   * Return a plain copy of the given value.\n   *\n   * @example\n   * import { utils } from 'js-data';\n   * const a = { name: 'John' };\n   * let b = utils.plainCopy(a);\n   * console.log(a === b); // false\n   *\n   * @method utils.plainCopy\n   * @param {*} value The value to copy.\n   * @returns {*} Plain copy of `value`.\n   * @see utils.copy\n   * @since 3.0.0\n   */\n  plainCopy (value) {\n    return utils.copy(value, undefined, undefined, undefined, undefined, true)\n  },\n\n  /**\n   * Shortcut for `utils.Promise.reject(value)`.\n   *\n   * @example\n   * import { utils } from 'js-data';\n   *\n   * utils.reject(\"Testing static reject\").then(function (data) {\n   *   // not called\n   * }).catch(function (reason) {\n   *   console.log(reason); // \"Testing static reject\"\n   * });\n   *\n   * @method utils.reject\n   * @param {*} [value] Value with which to reject the Promise.\n   * @returns {Promise} Promise reject with `value`.\n   * @see utils.Promise\n   * @since 3.0.0\n   */\n  reject (value) {\n    return utils.Promise.reject(value)\n  },\n\n  /**\n   * Remove the last item found in array according to the given checker function.\n   *\n   * @example\n   * import { utils } from 'js-data';\n   *\n   * const colors = ['red', 'green', 'yellow', 'red'];\n   * utils.remove(colors, (color) => color === 'red');\n   * console.log(colors); // ['red', 'green', 'yellow']\n   *\n   * @method utils.remove\n   * @param {array} array The array to search.\n   * @param {Function} fn Checker function.\n   */\n  remove (array, fn) {\n    if (!array || !array.length) {\n      return\n    }\n    const index = this.findIndex(array, fn)\n    if (index >= 0) {\n      array.splice(index, 1) // todo should this be recursive?\n    }\n  },\n\n  /**\n   * Shortcut for `utils.Promise.resolve(value)`.\n   *\n   * @example\n   * import { utils } from 'js-data';\n   *\n   * utils.resolve(\"Testing static resolve\").then(function (data) {\n   *   console.log(data); // \"Testing static resolve\"\n   * }).catch(function (reason) {\n   *   // not called\n   * });\n   *\n   * @param {*} [value] Value with which to resolve the Promise.\n   * @returns {Promise} Promise resolved with `value`.\n   * @see utils.Promise\n   * @since 3.0.0\n   */\n  resolve (value) {\n    return utils.Promise.resolve(value)\n  },\n\n  /**\n   * Set the value at the provided key or path.\n   *\n   * @example\n   * import { utils } from 'js-data';\n   *\n   * const john = {\n   *   name: 'John',\n   *   age: 25,\n   *   parent: {\n   *     name: 'John's Mom',\n   *     age: 50\n   *   }\n   * };\n   * // set value by key\n   * utils.set(john, 'id', 98);\n   * console.log(john.id); // 98\n   *\n   * // set value by path\n   * utils.set(john, 'parent.id', 20);\n   * console.log(john.parent.id); // 20\n   *\n   * // set value by path/value map\n   * utils.set(john, {\n   *   'id': 1098,\n   *   'parent': { id: 1020 },\n   *   'parent.age': '55'\n   * });\n   * console.log(john.id); // 1098\n   * console.log(john.parent.id); // 1020\n   * console.log(john.parent.age); // 55\n   *\n   * @method utils.set\n   * @param {object} object The object on which to set a property.\n   * @param {(string|Object)} path The key or path to the property. Can also\n   * pass in an object of path/value pairs, which will all be set on the target\n   * object.\n   * @param {*} [value] The value to set.\n   */\n  set: function (object, path, value) {\n    if (utils.isObject(path)) {\n      utils.forOwn(path, function (value, _path) {\n        utils.set(object, _path, value)\n      })\n    } else {\n      const parts = PATH.exec(path)\n      if (parts) {\n        mkdirP(object, parts[1])[parts[2]] = value\n      } else {\n        object[path] = value\n      }\n    }\n  },\n\n  /**\n   * Check whether the two provided objects are deeply equal.\n   *\n   * @example\n   * import { utils } from 'js-data';\n   *\n   * const objA = {\n   *   name: 'John',\n   *   id: 27,\n   *   nested: {\n   *     item: 'item 1',\n   *     colors: ['red', 'green', 'blue']\n   *   }\n   * };\n   *\n   * const objB = {\n   *   name: 'John',\n   *   id: 27,\n   *   nested: {\n   *     item: 'item 1',\n   *     colors: ['red', 'green', 'blue']\n   *   }\n   * };\n   *\n   * console.log(utils.deepEqual(a,b)); // true\n   * objB.nested.colors.add('yellow'); // make a change to a nested object's array\n   * console.log(utils.deepEqual(a,b)); // false\n   *\n   * @method utils.deepEqual\n   * @param {object} a First object in the comparison.\n   * @param {object} b Second object in the comparison.\n   * @returns {boolean} Whether the two provided objects are deeply equal.\n   * @see utils.equal\n   * @since 3.0.0\n   */\n  deepEqual (a, b) {\n    if (a === b) {\n      return true\n    }\n    let _equal = true\n    if (utils.isArray(a) && utils.isArray(b)) {\n      if (a.length !== b.length) {\n        return false\n      }\n      for (let i = a.length; i--;) {\n        if (!utils.deepEqual(a[i], b[i])) {\n          // Exit loop early\n          return false\n        }\n      }\n    } else if (utils.isObject(a) && utils.isObject(b)) {\n      utils.forOwn(a, function (value, key) {\n        if (!(_equal = utils.deepEqual(value, b[key]))) {\n          // Exit loop early\n          return false\n        }\n      })\n      if (_equal) {\n        utils.forOwn(b, function (value, key) {\n          if (!(_equal = utils.deepEqual(value, a[key]))) {\n            // Exit loop early\n            return false\n          }\n        })\n      }\n    } else {\n      return false\n    }\n    return _equal\n  },\n\n  /**\n   * Proxy for `JSON.stringify`.\n   *\n   * @example\n   * import { utils } from 'js-data';\n   *\n   * const a = { name: 'John' };\n   * let jsonVal = utils.toJson(a);\n   * console.log(jsonVal); // '{\"name\" : \"John\"}'\n   *\n   * @method utils.toJson\n   * @param {*} value Value to serialize to JSON.\n   * @returns {string} JSON string.\n   * @see utils.fromJson\n   * @since 3.0.0\n   */\n  toJson: JSON.stringify,\n\n  /**\n   * Unset the value at the provided key or path.\n   *\n   * @example\n   * import { utils } from 'js-data';\n   *\n   * const john = {\n   *   name: 'John',\n   *   age: 25,\n   *   parent: {\n   *     name: 'John's Mom',\n   *     age: 50\n   *   }\n   * };\n   *\n   * utils.unset(john, age);\n   * utils.unset(john, parent.age);\n   *\n   * console.log(john.age); // null\n   * console.log(john.parent.age); // null\n   *\n   * @method utils.unset\n   * @param {object} object The object from which to delete the property.\n   * @param {string} path The key or path to the property.\n   * @see utils.set\n   * @since 3.0.0\n   */\n  unset (object, path) {\n    const parts = path.split('.')\n    const last = parts.pop()\n\n    while (path = parts.shift()) { // eslint-disable-line\n      object = object[path]\n      if (object == null) { // eslint-disable-line\n        return\n      }\n    }\n\n    object[last] = undefined\n  }\n}\n\nexport const safeSetProp = function (record, field, value) {\n  if (record && record._set) {\n    record._set(`props.${field}`, value)\n  } else {\n    utils.set(record, field, value)\n  }\n}\n\nexport const safeSetLink = function (record, field, value) {\n  if (record && record._set) {\n    record._set(`links.${field}`, value)\n  } else {\n    utils.set(record, field, value)\n  }\n}\n\nexport default utils\n","import utils from './utils'\n\n/**\n * A base class which gives instances private properties.\n *\n * Typically you won't instantiate this class directly, but you may find it\n * useful as an abstract class for your own components.\n *\n * See {@link Settable.extend} for an example of using {@link Settable} as a\n * base class.\n *\n *```javascript\n * import {Settable} from 'js-data'\n * ```\n *\n * @class Settable\n * @returns {Settable} A new {@link Settable} instance.\n * @since 3.0.0\n */\nexport default function Settable () {\n  const _props = {}\n  Object.defineProperties(this, {\n    /**\n     * Get a private property of this instance.\n     *\n     * __Don't use the method unless you know what you're doing.__\n     *\n     * @method Settable#_get\n     * @param {string} key The property to retrieve.\n     * @returns {*} The value of the property.\n     * @since 3.0.0\n     */\n    _get: { value (key) { return utils.get(_props, key) } },\n\n    /**\n     * Set a private property of this instance.\n     *\n     * __Don't use the method unless you know what you're doing.__\n     *\n     * @method __Don't use the method unless you know what you're doing.__#_set\n     * @param {(string|Object)} key The key or path to the property. Can also\n     * pass in an object of key/value pairs, which will all be set on the instance.\n     * @param {*} [value] The value to set.\n     * @since 3.0.0\n     */\n    _set: { value (key, value) { return utils.set(_props, key, value) } },\n\n    /**\n     * Unset a private property of this instance.\n     *\n     * __Don't use the method unless you know what you're doing.__\n     *\n     * @method __Don't use the method unless you know what you're doing.__#_unset\n     * @param {string} key The property to unset.\n     * @since 3.0.0\n     */\n    _unset: { value (key) { return utils.unset(_props, key) } }\n  })\n}\n\n/**\n * Create a subclass of this Settable:\n *\n * @example <caption>Settable.extend</caption>\n * const JSData = require('js-data');\n * const { Settable } = JSData;\n * console.log('Using JSData v' + JSData.version.full);\n *\n * // Extend the class using ES2015 class syntax.\n * class CustomSettableClass extends Settable {\n *   foo () { return 'bar'; }\n *   static beep () { return 'boop'; }\n * }\n * const customSettable = new CustomSettableClass();\n * console.log(customSettable.foo());\n * console.log(CustomSettableClass.beep());\n *\n * // Extend the class using alternate method.\n * const OtherSettableClass = Settable.extend({\n *   foo () { return 'bar'; }\n * }, {\n *   beep () { return 'boop'; }\n * });\n * const otherSettable = new OtherSettableClass();\n * console.log(otherSettable.foo());\n * console.log(OtherSettableClass.beep());\n *\n * // Extend the class, providing a custom constructor.\n * function AnotherSettableClass () {\n *   Settable.call(this);\n *   this.created_at = new Date().getTime();\n * }\n * Settable.extend({\n *   constructor: AnotherSettableClass,\n *   foo () { return 'bar'; }\n * }, {\n *   beep () { return 'boop'; }\n * })\n * const anotherSettable = new AnotherSettableClass();\n * console.log(anotherSettable.created_at);\n * console.log(anotherSettable.foo());\n * console.log(AnotherSettableClass.beep());\n *\n * @method Settable.extend\n * @param {object} [props={}] Properties to add to the prototype of the\n * subclass.\n * @param {object} [props.constructor] Provide a custom constructor function\n * to be used as the subclass itself.\n * @param {object} [classProps={}] Static properties to add to the subclass.\n * @returns {Constructor} Subclass of this Settable class.\n * @since 3.0.0\n */\nSettable.extend = utils.extend\n","import utils from './utils'\nimport Settable from './Settable'\n\n/**\n * The base class from which all JSData components inherit some basic\n * functionality.\n *\n * Typically you won't instantiate this class directly, but you may find it\n * useful as an abstract class for your own components.\n *\n * See {@link Component.extend} for an example of using {@link Component} as a\n * base class.\n *\n *```javascript\n * import {Component} from 'js-data'\n * ```\n *\n * @class Component\n * @param {object} [opts] Configuration options.\n * @param {boolean} [opts.debug=false] See {@link Component#debug}.\n * @returns {Component} A new {@link Component} instance.\n * @since 3.0.0\n */\nfunction Component (opts) {\n  Settable.call(this)\n  opts || (opts = {})\n\n  /**\n   * Whether to enable debug-level logs for this component. Anything that\n   * extends `Component` inherits this option and the corresponding logging\n   * functionality.\n   *\n   * @example <caption>Component#debug</caption>\n   * const JSData = require('js-data');\n   * const { Component } = JSData;\n   * console.log('Using JSData v' + JSData.version.full);\n   *\n   * const component = new Component();\n   * component.log('debug', 'some message'); // nothing gets logged\n   * // Display debug logs:\n   * component.debug = true;\n   * component.log('debug', 'other message'); // this DOES get logged\n   *\n   * @default false\n   * @name Component#debug\n   * @since 3.0.0\n   * @type {boolean}\n   */\n  this.debug = opts.hasOwnProperty('debug') ? !!opts.debug : false\n\n  /**\n   * Event listeners attached to this Component. __Do not modify.__ Use\n   * {@link Component#on} and {@link Component#off} instead.\n   *\n   * @name Component#_listeners\n   * @private\n   * @instance\n   * @since 3.0.0\n   * @type {Object}\n   */\n  Object.defineProperty(this, '_listeners', { value: {}, writable: true })\n}\n\nexport default Settable.extend({\n  constructor: Component\n})\n\n/**\n * Create a subclass of this Component:\n *\n * @example <caption>Component.extend</caption>\n * const JSData = require('js-data');\n * const { Component } = JSData;\n * console.log('Using JSData v' + JSData.version.full);\n *\n * // Extend the class using ES2015 class syntax.\n * class CustomComponentClass extends Component {\n *   foo () { return 'bar'; }\n *   static beep () { return 'boop'; }\n * }\n * const customComponent = new CustomComponentClass();\n * console.log(customComponent.foo());\n * console.log(CustomComponentClass.beep());\n *\n * // Extend the class using alternate method.\n * const OtherComponentClass = Component.extend({\n *   foo () { return 'bar'; }\n * }, {\n *   beep () { return 'boop'; }\n * });\n * const otherComponent = new OtherComponentClass();\n * console.log(otherComponent.foo());\n * console.log(OtherComponentClass.beep());\n *\n * // Extend the class, providing a custom constructor.\n * function AnotherComponentClass () {\n *   Component.call(this);\n *   this.created_at = new Date().getTime();\n * }\n * Component.extend({\n *   constructor: AnotherComponentClass,\n *   foo () { return 'bar'; }\n * }, {\n *   beep () { return 'boop'; }\n * })\n * const anotherComponent = new AnotherComponentClass();\n * console.log(anotherComponent.created_at);\n * console.log(anotherComponent.foo());\n * console.log(AnotherComponentClass.beep());\n *\n * @method Component.extend\n * @param {object} [props={}] Properties to add to the prototype of the\n * subclass.\n * @param {object} [props.constructor] Provide a custom constructor function\n * to be used as the subclass itself.\n * @param {object} [classProps={}] Static properties to add to the subclass.\n * @returns {Constructor} Subclass of this Component class.\n * @since 3.0.0\n */\nComponent.extend = utils.extend\n\n/**\n * Log the provided values at the \"debug\" level. Debug-level logs are only\n * logged if {@link Component#debug} is `true`.\n *\n * `.dbg(...)` is shorthand for `.log('debug', ...)`.\n *\n * @method Component#dbg\n * @param {...*} [args] Values to log.\n * @since 3.0.0\n */\n/**\n * Log the provided values. By default sends values to `console[level]`.\n * Debug-level logs are only logged if {@link Component#debug} is `true`.\n *\n * Will attempt to use appropriate `console` methods if they are available.\n *\n * @method Component#log\n * @param {string} level Log level.\n * @param {...*} [args] Values to log.\n * @since 3.0.0\n */\nutils.logify(Component.prototype)\n\n/**\n * Register a new event listener on this Component.\n *\n * @example\n * // Listen for all \"afterCreate\" events in a DataStore\n * store.on('afterCreate', (mapperName, props, opts, result) => {\n *   console.log(mapperName); // \"post\"\n *   console.log(props.id); // undefined\n *   console.log(result.id); // 1234\n * });\n * store.create('post', { title: 'Modeling your data' }).then((post) => {\n *   console.log(post.id); // 1234\n * });\n *\n * @example\n * // Listen for the \"add\" event on a collection\n * collection.on('add', (records) => {\n *   console.log(records); // [...]\n * });\n *\n * @example\n * // Listen for \"change\" events on a record\n * post.on('change', (record, changes) => {\n *   console.log(changes); // { changed: { title: 'Modeling your data' } }\n * });\n * post.title = 'Modeling your data';\n *\n * @method Component#on\n * @param {string} event Name of event to subsribe to.\n * @param {Function} listener Listener function to handle the event.\n * @param {*} [ctx] Optional content in which to invoke the listener.\n * @since 3.0.0\n */\n/**\n * Remove an event listener from this Component. If no listener is provided,\n * then all listeners for the specified event will be removed. If no event is\n * specified then all listeners for all events will be removed.\n *\n * @example\n * // Remove a particular listener for a particular event\n * collection.off('add', handler);\n *\n * @example\n * // Remove all listeners for a particular event\n * record.off('change');\n *\n * @example\n * // Remove all listeners to all events\n * store.off();\n *\n * @method Component#off\n * @param {string} [event] Name of event to unsubsribe to.\n * @param {Function} [listener] Listener to remove.\n * @since 3.0.0\n */\n/**\n * Trigger an event on this Component.\n *\n * @example <caption>Component#emit</caption>\n * // import { Collection, DataStore } from 'js-data';\n * const JSData = require('js-data');\n * const { Collection, DataStore } = JSData;\n *\n * const collection = new Collection();\n * collection.on('foo', function (msg) {\n *   console.log(msg);\n * });\n * collection.emit('foo', 'bar');\n *\n * const store = new DataStore();\n * store.on('beep', function (msg) {\n *   console.log(msg);\n * });\n * store.emit('beep', 'boop');\n *\n * @method Component#emit\n * @param {string} event Name of event to emit.\n * @param {...*} [args] Arguments to pass to any listeners.\n * @since 3.0.0\n */\nutils.eventify(\n  Component.prototype,\n  function () {\n    return this._listeners\n  },\n  function (value) {\n    this._listeners = value\n  }\n)\n","import utils from './utils'\nimport Component from './Component'\n\nconst DOMAIN = 'Query'\nconst INDEX_ERR = 'Index inaccessible after first operation'\n\n// Reserved words used by JSData's Query Syntax\nconst reserved = {\n  limit: '',\n  offset: '',\n  orderBy: '',\n  skip: '',\n  sort: '',\n  where: ''\n}\n\n// Used by our JavaScript implementation of the LIKE operator\nconst escapeRegExp = /([.*+?^=!:${}()|[\\]/\\\\])/g\nconst percentRegExp = /%/g\nconst underscoreRegExp = /_/g\nconst escape = function (pattern) {\n  return pattern.replace(escapeRegExp, '\\\\$1')\n}\n\n/**\n * A class used by the {@link Collection} class to build queries to be executed\n * against the collection's data. An instance of `Query` is returned by\n * {@link Collection#query}. Query instances are typically short-lived, and you\n * shouldn't have to create them yourself. Just use {@link Collection#query}.\n *\n * ```javascript\n * import { Query } from 'js-data';\n * ```\n *\n * @example <caption>Query intro</caption>\n * const JSData = require('js-data');\n * const { DataStore } = JSData;\n * console.log('Using JSData v' + JSData.version.full);\n *\n * const store = new DataStore();\n * store.defineMapper('post');\n * const posts = [\n *   { author: 'John', age: 30, status: 'published', id: 1 },\n *   { author: 'Sally', age: 31, status: 'draft', id: 2 },\n *   { author: 'Mike', age: 32, status: 'draft', id: 3 },\n *   { author: 'Adam', age: 33, status: 'deleted', id: 4 },\n *   { author: 'Adam', age: 33, status: 'draft', id: 5 }\n * ]\n * store.add('post', posts);\n * const drafts = store.query('post').filter({ status: 'draft' }).limit(2).run();\n * console.log(drafts);\n *\n * @class Query\n * @extends Component\n * @param {Collection} collection The collection on which this query operates.\n * @since 3.0.0\n */\nfunction Query (collection) {\n  utils.classCallCheck(this, Query)\n\n  /**\n   * The {@link Collection} on which this query operates.\n   *\n   * @name Query#collection\n   * @since 3.0.0\n   * @type {Collection}\n   */\n  this.collection = collection\n\n  /**\n   * The current data result of this query.\n   *\n   * @name Query#data\n   * @since 3.0.0\n   * @type {Array}\n   */\n  this.data = null\n}\n\nexport default Component.extend({\n  constructor: Query,\n\n  _applyWhereFromObject (where) {\n    const fields = []\n    const ops = []\n    const predicates = []\n    utils.forOwn(where, (clause, field) => {\n      if (!utils.isObject(clause)) {\n        clause = {\n          '==': clause\n        }\n      }\n      utils.forOwn(clause, (expr, op) => {\n        fields.push(field)\n        ops.push(op)\n        predicates.push(expr)\n      })\n    })\n    return {\n      fields,\n      ops,\n      predicates\n    }\n  },\n\n  _applyWhereFromArray (where) {\n    const groups = []\n    where.forEach((_where, i) => {\n      if (utils.isString(_where)) {\n        return\n      }\n      const prev = where[i - 1]\n      const parser = utils.isArray(_where) ? this._applyWhereFromArray : this._applyWhereFromObject\n      const group = parser.call(this, _where)\n      if (prev === 'or') {\n        group.isOr = true\n      }\n      groups.push(group)\n    })\n    groups.isArray = true\n    return groups\n  },\n\n  _testObjectGroup (keep, first, group, item) {\n    let i\n    const fields = group.fields\n    const ops = group.ops\n    const predicates = group.predicates\n    const len = ops.length\n    for (i = 0; i < len; i++) {\n      let op = ops[i]\n      const isOr = op.charAt(0) === '|'\n      op = isOr ? op.substr(1) : op\n      const expr = this.evaluate(utils.get(item, fields[i]), op, predicates[i])\n      if (expr !== undefined) {\n        keep = first ? expr : (isOr ? keep || expr : keep && expr)\n      }\n      first = false\n    }\n    return { keep, first }\n  },\n\n  _testArrayGroup (keep, first, groups, item) {\n    let i\n    const len = groups.length\n    for (i = 0; i < len; i++) {\n      const group = groups[i]\n      const parser = group.isArray ? this._testArrayGroup : this._testObjectGroup\n      const result = parser.call(this, true, true, group, item)\n      if (groups[i - 1]) {\n        if (group.isOr) {\n          keep = keep || result.keep\n        } else {\n          keep = keep && result.keep\n        }\n      } else {\n        keep = result.keep\n      }\n      first = result.first\n    }\n    return { keep, first }\n  },\n\n  /**\n   * Find all entities between two boundaries.\n   *\n   * @example <caption>Get the users ages 18 to 30.</caption>\n   * const JSData = require('js-data');\n   * const { DataStore } = JSData;\n   * console.log('Using JSData v' + JSData.version.full);\n   *\n   * const store = new DataStore();\n   * store.defineMapper('user');\n   * const users = [\n   *   { name: 'Peter', age: 25, id: 1 },\n   *   { name: 'Jim', age: 19, id: 2 },\n   *   { name: 'Mike', age: 17, id: 3 },\n   *   { name: 'Alan', age: 29, id: 4 },\n   *   { name: 'Katie', age: 33, id: 5 }\n   * ];\n   * store.add('user', users)\n   * const filteredUsers = store\n   *   .query('user')\n   *   .between(18, 30, { index: 'age' })\n   *   .run();\n   * console.log(filteredUsers);\n   *\n   * @example <caption>Same as above.</caption>\n   * const JSData = require('js-data');\n   * const { DataStore } = JSData;\n   * console.log('Using JSData v' + JSData.version.full);\n   *\n   * const store = new DataStore();\n   * store.defineMapper('user');\n   * const users = [\n   *   { name: 'Peter', age: 25, id: 1 },\n   *   { name: 'Jim', age: 19, id: 2 },\n   *   { name: 'Mike', age: 17, id: 3 },\n   *   { name: 'Alan', age: 29, id: 4 },\n   *   { name: 'Katie', age: 33, id: 5 }\n   * ];\n   * store.add('user', users)\n   * const filteredUsers = store\n   *   .query('user')\n   *   .between([18], [30], { index: 'age' })\n   *   .run();\n   * console.log(filteredUsers);\n   *\n   * @method Query#between\n   * @param {array} leftKeys Keys defining the left boundary.\n   * @param {array} rightKeys Keys defining the right boundary.\n   * @param {object} [opts] Configuration options.\n   * @param {string} [opts.index] Name of the secondary index to use in the\n   * query. If no index is specified, the main index is used.\n   * @param {boolean} [opts.leftInclusive=true] Whether to include entities\n   * on the left boundary.\n   * @param {boolean} [opts.rightInclusive=false] Whether to include entities\n   * on the left boundary.\n   * @param {boolean} [opts.limit] Limit the result to a certain number.\n   * @param {boolean} [opts.offset] The number of resulting entities to skip.\n   * @returns {Query} A reference to itself for chaining.\n   * @since 3.0.0\n   */\n  between (leftKeys, rightKeys, opts) {\n    opts || (opts = {})\n    if (this.data) {\n      throw utils.err(`${DOMAIN}#between`)(500, 'Cannot access index')\n    }\n    this.data = this.collection.getIndex(opts.index).between(leftKeys, rightKeys, opts)\n    return this\n  },\n\n  /**\n   * The comparison function used by the {@link Query} class.\n   *\n   * @method Query#compare\n   * @param {array} orderBy An orderBy clause used for sorting and sub-sorting.\n   * @param {number} index The index of the current orderBy clause being used.\n   * @param {*} a The first item in the comparison.\n   * @param {*} b The second item in the comparison.\n   * @returns {number} -1 if `b` should preceed `a`. 0 if `a` and `b` are equal.\n   * 1 if `a` should preceed `b`.\n   * @since 3.0.0\n   */\n  compare (orderBy, index, a, b) {\n    const def = orderBy[index]\n    let cA = utils.get(a, def[0])\n    let cB = utils.get(b, def[0])\n    if (cA && utils.isString(cA)) {\n      cA = cA.toUpperCase()\n    }\n    if (cB && utils.isString(cB)) {\n      cB = cB.toUpperCase()\n    }\n    if (a === undefined) {\n      a = null\n    }\n    if (b === undefined) {\n      b = null\n    }\n    if (def[1].toUpperCase() === 'DESC') {\n      const temp = cB\n      cB = cA\n      cA = temp\n    }\n    if (cA < cB) {\n      return -1\n    } else if (cA > cB) {\n      return 1\n    } else {\n      if (index < orderBy.length - 1) {\n        return this.compare(orderBy, index + 1, a, b)\n      } else {\n        return 0\n      }\n    }\n  },\n\n  /**\n   * Predicate evaluation function used by the {@link Query} class.\n   *\n   * @method Query#evaluate\n   * @param {*} value The value to evaluate.\n   * @param {string} op The operator to use in this evaluation.\n   * @param {*} predicate The predicate to use in this evaluation.\n   * @returns {boolean} Whether the value passed the evaluation or not.\n   * @since 3.0.0\n   */\n  evaluate (value, op, predicate) {\n    const ops = this.constructor.ops\n    if (ops[op]) {\n      return ops[op](value, predicate)\n    }\n    if (op.indexOf('like') === 0) {\n      return this.like(predicate, op.substr(4)).exec(value) !== null\n    } else if (op.indexOf('notLike') === 0) {\n      return this.like(predicate, op.substr(7)).exec(value) === null\n    }\n  },\n\n  /**\n   * Find the record or records that match the provided query or are accepted by\n   * the provided filter function.\n   *\n   * @example <caption>Get the draft posts by authors younger than 30</caption>\n   * const JSData = require('js-data');\n   * const { DataStore } = JSData;\n   * console.log('Using JSData v' + JSData.version.full);\n   *\n   * const store = new DataStore();\n   * store.defineMapper('post')\n   * const posts = [\n   *   { author: 'John', age: 30, status: 'published', id: 1 },\n   *   { author: 'Sally', age: 31, status: 'published', id: 2 },\n   *   { author: 'Mike', age: 32, status: 'draft', id: 3 },\n   *   { author: 'Adam', age: 33, status: 'deleted', id: 4 },\n   *   { author: 'Adam', age: 33, status: 'published', id: 5 }\n   *   { author: 'Peter', age: 25, status: 'deleted', id: 6 },\n   *   { author: 'Sally', age: 21, status: 'draft', id: 7 },\n   *   { author: 'Jim', age: 27, status: 'draft', id: 8 },\n   *   { author: 'Jim', age: 27, status: 'published', id: 9 },\n   *   { author: 'Jason', age: 55, status: 'published', id: 10 }\n   * ];\n   * store.add('post', posts);\n   * const results = store\n   *   .query('post')\n   *   .filter({\n   *     where: {\n   *       status: {\n   *         '==': 'draft'\n   *       },\n   *       age: {\n   *         '<': 30\n   *       }\n   *     }\n   *   })\n   *   .run();\n   * console.log(results);\n   *\n   * @example <caption>Use a custom filter function</caption>\n   * const posts = query\n   *   .filter(function (post) {\n   *     return post.isReady();\n   *   })\n   *   .run();\n   *\n   * @method Query#filter\n   * @param {(Object|Function)} [queryOrFn={}] Selection query or filter\n   * function.\n   * @param {Function} [thisArg] Context to which to bind `queryOrFn` if\n   * `queryOrFn` is a function.\n   * @returns {Query} A reference to itself for chaining.\n   * @since 3.0.0\n   */\n  filter (query, thisArg) {\n    /**\n     * Selection query as defined by JSData's [Query Syntax][querysyntax].\n     *\n     * [querysyntax]: http://www.js-data.io/v3.0/docs/query-syntax\n     *\n     * @example <caption>Empty \"findAll\" query</caption>\n     * const JSData = require('js-data');\n     * const { DataStore } = JSData;\n     * console.log('Using JSData v' + JSData.version.full);\n     *\n     * const store = new DataStore();\n     * store.defineMapper('post')\n     * store.findAll('post').then((posts) => {\n     *   console.log(posts); // [...]\n     * });\n     *\n     * @example <caption>Empty \"filter\" query</caption>\n     * const JSData = require('js-data');\n     * const { DataStore } = JSData;\n     * console.log('Using JSData v' + JSData.version.full);\n     *\n     * const store = new DataStore();\n     * store.defineMapper('post');\n     * const posts = store.filter('post');\n     * console.log(posts); // [...]\n     *\n     * @example <caption>Complex \"filter\" query</caption>\n     * const JSData = require('js-data');\n     * const { DataStore } = JSData;\n     * console.log('Using JSData v' + JSData.version.full);\n     *\n     * const store = new DataStore();\n     * const PAGE_SIZE = 2;\n     * let currentPage = 3;\n     *\n     * store.defineMapper('post');\n     * const posts = [\n     *   { author: 'John', age: 30, status: 'published', id: 1 },\n     *   { author: 'Sally', age: 31, status: 'published', id: 2 },\n     *   { author: 'Mike', age: 32, status: 'draft', id: 3 },\n     *   { author: 'Adam', age: 33, status: 'deleted', id: 4 },\n     *   { author: 'Adam', age: 33, status: 'published', id: 5 }\n     *   { author: 'Peter', age: 25, status: 'deleted', id: 6 },\n     *   { author: 'Sally', age: 21, status: 'draft', id: 7 },\n     *   { author: 'Jim', age: 27, status: 'draft', id: 8 },\n     *   { author: 'Jim', age: 27, status: 'published', id: 9 },\n     *   { author: 'Jason', age: 55, status: 'published', id: 10 }\n     * ];\n     * store.add('post', posts);\n     * // Retrieve a filtered page of blog posts\n     * // Would typically replace filter with findAll\n     * const results = store.filter('post', {\n     *   where: {\n     *     status: {\n     *       // WHERE status = 'published'\n     *       '==': 'published'\n     *     },\n     *     author: {\n     *       // AND author IN ('bob', 'alice')\n     *       'in': ['bob', 'alice'],\n     *       // OR author IN ('karen')\n     *       '|in': ['karen']\n     *     }\n     *   },\n     *   orderBy: [\n     *     // ORDER BY date_published DESC,\n     *     ['date_published', 'DESC'],\n     *     // ORDER BY title ASC\n     *     ['title', 'ASC']\n     *   ],\n     *   // LIMIT 2\n     *   limit: PAGE_SIZE,\n     *   // SKIP 4\n     *   offset: PAGE_SIZE * (currentPage - 1)\n     * });\n     * console.log(results);\n     *\n     * @namespace query\n     * @property {number} [limit] See {@link query.limit}.\n     * @property {number} [offset] See {@link query.offset}.\n     * @property {string|Array[]} [orderBy] See {@link query.orderBy}.\n     * @property {number} [skip] Alias for {@link query.offset}.\n     * @property {string|Array[]} [sort] Alias for {@link query.orderBy}.\n     * @property {Object} [where] See {@link query.where}.\n     * @since 3.0.0\n     * @tutorial [\"http://www.js-data.io/v3.0/docs/query-syntax\",\"JSData's Query Syntax\"]\n     */\n    query || (query = {})\n    this.getData()\n    if (utils.isObject(query)) {\n      let where = {}\n\n      /**\n       * Filtering criteria. Records that do not meet this criteria will be exluded\n       * from the result.\n       *\n       * @example <caption>Return posts where author is at least 32 years old</caption>\n       * const JSData = require('js-data');\n       * const { DataStore } = JSData;\n       * console.log('Using JSData v' + JSData.version.full);\n       *\n       * const store = new DataStore();\n       * store.defineMapper('post')\n       * const posts = [\n       *   { author: 'John', age: 30, id: 5 },\n       *   { author: 'Sally', age: 31, id: 6 },\n       *   { author: 'Mike', age: 32, id: 7 },\n       *   { author: 'Adam', age: 33, id: 8 },\n       *   { author: 'Adam', age: 33, id: 9 }\n       * ];\n       * store.add('post', posts);\n       * const results = store.filter('post', {\n       *   where: {\n       *     age: {\n       *       '>=': 30\n       *     }\n       *   }\n       * });\n       * console.log(results);\n       *\n       * @name query.where\n       * @type {Object}\n       * @see http://www.js-data.io/v3.0/docs/query-syntax\n       * @since 3.0.0\n       */\n      if (utils.isObject(query.where) || utils.isArray(query.where)) {\n        where = query.where\n      }\n      utils.forOwn(query, function (value, key) {\n        if (!(key in reserved) && !(key in where)) {\n          where[key] = {\n            '==': value\n          }\n        }\n      })\n      let groups\n\n      // Apply filter for each field\n      if (utils.isObject(where) && Object.keys(where).length !== 0) {\n        groups = this._applyWhereFromArray([where])\n      } else if (utils.isArray(where)) {\n        groups = this._applyWhereFromArray(where)\n      }\n\n      if (groups) {\n        this.data = this.data.filter((item, i) => this._testArrayGroup(true, true, groups, item).keep)\n      }\n\n      // Sort\n      let orderBy = query.orderBy || query.sort\n\n      if (utils.isString(orderBy)) {\n        orderBy = [\n          [orderBy, 'ASC']\n        ]\n      }\n      if (!utils.isArray(orderBy)) {\n        orderBy = null\n      }\n\n      /**\n       * Determines how records should be ordered in the result.\n       *\n       * @example <caption>Order posts by `author` then by `id` descending </caption>\n       * const JSData = require('js-data');\n       * const { DataStore } = JSData;\n       * console.log('Using JSData v' + JSData.version.full);\n       *\n       * const store = new DataStore();\n       * store.defineMapper('post')\n       * const posts = [\n       *   { author: 'John', age: 30, id: 5 },\n       *   { author: 'Sally', age: 31, id: 6 },\n       *   { author: 'Mike', age: 32, id: 7 },\n       *   { author: 'Adam', age: 33, id: 8 },\n       *   { author: 'Adam', age: 33, id: 9 }\n       * ];\n       * store.add('post', posts);\n       * const results = store.filter('post', {\n       *     orderBy:[['author','ASC'],['id','DESC']]\n       * });\n       * console.log(results);\n       *\n       * @name query.orderBy\n       * @type {string|Array[]}\n       * @see http://www.js-data.io/v3.0/docs/query-syntax\n       * @since 3.0.0\n       */\n      if (orderBy) {\n        let index = 0\n        orderBy.forEach(function (def, i) {\n          if (utils.isString(def)) {\n            orderBy[i] = [def, 'ASC']\n          }\n        })\n        this.data.sort((a, b) => this.compare(orderBy, index, a, b))\n      }\n\n      /**\n       * Number of records to skip.\n       *\n       * @example <caption>Retrieve the first \"page\" of blog posts using findAll</caption>\n       * const JSData = require('js-data');\n       * const { DataStore } = JSData;\n       * console.log('Using JSData v' + JSData.version.full);\n       *\n       * const store = new DataStore();\n       * store.defineMapper('post');\n       * const PAGE_SIZE = 10;\n       * let currentPage = 1;\n       * store.findAll('post', {\n       *   offset: PAGE_SIZE * (currentPage 1)\n       *   limit: PAGE_SIZE\n       * });\n       *\n       * @example <caption>Retrieve the last \"page\" of blog posts using filter</caption>\n       * const JSData = require('js-data');\n       * const { DataStore } = JSData;\n       * console.log('Using JSData v' + JSData.version.full);\n       *\n       * const store = new DataStore();\n       *\n       * const PAGE_SIZE = 5;\n       * let currentPage = 2;\n       * store.defineMapper('post');\n       * const posts = [\n       *   { author: 'John', age: 30, id: 1 },\n       *   { author: 'Sally', age: 31, id: 2 },\n       *   { author: 'Mike', age: 32, id: 3 },\n       *   { author: 'Adam', age: 33, id: 4 },\n       *   { author: 'Adam', age: 33, id: 5 },\n       *   { author: 'Peter', age: 25, id: 6 },\n       *   { author: 'Sally', age: 21, id: 7 },\n       *   { author: 'Jim', age: 27, id: 8 },\n       *   { author: 'Jim', age: 27, id: 9 },\n       *   { author: 'Jason', age: 55, id: 10 }\n       * ];\n       * store.add('post', posts);\n       * const results = store.filter('post', {\n       *   offset: PAGE_SIZE * (currentPage 1)\n       *   limit: PAGE_SIZE\n       * });\n       * console.log(results)\n       *\n       * @name query.offset\n       * @type {number}\n       * @see http://www.js-data.io/v3.0/docs/query-syntax\n       * @since 3.0.0\n       */\n      if (utils.isNumber(query.skip)) {\n        this.skip(query.skip)\n      } else if (utils.isNumber(query.offset)) {\n        this.skip(query.offset)\n      }\n\n      /**\n       * Maximum number of records to retrieve.\n       *\n       * @example <caption>Retrieve the first \"page\" of blog posts using findAll</caption>\n       * const JSData = require('js-data');\n       * const { DataStore } = JSData;\n       * console.log('Using JSData v' + JSData.version.full);\n       *\n       * const store = new DataStore();\n       * store.defineMapper('post');\n       *\n       * const PAGE_SIZE = 10\n       * let currentPage = 1\n       * store.findAll('post', {\n       *   offset: PAGE_SIZE * (currentPage 1)\n       *   limit: PAGE_SIZE\n       * });\n       *\n       * @example <caption>Retrieve the last \"page\" of blog posts using filter</caption>\n       * const JSData = require('js-data');\n       * const { DataStore } = JSData;\n       * console.log('Using JSData v' + JSData.version.full);\n       *\n       * const store = new DataStore();\n       *\n       * const PAGE_SIZE = 5\n       * let currentPage = 2\n       * store.defineMapper('post')\n       * const posts = [\n       *   { author: 'John', age: 30, id: 1 },\n       *   { author: 'Sally', age: 31, id: 2 },\n       *   { author: 'Mike', age: 32, id: 3 },\n       *   { author: 'Adam', age: 33, id: 4 },\n       *   { author: 'Adam', age: 33, id: 5 },\n       *   { author: 'Peter', age: 25, id: 6 },\n       *   { author: 'Sally', age: 21, id: 7 },\n       *   { author: 'Jim', age: 27, id: 8 },\n       *   { author: 'Jim', age: 27, id: 9 },\n       *   { author: 'Jason', age: 55, id: 10 }\n       * ];\n       * store.add('post', posts);\n       * const results = store.filter('post', {\n       *   offset: PAGE_SIZE * (currentPage 1)\n       *   limit: PAGE_SIZE\n       * });\n       * console.log(results)\n       *\n       * @name query.limit\n       * @type {number}\n       * @see http://www.js-data.io/v3.0/docs/query-syntax\n       * @since 3.0.0\n       */\n      if (utils.isNumber(query.limit)) {\n        this.limit(query.limit)\n      }\n    } else if (utils.isFunction(query)) {\n      this.data = this.data.filter(query, thisArg)\n    }\n    return this\n  },\n\n  /**\n   * Iterate over all entities.\n   *\n   * @method Query#forEach\n   * @param {Function} forEachFn Iteration function.\n   * @param {*} [thisArg] Context to which to bind `forEachFn`.\n   * @returns {Query} A reference to itself for chaining.\n   * @since 3.0.0\n   */\n  forEach (forEachFn, thisArg) {\n    this.getData().forEach(forEachFn, thisArg)\n    return this\n  },\n\n  /**\n   * Find the entity or entities that match the provided key.\n   *\n   * @example <caption>Get the entity whose primary key is 25.</caption>\n   * const entities = query.get(25).run();\n   *\n   * @example <caption>Same as above.</caption>\n   * const entities = query.get([25]).run();\n   *\n   * @example <caption>Get all users who are active and have the \"admin\" role.</caption>\n   * const activeAdmins = query.get(['active', 'admin'], {\n   *   index: 'activityAndRoles'\n   * }).run();\n   *\n   * @example <caption>Get all entities that match a certain weather condition.</caption>\n   * const niceDays = query.get(['sunny', 'humid', 'calm'], {\n   *   index: 'weatherConditions'\n   * }).run();\n   *\n   * @method Query#get\n   * @param {array} keyList Key(s) defining the entity to retrieve. If\n   * `keyList` is not an array (i.e. for a single-value key), it will be\n   * wrapped in an array.\n   * @param {object} [opts] Configuration options.\n   * @param {string} [opts.string] Name of the secondary index to use in the\n   * query. If no index is specified, the main index is used.\n   * @returns {Query} A reference to itself for chaining.\n   * @since 3.0.0\n   */\n  get (keyList, opts) {\n    keyList || (keyList = [])\n    opts || (opts = {})\n    if (this.data) {\n      throw utils.err(`${DOMAIN}#get`)(500, INDEX_ERR)\n    }\n    if (keyList && !utils.isArray(keyList)) {\n      keyList = [keyList]\n    }\n    if (!keyList.length) {\n      this.getData()\n      return this\n    }\n    this.data = this.collection.getIndex(opts.index).get(keyList)\n    return this\n  },\n\n  /**\n   * Find the entity or entities that match the provided keyLists.\n   *\n   * @example <caption>Get the posts where \"status\" is \"draft\" or \"inReview\".</caption>\n   * const posts = query.getAll('draft', 'inReview', { index: 'status' }).run();\n   *\n   * @example <caption>Same as above.</caption>\n   * const posts = query.getAll(['draft'], ['inReview'], { index: 'status' }).run();\n   *\n   * @method Query#getAll\n   * @param {...Array} [keyList] Provide one or more keyLists, and all\n   * entities matching each keyList will be retrieved. If no keyLists are\n   * provided, all entities will be returned.\n   * @param {object} [opts] Configuration options.\n   * @param {string} [opts.index] Name of the secondary index to use in the\n   * query. If no index is specified, the main index is used.\n   * @returns {Query} A reference to itself for chaining.\n   * @since 3.0.0\n   */\n  getAll (...args) {\n    let opts = {}\n    if (this.data) {\n      throw utils.err(`${DOMAIN}#getAll`)(500, INDEX_ERR)\n    }\n    if (!args.length || (args.length === 1 && utils.isObject(args[0]))) {\n      this.getData()\n      return this\n    } else if (args.length && utils.isObject(args[args.length - 1])) {\n      opts = args[args.length - 1]\n      args.pop()\n    }\n    const collection = this.collection\n    const index = collection.getIndex(opts.index)\n    this.data = []\n    args.forEach((keyList) => {\n      this.data = this.data.concat(index.get(keyList))\n    })\n    return this\n  },\n\n  /**\n   * Return the current data result of this query.\n   *\n   * @method Query#getData\n   * @returns {Array} The data in this query.\n   * @since 3.0.0\n   */\n  getData () {\n    if (!this.data) {\n      this.data = this.collection.index.getAll()\n    }\n    return this.data\n  },\n\n  /**\n   * Implementation used by the `like` operator. Takes a pattern and flags and\n   * returns a `RegExp` instance that can test strings.\n   *\n   * @method Query#like\n   * @param {string} pattern Testing pattern.\n   * @param {string} flags Flags for the regular expression.\n   * @returns {RegExp} Regular expression for testing strings.\n   * @since 3.0.0\n   */\n  like (pattern, flags) {\n    return new RegExp(`^${(escape(pattern).replace(percentRegExp, '.*').replace(underscoreRegExp, '.'))}$`, flags)\n  },\n\n  /**\n   * Limit the result.\n   *\n   * @example <caption>Get only the first 2 posts.</caption>\n   * const store = new JSData.DataStore();\n   * store.defineMapper('post');\n   * const posts = [\n   *   { author: 'John', age: 30, status: 'published', id: 1 },\n   *   { author: 'Sally', age: 31, status: 'draft', id: 2 },\n   *   { author: 'Mike', age: 32, status: 'draft', id: 3 },\n   *   { author: 'Adam', age: 33, status: 'deleted', id: 4 },\n   *   { author: 'Adam', age: 33, status: 'draft', id: 5 }\n   * ];\n   * store.add('post', posts);\n   * const results = store.query('post').limit(2).run();\n   * console.log(results);\n   *\n   * @method Query#limit\n   * @param {number} num The maximum number of entities to keep in the result.\n   * @returns {Query} A reference to itself for chaining.\n   * @since 3.0.0\n   */\n  limit (num) {\n    if (!utils.isNumber(num)) {\n      throw utils.err(`${DOMAIN}#limit`, 'num')(400, 'number', num)\n    }\n    const data = this.getData()\n    this.data = data.slice(0, Math.min(data.length, num))\n    return this\n  },\n\n  /**\n   * Apply a mapping function to the result data.\n   *\n   * @example\n   * const JSData = require('js-data');\n   * const { DataStore } = JSData;\n   * console.log('Using JSData v' + JSData.version.full);\n   *\n   * const store = new DataStore();\n   * store.defineMapper('user');\n   * const users = [\n   *   { name: 'Peter', age: 25, id: 1 },\n   *   { name: 'Jim', age: 19, id: 2 },\n   *   { name: 'Mike', age: 17, id: 3 },\n   *   { name: 'Alan', age: 29, id: 4 },\n   *   { name: 'Katie', age: 33, id: 5 }\n   * ];\n   * store.add('user', users);\n   * const ages = store\n   *   .query('user')\n   *   .map(function (user) {\n   *     return user.age;\n   *   })\n   *   .run();\n   * console.log(ages);\n   *\n   * @method Query#map\n   * @param {Function} mapFn Mapping function.\n   * @param {*} [thisArg] Context to which to bind `mapFn`.\n   * @returns {Query} A reference to itself for chaining.\n   * @since 3.0.0\n   */\n  map (mapFn, thisArg) {\n    this.data = this.getData().map(mapFn, thisArg)\n    return this\n  },\n\n  /**\n   * Return the result of calling the specified function on each item in this\n   * collection's main index.\n   *\n   * @example\n   * const stringAges = UserCollection.query().mapCall('toString').run();\n   *\n   * @method Query#mapCall\n   * @param {string} funcName Name of function to call\n   * @parama {...*} [args] Remaining arguments to be passed to the function.\n   * @returns {Query} A reference to itself for chaining.\n   * @since 3.0.0\n   */\n  mapCall (funcName, ...args) {\n    this.data = this.getData().map(function (item) {\n      return item[funcName](...args)\n    })\n    return this\n  },\n\n  /**\n   * Complete the execution of the query and return the resulting data.\n   *\n   * @method Query#run\n   * @returns {Array} The result of executing this query.\n   * @since 3.0.0\n   */\n  run () {\n    const data = this.data\n    this.data = null\n    return data\n  },\n\n  /**\n   * Skip a number of results.\n   *\n   * @example <caption>Get all but the first 2 posts.</caption>\n   * const JSData = require('js-data');\n   * const { DataStore } = JSData;\n   * console.log('Using JSData v' + JSData.version.full);\n   *\n   * const store = new DataStore();\n   * store.defineMapper('post');\n   * const posts = [\n   *   { author: 'John', age: 30, status: 'published', id: 1 },\n   *   { author: 'Sally', age: 31, status: 'draft', id: 2 },\n   *   { author: 'Mike', age: 32, status: 'draft', id: 3 },\n   *   { author: 'Adam', age: 33, status: 'deleted', id: 4 },\n   *   { author: 'Adam', age: 33, status: 'draft', id: 5 }\n   * ];\n   * store.add('post', posts);\n   * const results = store.query('post').skip(2).run();\n   * console.log(results);\n   *\n   * @method Query#skip\n   * @param {number} num The number of entities to skip.\n   * @returns {Query} A reference to itself for chaining.\n   * @since 3.0.0\n   */\n  skip (num) {\n    if (!utils.isNumber(num)) {\n      throw utils.err(`${DOMAIN}#skip`, 'num')(400, 'number', num)\n    }\n    const data = this.getData()\n    if (num < data.length) {\n      this.data = data.slice(num)\n    } else {\n      this.data = []\n    }\n    return this\n  }\n}, {\n  /**\n   * The filtering operators supported by {@link Query#filter}, and which are\n   * implemented by adapters (for the most part).\n   *\n   * @example <caption>Variant 1</caption>\n   * const JSData = require('js-data');\n   * const { DataStore } = JSData;\n   * console.log('Using JSData v' + JSData.version.full);\n   *\n   * const store = new DataStore();\n   * store.defineMapper('post');\n   * const posts = [\n   *   { author: 'John', age: 30, status: 'published', id: 1 },\n   *   { author: 'Sally', age: 31, status: 'published', id: 2 },\n   *   { author: 'Mike', age: 32, status: 'published', id: 3 },\n   *   { author: 'Adam', age: 33, status: 'deleted', id: 4 },\n   *   { author: 'Adam', age: 33, status: 'published', id: 5 }\n   * ];\n   * store.add('post', posts);\n   * const publishedPosts = store.filter('post', {\n   *   status: 'published',\n   *   limit: 2\n   * });\n   * console.log(publishedPosts);\n   *\n   *\n   * @example <caption>Variant 2</caption>\n   * const JSData = require('js-data');\n   * const { DataStore } = JSData;\n   * console.log('Using JSData v' + JSData.version.full);\n   *\n   * const store = new DataStore();\n   * store.defineMapper('post')\n   * const posts = [\n   *   { author: 'John', age: 30, status: 'published', id: 1 },\n   *   { author: 'Sally', age: 31, status: 'published', id: 2 },\n   *   { author: 'Mike', age: 32, status: 'published', id: 3 },\n   *   { author: 'Adam', age: 33, status: 'deleted', id: 4 },\n   *   { author: 'Adam', age: 33, status: 'published', id: 5 }\n   * ];\n   * store.add('post', posts);\n   * const publishedPosts = store.filter('post', {\n   *   where: {\n   *     status: {\n   *       '==': 'published'\n   *     }\n   *   },\n   *   limit: 2\n   * });\n   * console.log(publishedPosts);\n   *\n   * @example <caption>Variant 3</caption>\n   * const JSData = require('js-data');\n   * const { DataStore } = JSData;\n   * console.log('Using JSData v' + JSData.version.full);\n   *\n   * const store = new DataStore();\n   * store.defineMapper('post');\n   * const posts = [\n   *   { author: 'John', age: 30, status: 'published', id: 1 },\n   *   { author: 'Sally', age: 31, status: 'published', id: 2 },\n   *   { author: 'Mike', age: 32, status: 'published', id: 3 },\n   *   { author: 'Adam', age: 33, status: 'deleted', id: 4 },\n   *   { author: 'Adam', age: 33, status: 'published', id: 5 }\n   * ];\n   * store.add('post', posts);\n   * const publishedPosts = store\n   *   .query('post')\n   *   .filter({ status: 'published' })\n   *   .limit(2)\n   *   .run();\n   * console.log(publishedPosts);\n   *\n   * @example <caption>Variant 4</caption>\n   * const JSData = require('js-data');\n   * const { DataStore } = JSData;\n   * console.log('Using JSData v' + JSData.version.full);\n   *\n   * const store = new DataStore();\n   * store.defineMapper('post');\n   * const posts = [\n   *   { author: 'John', age: 30, status: 'published', id: 1 },\n   *   { author: 'Sally', age: 31, status: 'published', id: 2 },\n   *   { author: 'Mike', age: 32, status: 'published', id: 3 },\n   *   { author: 'Adam', age: 33, status: 'deleted', id: 4 },\n   *   { author: 'Adam', age: 33, status: 'published', id: 5 }\n   * ];\n   * store.add('post', posts);\n   * const publishedPosts = store\n   *   .query('post')\n   *   .filter({\n   *     where: {\n   *       status: {\n   *         '==': 'published'\n   *       }\n   *     }\n   *   })\n   *   .limit(2)\n   *   .run();\n   * console.log(publishedPosts);\n   *\n   * @example <caption>Multiple operators</caption>\n   * const JSData = require('js-data');\n   * const { DataStore } = JSData;\n   * console.log('Using JSData v' + JSData.version.full);\n   *\n   * const store = new DataStore();\n   * store.defineMapper('post');\n   * const posts = [\n   *   { author: 'John', age: 30, status: 'published', id: 1 },\n   *   { author: 'Sally', age: 31, status: 'published', id: 2 },\n   *   { author: 'Mike', age: 32, status: 'published', id: 3 },\n   *   { author: 'Adam', age: 33, status: 'deleted', id: 4 },\n   *   { author: 'Adam', age: 33, status: 'published', id: 5 }\n   * ];\n   * store.add('post', posts);\n   *\n   * const myPublishedPosts = store.filter('post', {\n   *   where: {\n   *     status: {\n   *       '==': 'published'\n   *     },\n   *     user_id: {\n   *       '==': currentUser.id\n   *     }\n   *   }\n   * });\n   *\n   * console.log(myPublishedPosts);\n   *\n   * @name Query.ops\n   * @property {Function} == Equality operator.\n   * @property {Function} != Inequality operator.\n   * @property {Function} > Greater than operator.\n   * @property {Function} >= Greater than (inclusive) operator.\n   * @property {Function} < Less than operator.\n   * @property {Function} <= Less than (inclusive) operator.\n   * @property {Function} isectEmpty Operator that asserts that the intersection\n   * between two arrays is empty.\n   * @property {Function} isectNotEmpty Operator that asserts that the\n   * intersection between two arrays is __not__ empty.\n   * @property {Function} in Operator that asserts whether a value is in an\n   * array.\n   * @property {Function} notIn Operator that asserts whether a value is __not__\n   * in an array.\n   * @property {Function} contains Operator that asserts whether an array\n   * contains a value.\n   * @property {Function} notContains Operator that asserts whether an array\n   * does __not__ contain a value.\n   * @since 3.0.0\n   * @type {Object}\n   */\n  ops: {\n    '=': function (value, predicate) {\n      return value == predicate // eslint-disable-line\n    },\n    '==': function (value, predicate) {\n      return value == predicate // eslint-disable-line\n    },\n    '===': function (value, predicate) {\n      return value === predicate\n    },\n    '!=': function (value, predicate) {\n      return value != predicate // eslint-disable-line\n    },\n    '!==': function (value, predicate) {\n      return value !== predicate\n    },\n    '>': function (value, predicate) {\n      return value > predicate\n    },\n    '>=': function (value, predicate) {\n      return value >= predicate\n    },\n    '<': function (value, predicate) {\n      return value < predicate\n    },\n    '<=': function (value, predicate) {\n      return value <= predicate\n    },\n    'isectEmpty': function (value, predicate) {\n      return !utils.intersection((value || []), (predicate || [])).length\n    },\n    'isectNotEmpty': function (value, predicate) {\n      return utils.intersection((value || []), (predicate || [])).length\n    },\n    'in': function (value, predicate) {\n      return predicate.indexOf(value) !== -1\n    },\n    'notIn': function (value, predicate) {\n      return predicate.indexOf(value) === -1\n    },\n    'contains': function (value, predicate) {\n      return (value || []).indexOf(predicate) !== -1\n    },\n    'notContains': function (value, predicate) {\n      return (value || []).indexOf(predicate) === -1\n    }\n  }\n})\n\n/**\n * Create a subclass of this Query:\n * @example <caption>Query.extend</caption>\n * const JSData = require('js-data');\n * const { Query } = JSData;\n * console.log('Using JSData v' + JSData.version.full);\n *\n * // Extend the class using ES2015 class syntax.\n * class CustomQueryClass extends Query {\n *   foo () { return 'bar'; }\n *   static beep () { return 'boop'; }\n * }\n * const customQuery = new CustomQueryClass();\n * console.log(customQuery.foo());\n * console.log(CustomQueryClass.beep());\n *\n * // Extend the class using alternate method.\n * const OtherQueryClass = Query.extend({\n *   foo () { return 'bar'; }\n * }, {\n *   beep () { return 'boop'; }\n * });\n * const otherQuery = new OtherQueryClass();\n * console.log(otherQuery.foo());\n * console.log(OtherQueryClass.beep());\n *\n * // Extend the class, providing a custom constructor.\n * function AnotherQueryClass (collection) {\n *   Query.call(this, collection);\n *   this.created_at = new Date().getTime();\n * }\n * Query.extend({\n *   constructor: AnotherQueryClass,\n *   foo () { return 'bar'; }\n * }, {\n *   beep () { return 'boop'; }\n * });\n * const anotherQuery = new AnotherQueryClass();\n * console.log(anotherQuery.created_at);\n * console.log(anotherQuery.foo());\n * console.log(AnotherQueryClass.beep());\n *\n * @method Query.extend\n * @param {object} [props={}] Properties to add to the prototype of the\n * subclass.\n * @param {object} [props.constructor] Provide a custom constructor function\n * to be used as the subclass itself.\n * @param {object} [classProps={}] Static properties to add to the subclass.\n * @returns {Constructor} Subclass of this Query class.\n * @since 3.0.0\n */\n","import utils from './utils'\n\n// TODO: remove this when the rest of the project is cleaned\nexport const belongsToType = 'belongsTo'\nexport const hasManyType = 'hasMany'\nexport const hasOneType = 'hasOne'\n\nconst DOMAIN = 'Relation'\n\nexport function Relation (relatedMapper, options = {}) {\n  utils.classCallCheck(this, Relation)\n\n  options.type = this.constructor.TYPE_NAME\n  this.validateOptions(relatedMapper, options)\n\n  if (typeof relatedMapper === 'object') {\n    Object.defineProperty(this, 'relatedMapper', { value: relatedMapper })\n  }\n\n  Object.defineProperty(this, 'inverse', { writable: true })\n  utils.fillIn(this, options)\n}\n\nRelation.extend = utils.extend\n\nutils.addHiddenPropsToTarget(Relation.prototype, {\n  get canAutoAddLinks () {\n    return this.add === undefined || !!this.add\n  },\n\n  get relatedCollection () {\n    return this.mapper.datastore.getCollection(this.relation)\n  },\n\n  validateOptions (related, opts) {\n    const DOMAIN_ERR = `new ${DOMAIN}`\n\n    const localField = opts.localField\n    if (!localField) {\n      throw utils.err(DOMAIN_ERR, 'opts.localField')(400, 'string', localField)\n    }\n\n    const foreignKey = opts.foreignKey = opts.foreignKey || opts.localKey\n    if (!foreignKey && (opts.type === belongsToType || opts.type === hasOneType)) {\n      throw utils.err(DOMAIN_ERR, 'opts.foreignKey')(400, 'string', foreignKey)\n    }\n\n    if (utils.isString(related)) {\n      opts.relation = related\n      if (!utils.isFunction(opts.getRelation)) {\n        throw utils.err(DOMAIN_ERR, 'opts.getRelation')(400, 'function', opts.getRelation)\n      }\n    } else if (related) {\n      opts.relation = related.name\n    } else {\n      throw utils.err(DOMAIN_ERR, 'related')(400, 'Mapper or string', related)\n    }\n  },\n\n  assignTo (mapper) {\n    this.name = mapper.name\n    Object.defineProperty(this, 'mapper', { value: mapper })\n\n    mapper.relationList || Object.defineProperty(mapper, 'relationList', { value: [] })\n    mapper.relationFields || Object.defineProperty(mapper, 'relationFields', { value: [] })\n    mapper.relationList.push(this)\n    mapper.relationFields.push(this.localField)\n  },\n\n  canFindLinkFor () {\n    return !!(this.foreignKey || this.localKey)\n  },\n\n  getRelation () {\n    return this.relatedMapper\n  },\n\n  getForeignKey (record) {\n    return utils.get(record, this.mapper.idAttribute)\n  },\n\n  setForeignKey (record, relatedRecord) {\n    if (!record || !relatedRecord) {\n      return\n    }\n\n    this._setForeignKey(record, relatedRecord)\n  },\n\n  _setForeignKey (record, relatedRecords) {\n    const idAttribute = this.mapper.idAttribute\n\n    if (!utils.isArray(relatedRecords)) {\n      relatedRecords = [relatedRecords]\n    }\n\n    relatedRecords.forEach((relatedRecord) => {\n      utils.set(relatedRecord, this.foreignKey, utils.get(record, idAttribute))\n    })\n  },\n\n  getLocalField (record) {\n    return utils.get(record, this.localField)\n  },\n\n  setLocalField (record, relatedData) {\n    return utils.set(record, this.localField, relatedData)\n  },\n\n  getInverse (mapper) {\n    if (!this.inverse) {\n      this.findInverseRelation(mapper)\n    }\n\n    return this.inverse\n  },\n\n  findInverseRelation (mapper) {\n    this.getRelation().relationList.forEach((def) => {\n      if (def.getRelation() === mapper && this.isInversedTo(def) && this !== def) {\n        this.inverse = def\n        return true\n      }\n    })\n  },\n\n  isInversedTo (def) {\n    return !def.foreignKey || def.foreignKey === this.foreignKey\n  },\n\n  addLinkedRecords (records) {\n    const datastore = this.mapper.datastore\n\n    records.forEach((record) => {\n      let relatedData = this.getLocalField(record)\n\n      if (utils.isFunction(this.add)) {\n        relatedData = this.add(datastore, this, record)\n      } else if (relatedData) {\n        relatedData = this.linkRecord(record, relatedData)\n      }\n\n      const isEmptyLinks = !relatedData || (utils.isArray(relatedData) && !relatedData.length)\n\n      if (isEmptyLinks && this.canFindLinkFor(record)) {\n        relatedData = this.findExistingLinksFor(record)\n      }\n\n      if (relatedData) {\n        this.setLocalField(record, relatedData)\n      }\n    })\n  },\n\n  removeLinkedRecords (relatedMapper, records) {\n    const localField = this.localField\n    records.forEach((record) => {\n      utils.set(record, localField, undefined)\n    })\n  },\n\n  linkRecord (record, relatedRecord) {\n    const relatedId = utils.get(relatedRecord, this.mapper.idAttribute)\n\n    if (relatedId === undefined) {\n      const unsaved = this.relatedCollection.unsaved()\n      if (unsaved.indexOf(relatedRecord) === -1) {\n        if (this.canAutoAddLinks) {\n          relatedRecord = this.relatedCollection.add(relatedRecord)\n        }\n      }\n    } else {\n      if (relatedRecord !== this.relatedCollection.get(relatedId)) {\n        this.setForeignKey(record, relatedRecord)\n\n        if (this.canAutoAddLinks) {\n          relatedRecord = this.relatedCollection.add(relatedRecord)\n        }\n      }\n    }\n\n    return relatedRecord\n  },\n\n  // e.g. user hasMany post via \"foreignKey\", so find all posts of user\n  findExistingLinksByForeignKey (id) {\n    if (id === undefined || id === null) {\n      return\n    }\n    return this.relatedCollection.filter({\n      [this.foreignKey]: id\n    })\n  },\n\n  ensureLinkedDataHasProperType (props, opts) {\n    const relatedMapper = this.getRelation()\n    const relationData = this.getLocalField(props)\n\n    if (utils.isArray(relationData) && (!relationData.length || relatedMapper.is(relationData[0]))) {\n      return\n    }\n\n    if (relationData && !relatedMapper.is(relationData)) {\n      utils.set(props, this.localField, relatedMapper.createRecord(relationData, opts))\n    }\n  },\n\n  isRequiresParentId () {\n    return false\n  },\n\n  isRequiresChildId () {\n    return false\n  },\n\n  createChildRecord (props, relationData, opts) {\n    this.setForeignKey(props, relationData)\n\n    return this.createLinked(relationData, opts).then((result) => {\n      this.setLocalField(props, result)\n    })\n  },\n\n  createLinked (props, opts) {\n    const create = utils.isArray(props) ? 'createMany' : 'create'\n\n    return this.getRelation()[create](props, opts)\n  }\n})\n","import utils from '../utils'\nimport { Relation } from '../Relation'\n\nexport const BelongsToRelation = Relation.extend({\n  getForeignKey (record) {\n    return utils.get(record, this.foreignKey)\n  },\n\n  _setForeignKey (record, relatedRecord) {\n    utils.set(record, this.foreignKey, utils.get(relatedRecord, this.getRelation().idAttribute))\n  },\n\n  findExistingLinksFor (record) {\n    // console.log('\\tBelongsTo#findExistingLinksFor', record)\n    if (!record) {\n      return\n    }\n    const relatedId = utils.get(record, this.foreignKey)\n    if (relatedId !== undefined && relatedId !== null) {\n      return this.relatedCollection.get(relatedId)\n    }\n  },\n\n  isRequiresParentId () {\n    return true\n  },\n\n  createParentRecord (props, opts) {\n    const relationData = this.getLocalField(props)\n\n    return this.createLinked(relationData, opts).then((record) => {\n      this.setForeignKey(props, record)\n    })\n  },\n\n  createChildRecord () {\n    throw new Error('\"BelongsTo\" relation does not support child creation as it cannot have children.')\n  }\n}, {\n  TYPE_NAME: 'belongsTo'\n})\n","import utils from '../utils'\nimport { Relation } from '../Relation'\n\nexport const HasManyRelation = Relation.extend({\n  validateOptions (related, opts) {\n    Relation.prototype.validateOptions.call(this, related, opts)\n\n    const { localKeys, foreignKeys, foreignKey } = opts\n\n    if (!foreignKey && !localKeys && !foreignKeys) {\n      throw utils.err('new Relation', 'opts.<foreignKey|localKeys|foreignKeys>')(400, 'string', foreignKey)\n    }\n  },\n\n  canFindLinkFor (record) {\n    const hasForeignKeys = this.foreignKey || this.foreignKeys\n    return !!(hasForeignKeys || (this.localKeys && utils.get(record, this.localKeys)))\n  },\n\n  linkRecord (record, relatedRecords) {\n    const relatedCollection = this.relatedCollection\n    const canAutoAddLinks = this.canAutoAddLinks\n    const foreignKey = this.foreignKey\n    const unsaved = this.relatedCollection.unsaved()\n\n    return relatedRecords.map((relatedRecord) => {\n      const relatedId = relatedCollection.recordId(relatedRecord)\n\n      if ((relatedId === undefined && unsaved.indexOf(relatedRecord) === -1) || relatedRecord !== relatedCollection.get(relatedId)) {\n        if (foreignKey) {\n          // TODO: slow, could be optimized? But user loses hook\n          this.setForeignKey(record, relatedRecord)\n        }\n        if (canAutoAddLinks) {\n          relatedRecord = relatedCollection.add(relatedRecord)\n        }\n      }\n\n      return relatedRecord\n    })\n  },\n\n  findExistingLinksFor (record) {\n    const id = utils.get(record, this.mapper.idAttribute)\n    const ids = this.localKeys ? utils.get(record, this.localKeys) : null\n    let records\n\n    if (id !== undefined && this.foreignKey) {\n      records = this.findExistingLinksByForeignKey(id)\n    } else if (this.localKeys && ids) {\n      records = this.findExistingLinksByLocalKeys(ids)\n    } else if (id !== undefined && this.foreignKeys) {\n      records = this.findExistingLinksByForeignKeys(id)\n    }\n\n    if (records && records.length) {\n      return records\n    }\n  },\n\n  // e.g. user hasMany group via \"foreignKeys\", so find all users of a group\n  findExistingLinksByLocalKeys (ids) {\n    return this.relatedCollection.filter({\n      where: {\n        [this.relatedCollection.mapper.idAttribute]: {\n          'in': ids\n        }\n      }\n    })\n  },\n\n  // e.g. group hasMany user via \"localKeys\", so find all groups that own a user\n  findExistingLinksByForeignKeys (id) {\n    return this.relatedCollection.filter({\n      where: {\n        [this.foreignKeys]: {\n          'contains': id\n        }\n      }\n    })\n  },\n\n  isRequiresParentId () {\n    return !!this.localKeys && this.localKeys.length > 0\n  },\n\n  isRequiresChildId () {\n    return !!this.foreignKey\n  },\n\n  createParentRecord (props, opts) {\n    const relationData = this.getLocalField(props)\n    const foreignIdField = this.getRelation().idAttribute\n\n    return this.createLinked(relationData, opts).then((records) => {\n      utils.set(props, this.localKeys, records.map((record) => utils.get(record, foreignIdField)))\n    })\n  },\n\n  createLinked (props, opts) {\n    return this.getRelation().createMany(props, opts)\n  }\n}, {\n  TYPE_NAME: 'hasMany'\n})\n","import utils from '../utils'\nimport { Relation } from '../Relation'\n\nexport const HasOneRelation = Relation.extend({\n  findExistingLinksFor (relatedMapper, record) {\n    const recordId = utils.get(record, relatedMapper.idAttribute)\n    const records = this.findExistingLinksByForeignKey(recordId)\n\n    if (records && records.length) {\n      return records[0]\n    }\n  },\n\n  isRequiresChildId () {\n    return true\n  }\n}, {\n  TYPE_NAME: 'hasOne'\n})\n","import { Relation } from './Relation'\nimport { BelongsToRelation } from './Relation/BelongsTo'\nimport { HasManyRelation } from './Relation/HasMany'\nimport { HasOneRelation } from './Relation/HasOne'\n\n[BelongsToRelation, HasManyRelation, HasOneRelation].forEach(function (RelationType) {\n  Relation[RelationType.TYPE_NAME] = function (related, options) {\n    return new RelationType(related, options)\n  }\n})\n\nexport { belongsToType, hasManyType, hasOneType, Relation } from './Relation'\n","import { Relation } from './relations'\n\nexport { belongsToType, hasManyType, hasOneType } from './relations'\n/**\n * BelongsTo relation decorator. You probably won't use this directly.\n *\n * @name module:js-data.belongsTo\n * @method\n * @param {Mapper} related The relation the target belongs to.\n * @param {object} opts Configuration options.\n * @param {string} opts.foreignKey The field that holds the primary key of the\n * related record.\n * @param {string} opts.localField The field that holds a reference to the\n * related record object.\n * @returns {Function} Invocation function, which accepts the target as the only\n * parameter.\n */\nexport const belongsTo = function (related, opts) {\n  return function (mapper) {\n    Relation.belongsTo(related, opts).assignTo(mapper)\n  }\n}\n\n/**\n * HasMany relation decorator. You probably won't use this directly.\n *\n * @name module:js-data.hasMany\n * @method\n * @param {Mapper} related The relation of which the target has many.\n * @param {object} opts Configuration options.\n * @param {string} [opts.foreignKey] The field that holds the primary key of the\n * related record.\n * @param {string} opts.localField The field that holds a reference to the\n * related record object.\n * @returns {Function} Invocation function, which accepts the target as the only\n * parameter.\n */\nexport const hasMany = function (related, opts) {\n  return function (mapper) {\n    Relation.hasMany(related, opts).assignTo(mapper)\n  }\n}\n\n/**\n * HasOne relation decorator. You probably won't use this directly.\n *\n * @name module:js-data.hasOne\n * @method\n * @param {Mapper} related The relation of which the target has one.\n * @param {object} opts Configuration options.\n * @param {string} [opts.foreignKey] The field that holds the primary key of the\n * related record.\n * @param {string} opts.localField The field that holds a reference to the\n * related record object.\n * @returns {Function} Invocation function, which accepts the target as the only\n * parameter.\n */\nexport const hasOne = function (related, opts) {\n  return function (mapper) {\n    Relation.hasOne(related, opts).assignTo(mapper)\n  }\n}\n","import utils, { safeSetLink } from './utils'\nimport Component from './Component'\nimport Settable from './Settable'\nimport {\n  hasManyType,\n  hasOneType\n} from './decorators'\n\nconst DOMAIN = 'Record'\n\nconst superMethod = function (mapper, name) {\n  const store = mapper.datastore\n  if (store && store[name]) {\n    return function (...args) {\n      return store[name](mapper.name, ...args)\n    }\n  }\n  return mapper[name].bind(mapper)\n}\n\n// Cache these strings\nconst creatingPath = 'creating'\nconst noValidatePath = 'noValidate'\nconst keepChangeHistoryPath = 'keepChangeHistory'\nconst previousPath = 'previous'\n\n/**\n * js-data's Record class. An instance of `Record` corresponds to an in-memory\n * representation of a single row or document in a database, Firebase,\n * localstorage, etc. Basically, a `Record` instance represents whatever kind of\n * entity in your persistence layer that has a primary key.\n *\n * ```javascript\n * import {Record} from 'js-data'\n * ```\n *\n * @example <caption>Record#constructor</caption>\n * const JSData = require('js-data');\n * const { Record } = JSData;\n * console.log('Using JSData v' + JSData.version.full);\n *\n * // Instantiate a plain record\n * let record = new Record();\n * console.log('record: ' + JSON.stringify(record));\n *\n * // You can supply properties on instantiation\n * record = new Record({ name: 'John' });\n * console.log('record: ' + JSON.stringify(record));\n *\n * @example <caption>Record#constructor2</caption>\n * const JSData = require('js-data');\n * const { Mapper } = JSData;\n * console.log('Using JSData v' + JSData.version.full);\n *\n * // Instantiate a record that's associated with a Mapper:\n * const UserMapper = new Mapper({ name: 'user' });\n * const User = UserMapper.recordClass;\n * const user = UserMapper.createRecord({ name: 'John' });\n * const user2 = new User({ name: 'Sally' });\n * console.log('user: ' + JSON.stringify(user));\n * console.log('user2: ' + JSON.stringify(user2));\n *\n * @example <caption>Record#constructor3</caption>\n * const JSData = require('js-data');\n * const { Container } = JSData;\n * console.log('Using JSData v' + JSData.version.full);\n *\n * const store = new Container();\n * store.defineMapper('user');\n *\n * // Instantiate a record that's associated with a store's Mapper\n * const user = store.createRecord('user', { name: 'John' });\n * console.log('user: ' + JSON.stringify(user));\n *\n * @example <caption>Record#constructor4</caption>\n * const JSData = require('js-data');\n * const { Container } = JSData;\n * console.log('Using JSData v' + JSData.version.full);\n *\n * const store = new Container();\n * store.defineMapper('user', {\n *   schema: {\n *     properties: {\n *       name: { type: 'string' }\n *     }\n *   }\n * });\n *\n * // Validate on instantiation\n * const user = store.createRecord('user', { name: 1234 });\n * console.log('user: ' + JSON.stringify(user));\n *\n * @example <caption>Record#constructor5</caption>\n * const JSData = require('js-data');\n * const { Container } = JSData;\n * console.log('Using JSData v' + JSData.version.full);\n *\n * const store = new Container();\n * store.defineMapper('user', {\n *   schema: {\n *     properties: {\n *       name: { type: 'string' }\n *     }\n *   }\n * });\n *\n * // Skip validation on instantiation\n * const user = store.createRecord('user', { name: 1234 }, { noValidate: true });\n * console.log('user: ' + JSON.stringify(user));\n * console.log('user.isValid(): ' + user.isValid());\n *\n * @class Record\n * @extends Component\n * @param {object} [props] The initial properties of the new Record instance.\n * @param {object} [opts] Configuration options.\n * @param {boolean} [opts.noValidate=false] Whether to skip validation on the\n * initial properties.\n * @param {boolean} [opts.validateOnSet=true] Whether to enable setter\n * validation on properties after the Record has been initialized.\n * @since 3.0.0\n */\nfunction Record (props, opts) {\n  utils.classCallCheck(this, Record)\n  Settable.call(this)\n  props || (props = {})\n  opts || (opts = {})\n  const _set = this._set\n  const mapper = this.constructor.mapper\n\n  _set(creatingPath, true)\n  _set(noValidatePath, !!opts.noValidate)\n  _set(keepChangeHistoryPath, opts.keepChangeHistory === undefined ? (mapper ? mapper.keepChangeHistory : true) : opts.keepChangeHistory)\n\n  // Set the idAttribute value first, if it exists.\n  const id = mapper ? utils.get(props, mapper.idAttribute) : undefined\n  if (id !== undefined) {\n    utils.set(this, mapper.idAttribute, id)\n  }\n\n  utils.fillIn(this, props)\n  _set(creatingPath, false)\n  if (opts.validateOnSet !== undefined) {\n    _set(noValidatePath, !opts.validateOnSet)\n  } else if (mapper && mapper.validateOnSet !== undefined) {\n    _set(noValidatePath, !mapper.validateOnSet)\n  } else {\n    _set(noValidatePath, false)\n  }\n  _set(previousPath, mapper ? mapper.toJSON(props) : utils.plainCopy(props))\n}\n\nexport default Component.extend({\n  constructor: Record,\n\n  /**\n   * Returns the {@link Mapper} paired with this record's class, if any.\n   *\n   * @method Record#_mapper\n   * @returns {Mapper} The {@link Mapper} paired with this record's class, if any.\n   * @since 3.0.0\n   */\n  _mapper () {\n    const mapper = this.constructor.mapper\n    if (!mapper) {\n      throw utils.err(`${DOMAIN}#_mapper`, '')(404, 'mapper')\n    }\n    return mapper\n  },\n\n  /**\n   * Lifecycle hook.\n   *\n   * @method Record#afterLoadRelations\n   * @param {string[]} relations The `relations` argument passed to {@link Record#loadRelations}.\n   * @param {object} opts The `opts` argument passed to {@link Record#loadRelations}.\n   * @since 3.0.0\n   */\n  afterLoadRelations () {},\n\n  /**\n   * Lifecycle hook.\n   *\n   * @method Record#beforeLoadRelations\n   * @param {string[]} relations The `relations` argument passed to {@link Record#loadRelations}.\n   * @param {object} opts The `opts` argument passed to {@link Record#loadRelations}.\n   * @since 3.0.0\n   */\n  beforeLoadRelations () {},\n\n  /**\n   * Return the change history of this record since it was instantiated or\n   * {@link Record#commit} was called.\n   *\n   * @method Record#changeHistory\n   * @since 3.0.0\n   */\n  changeHistory () {\n    return (this._get('history') || []).slice()\n  },\n\n  /**\n   * Return changes to this record since it was instantiated or\n   * {@link Record#commit} was called.\n   *\n   * @example <caption>Record#changes</caption>\n   * const JSData = require('js-data');\n   * const { Container } = JSData;\n   * console.log('Using JSData v' + JSData.version.full);\n   *\n   * const store = new Container();\n   * store.defineMapper('user');\n   * const user = store.createRecord('user');\n   * console.log('user changes: ' + JSON.stringify(user.changes()));\n   * user.name = 'John';\n   * console.log('user changes: ' + JSON.stringify(user.changes()));\n   *\n   * @method Record#changes\n   * @param [opts] Configuration options.\n   * @param {Function} [opts.equalsFn={@link utils.deepEqual}] Equality function.\n   * @param {array} [opts.ignore=[]] Array of strings or RegExp of fields to ignore.\n   * @returns {Object} Object describing the changes to this record since it was\n   * instantiated or its {@link Record#commit} method was last called.\n   * @since 3.0.0\n   */\n  changes (opts) {\n    opts || (opts = {})\n    return utils.diffObjects(typeof this.toJSON === 'function' ? this.toJSON(opts) : this, this._get('previous'), opts)\n  },\n\n  /**\n   * Make the record's current in-memory state it's only state, with any\n   * previous property values being set to current values.\n   *\n   * @example <caption>Record#commit</caption>\n   * const JSData = require('js-data');\n   * const { Container } = JSData;\n   * console.log('Using JSData v' + JSData.version.full);\n   *\n   * const store = new Container();\n   * store.defineMapper('user');\n   * const user = store.createRecord('user');\n   * console.log('user hasChanges: ' + user.hasChanges());\n   * user.name = 'John';\n   * console.log('user hasChanges: ' + user.hasChanges());\n   * user.commit();\n   * console.log('user hasChanges: ' + user.hasChanges());\n   *\n   * @method Record#commit\n   * @param {object} [opts] Configuration options. Passed to {@link Record#toJSON}.\n   * @since 3.0.0\n   */\n  commit (opts) {\n    this._set('changed') // unset\n    this._set('changing', false)\n    this._set('history', []) // clear history\n    this._set('previous', this.toJSON(opts))\n  },\n\n  /**\n   * Call {@link Mapper#destroy} using this record's primary key.\n   *\n   * @example\n   * import { Container } from 'js-data';\n   * import { RethinkDBAdapter } from 'js-data-rethinkdb';\n   *\n   * const store = new Container();\n   * store.registerAdapter('rethink', new RethinkDBAdapter(), { default: true });\n   * store.defineMapper('user');\n   * store.find('user', 1234).then((user) => {\n   *   console.log(user.id); // 1234\n   *\n   *   // Destroy this user from the database\n   *   return user.destroy();\n   * });\n   *\n   * @method Record#destroy\n   * @param {object} [opts] Configuration options passed to {@link Mapper#destroy}.\n   * @returns {Promise} The result of calling {@link Mapper#destroy} with the\n   * primary key of this record.\n   * @since 3.0.0\n   */\n  destroy (opts) {\n    opts || (opts = {})\n    const mapper = this._mapper()\n    return superMethod(mapper, 'destroy')(utils.get(this, mapper.idAttribute), opts)\n  },\n\n  /**\n   * Return the value at the given path for this instance.\n   *\n   * @example <caption>Record#get</caption>\n   * const JSData = require('js-data');\n   * const { Container } = JSData;\n   * console.log('Using JSData v' + JSData.version.full);\n   * const store = new Container();\n   * store.defineMapper('user');\n   *\n   * const user = store.createRecord('user', { name: 'Bob' });\n   * console.log('user.get(\"name\"): ' + user.get('name'));\n   *\n   * @method Record#get\n   * @param {string} key Path of value to retrieve.\n   * @returns {*} Value at path.\n   * @since 3.0.0\n   */\n  'get' (key) {\n    return utils.get(this, key)\n  },\n\n  /**\n   * Return whether this record has changed since it was instantiated or\n   * {@link Record#commit} was called.\n   *\n   * @example <caption>Record#hasChanges</caption>\n   * const JSData = require('js-data');\n   * const { Container } = JSData;\n   * console.log('Using JSData v' + JSData.version.full);\n   * const store = new Container();\n   * store.defineMapper('user');\n   * const user = store.createRecord('user');\n   * console.log('user hasChanges: ' + user.hasChanges());\n   * user.name = 'John';\n   * console.log('user hasChanges: ' + user.hasChanges());\n   * user.commit();\n   * console.log('user hasChanges: ' + user.hasChanges());\n   *\n   * @method Record#hasChanges\n   * @param [opts] Configuration options.\n   * @param {Function} [opts.equalsFn={@link utils.deepEqual}] Equality function.\n   * @param {array} [opts.ignore=[]] Array of strings or RegExp of fields to ignore.\n   * @returns {boolean} Return whether the record has changed since it was\n   * instantiated or since its {@link Record#commit} method was called.\n   * @since 3.0.0\n   */\n  hasChanges (opts) {\n    const quickHasChanges = !!(this._get('changed') || []).length\n    return quickHasChanges || utils.areDifferent(typeof this.toJSON === 'function' ? this.toJSON(opts) : this, this._get('previous'), opts)\n  },\n\n  /**\n   * Return whether the record is unsaved. Records that have primary keys are\n   * considered \"saved\". Records without primary keys are considered \"unsaved\".\n   *\n   * @example <caption>Record#isNew</caption>\n   * const JSData = require('js-data');\n   * const { Container } = JSData;\n   * console.log('Using JSData v' + JSData.version.full);\n   * const store = new Container();\n   * store.defineMapper('user');\n   * const user = store.createRecord('user', {\n   *   id: 1234\n   * });\n   * const user2 = store.createRecord('user');\n   * console.log('user isNew: ' + user.isNew()); // false\n   * console.log('user2 isNew: ' + user2.isNew()); // true\n   *\n   * @method Record#isNew\n   * @returns {boolean} Whether the record is unsaved.\n   * @since 3.0.0\n   */\n  isNew (opts) {\n    return utils.get(this, this._mapper().idAttribute) === undefined\n  },\n\n  /**\n   * Return whether the record in its current state passes validation.\n   *\n   * @example <caption>Record#isValid</caption>\n   * const JSData = require('js-data');\n   * const { Container } = JSData;\n   * console.log('Using JSData v' + JSData.version.full);\n   * const store = new Container();\n   * store.defineMapper('user', {\n   *   schema: {\n   *     properties: {\n   *       name: { type: 'string' }\n   *     }\n   *   }\n   * });\n   * const user = store.createRecord('user', {\n   *   name: 1234\n   * }, {\n   *   noValidate: true // this allows us to put the record into an invalid state\n   * });\n   * console.log('user isValid: ' + user.isValid());\n   * user.name = 'John';\n   * console.log('user isValid: ' + user.isValid());\n   *\n   * @method Record#isValid\n   * @param {object} [opts] Configuration options. Passed to {@link Mapper#validate}.\n   * @returns {boolean} Whether the record in its current state passes\n   * validation.\n   * @since 3.0.0\n   */\n  isValid (opts) {\n    return !this._mapper().validate(this, opts)\n  },\n\n  removeInverseRelation (currentParent, id, inverseDef, idAttribute) {\n    if (inverseDef.type === hasOneType) {\n      safeSetLink(currentParent, inverseDef.localField, undefined)\n    } else if (inverseDef.type === hasManyType) {\n      // e.g. remove comment from otherPost.comments\n      const children = utils.get(currentParent, inverseDef.localField)\n      if (id === undefined) {\n        utils.remove(children, (child) => child === this)\n      } else {\n        utils.remove(children, (child) => child === this || id === utils.get(child, idAttribute))\n      }\n    }\n  },\n\n  setupInverseRelation (record, id, inverseDef, idAttribute) {\n    // Update (set) inverse relation\n    if (inverseDef.type === hasOneType) {\n      // e.g. someUser.profile = profile\n      safeSetLink(record, inverseDef.localField, this)\n    } else if (inverseDef.type === hasManyType) {\n      // e.g. add comment to somePost.comments\n      const children = utils.get(record, inverseDef.localField)\n      if (id === undefined) {\n        utils.noDupeAdd(children, this, (child) => child === this)\n      } else {\n        utils.noDupeAdd(children, this, (child) => child === this || id === utils.get(child, idAttribute))\n      }\n    }\n  },\n\n  /**\n   * Lazy load relations of this record, to be attached to the record once their\n   * loaded.\n   *\n   * @example\n   * import { Container } from 'js-data';\n   * import { RethinkDBAdapter } from 'js-data-rethinkdb';\n   *\n   * const store = new Container();\n   * store.registerAdapter('rethink', new RethinkDBAdapter(), { default: true });\n   * store.defineMapper('user', {\n   *   relations: {\n   *     hasMany: {\n   *       post: {\n   *         localField: 'posts',\n   *         foreignKey: 'user_id'\n   *       }\n   *     }\n   *   }\n   * });\n   * store.defineMapper('post', {\n   *   relations: {\n   *     belongsTo: {\n   *       user: {\n   *         localField: 'user',\n   *         foreignKey: 'user_id'\n   *       }\n   *     }\n   *   }\n   * });\n   * store.find('user', 1234).then((user) => {\n   *   console.log(user.id); // 1234\n   *\n   *   // Load the user's post relations\n   *   return user.loadRelations(['post']);\n   * }).then((user) => {\n   *   console.log(user.posts); // [{...}, {...}, ...]\n   * });\n   *\n   * @method Record#loadRelations\n   * @param {string[]} [relations] List of relations to load. Can use localField\n   * names or Mapper names to pick relations.\n   * @param {object} [opts] Configuration options.\n   * @returns {Promise} Resolves with the record, with the loaded relations now\n   * attached.\n   * @since 3.0.0\n   */\n  loadRelations (relations, opts) {\n    let op\n    const mapper = this._mapper()\n\n    // Default values for arguments\n    relations || (relations = [])\n    if (utils.isString(relations)) {\n      relations = [relations]\n    }\n    opts || (opts = {})\n    opts.with = relations\n\n    // Fill in \"opts\" with the Model's configuration\n    utils._(opts, mapper)\n    opts.adapter = mapper.getAdapterName(opts)\n\n    // beforeLoadRelations lifecycle hook\n    op = opts.op = 'beforeLoadRelations'\n    return utils.resolve(this[op](relations, opts)).then(() => {\n      // Now delegate to the adapter\n      op = opts.op = 'loadRelations'\n      mapper.dbg(op, this, relations, opts)\n      let tasks = []\n      let task\n      utils.forEachRelation(mapper, opts, (def, optsCopy) => {\n        const relatedMapper = def.getRelation()\n        optsCopy.raw = false\n        if (utils.isFunction(def.load)) {\n          task = def.load(mapper, def, this, opts)\n        } else if (def.type === 'hasMany' || def.type === 'hasOne') {\n          if (def.foreignKey) {\n            task = superMethod(relatedMapper, 'findAll')({\n              [def.foreignKey]: utils.get(this, mapper.idAttribute)\n            }, optsCopy).then(function (relatedData) {\n              if (def.type === 'hasOne') {\n                return relatedData.length ? relatedData[0] : undefined\n              }\n              return relatedData\n            })\n          } else if (def.localKeys) {\n            task = superMethod(relatedMapper, 'findAll')({\n              where: {\n                [relatedMapper.idAttribute]: {\n                  'in': utils.get(this, def.localKeys)\n                }\n              }\n            })\n          } else if (def.foreignKeys) {\n            task = superMethod(relatedMapper, 'findAll')({\n              where: {\n                [def.foreignKeys]: {\n                  'contains': utils.get(this, mapper.idAttribute)\n                }\n              }\n            }, opts)\n          }\n        } else if (def.type === 'belongsTo') {\n          const key = utils.get(this, def.foreignKey)\n          if (utils.isSorN(key)) {\n            task = superMethod(relatedMapper, 'find')(key, optsCopy)\n          }\n        }\n        if (task) {\n          task = task.then((relatedData) => {\n            def.setLocalField(this, relatedData)\n          })\n          tasks.push(task)\n        }\n      })\n      return Promise.all(tasks)\n    }).then(() => {\n      // afterLoadRelations lifecycle hook\n      op = opts.op = 'afterLoadRelations'\n      return utils.resolve(this[op](relations, opts)).then(() => this)\n    })\n  },\n\n  /**\n   * Return the properties with which this record was instantiated.\n   *\n   * @example <caption>Record#previous</caption>\n   * const JSData = require('js-data');\n   * const { Container } = JSData;\n   * console.log('Using JSData v' + JSData.version.full);\n   * const store = new Container();\n   * store.defineMapper('user');\n   * const user = store.createRecord('user', {\n   *   name: 'William'\n   * });\n   * console.log('user previous: ' + JSON.stringify(user.previous()));\n   * user.name = 'Bob';\n   * console.log('user previous: ' + JSON.stringify(user.previous()));\n   * user.commit();\n   * console.log('user previous: ' + JSON.stringify(user.previous()));\n   *\n   * @method Record#previous\n   * @param {string} [key] If specified, return just the initial value of the\n   * given key.\n   * @returns {Object} The initial properties of this record.\n   * @since 3.0.0\n   */\n  previous (key) {\n    if (key) {\n      return this._get(`previous.${key}`)\n    }\n    return this._get('previous')\n  },\n\n  /**\n   * Revert changes to this record back to the properties it had when it was\n   * instantiated.\n   *\n   * @example <caption>Record#revert</caption>\n   * const JSData = require('js-data');\n   * const { Container } = JSData;\n   * console.log('Using JSData v' + JSData.version.full);\n   * const store = new Container();\n   * store.defineMapper('user');\n   * const user = store.createRecord('user', {\n   *   name: 'William'\n   * });\n   * console.log('user: ' + JSON.stringify(user));\n   * user.name = 'Bob';\n   * console.log('user: ' + JSON.stringify(user));\n   * user.revert();\n   * console.log('user: ' + JSON.stringify(user));\n   *\n   * @method Record#revert\n   * @param {object} [opts] Configuration options.\n   * @param {string[]} [opts.preserve] Array of strings or Regular Expressions\n   * denoting properties that should not be reverted.\n   * @since 3.0.0\n   */\n  revert (opts) {\n    const previous = this._get('previous')\n    opts || (opts = {})\n    opts.preserve || (opts.preserve = [])\n    utils.forOwn(this, (value, key) => {\n      if (key !== this._mapper().idAttribute && !previous.hasOwnProperty(key) && this.hasOwnProperty(key) && opts.preserve.indexOf(key) === -1) {\n        delete this[key]\n      }\n    })\n    utils.forOwn(previous, (value, key) => {\n      if (opts.preserve.indexOf(key) === -1) {\n        this[key] = value\n      }\n    })\n    this.commit()\n  },\n\n  /**\n   * Delegates to {@link Mapper#create} or {@link Mapper#update}.\n   *\n   * @example\n   * import { Container } from 'js-data';\n   * import { RethinkDBAdapter } from 'js-data-rethinkdb';\n   *\n   * const store = new Container();\n   * store.registerAdapter('rethink', new RethinkDBAdapter(), { default: true });\n   * store.defineMapper('session');\n   * const session = store.createRecord('session', { topic: 'Node.js' });\n   *\n   * // Create a new record in the database\n   * session.save().then(() => {\n   *   console.log(session.id); // 1234\n   *\n   *   session.skill_level = 'beginner';\n   *\n   *   // Update the record in the database\n   *   return session.save();\n   * });\n   *\n   * @method Record#save\n   * @param {object} [opts] Configuration options. See {@link Mapper#create} and\n   * {@link Mapper#update}.\n   * @param {boolean} [opts.changesOnly] Equality function. Default uses `===`.\n   * @param {Function} [opts.equalsFn] Passed to {@link Record#changes} when\n   * `opts.changesOnly` is `true`.\n   * @param {array} [opts.ignore] Passed to {@link Record#changes} when\n   * `opts.changesOnly` is `true`.\n   * @returns {Promise} The result of calling {@link Mapper#create} or\n   * {@link Mapper#update}.\n   * @since 3.0.0\n   */\n  save (opts) {\n    opts || (opts = {})\n    const mapper = this._mapper()\n    const id = utils.get(this, mapper.idAttribute)\n    let props = this\n\n    const postProcess = (result) => {\n      const record = opts.raw ? result.data : result\n      if (record) {\n        utils.deepMixIn(this, record)\n        this.commit()\n      }\n      return result\n    }\n\n    if (id === undefined) {\n      return superMethod(mapper, 'create')(props, opts).then(postProcess)\n    }\n    if (opts.changesOnly) {\n      const changes = this.changes(opts)\n      props = {}\n      utils.fillIn(props, changes.added)\n      utils.fillIn(props, changes.changed)\n    }\n    return superMethod(mapper, 'update')(id, props, opts).then(postProcess)\n  },\n\n  /**\n   * Set the value for a given key, or the values for the given keys if \"key\" is\n   * an object. Triggers change events on those properties that have `track: true`\n   * in {@link Mapper#schema}.\n   *\n   * @example <caption>Record#set</caption>\n   * const JSData = require('js-data');\n   * const { Container } = JSData;\n   * console.log('Using JSData v' + JSData.version.full);\n   * const store = new Container();\n   * store.defineMapper('user');\n   *\n   * const user = store.createRecord('user');\n   * console.log('user: ' + JSON.stringify(user));\n   *\n   * user.set('name', 'Bob');\n   * console.log('user: ' + JSON.stringify(user));\n   *\n   * user.set({ age: 30, role: 'admin' });\n   * console.log('user: ' + JSON.stringify(user));\n   *\n   * @fires Record#change\n   * @method Record#set\n   * @param {(string|Object)} key Key to set or hash of key-value pairs to set.\n   * @param {*} [value] Value to set for the given key.\n   * @param {object} [opts] Configuration options.\n   * @param {boolean} [opts.silent=false] Whether to trigger change events.\n   * @since 3.0.0\n   */\n  'set' (key, value, opts) {\n    if (utils.isObject(key)) {\n      opts = value\n    }\n    opts || (opts = {})\n    if (opts.silent) {\n      this._set('silent', true)\n    }\n    utils.set(this, key, value)\n    if (!this._get('eventId')) {\n      this._set('silent') // unset\n    }\n  },\n\n  /**\n   * Return a plain object representation of this record. If the class from\n   * which this record was created has a Mapper, then {@link Mapper#toJSON} will\n   * be called with this record instead.\n   *\n   * @example <caption>Record#toJSON</caption>\n   * const JSData = require('js-data');\n   * const { Container } = JSData;\n   * console.log('Using JSData v' + JSData.version.full);\n   * const store = new Container();\n   * store.defineMapper('user', {\n   *   schema: {\n   *     properties: {\n   *       name: { type: 'string' }\n   *     }\n   *   }\n   * });\n   *\n   * const user = store.createRecord('user', {\n   *   name: 'John',\n   *   $$hashKey: '1234'\n   * });\n   * console.log('user: ' + JSON.stringify(user.toJSON()));\n   *\n   * @method Record#toJSON\n   * @param {object} [opts] Configuration options.\n   * @param {string[]} [opts.with] Array of relation names or relation fields\n   * to include in the representation. Only available as an option if the class\n   * from which this record was created has a Mapper and this record resides in\n   * an instance of {@link DataStore}.\n   * @returns {Object} Plain object representation of this record.\n   * @since 3.0.0\n   */\n  toJSON (opts) {\n    const mapper = this.constructor.mapper\n    if (mapper) {\n      return mapper.toJSON(this, opts)\n    } else {\n      const json = {}\n      utils.forOwn(this, (prop, key) => {\n        json[key] = utils.plainCopy(prop)\n      })\n      return json\n    }\n  },\n\n  /**\n   * Unset the value for a given key. Triggers change events on those properties\n   * that have `track: true` in {@link Mapper#schema}.\n   *\n   * @example <caption>Record#unset</caption>\n   * const JSData = require('js-data');\n   * const { Container } = JSData;\n   * console.log('Using JSData v' + JSData.version.full);\n   * const store = new Container();\n   * store.defineMapper('user');\n   *\n   * const user = store.createRecord('user', {\n   *   name: 'John'\n   * });\n   * console.log('user: ' + JSON.stringify(user));\n   *\n   * user.unset('name');\n   * console.log('user: ' + JSON.stringify(user));\n   *\n   * @method Record#unset\n   * @param {string} key Key to unset.\n   * @param {object} [opts] Configuration options.\n   * @param {boolean} [opts.silent=false] Whether to trigger change events.\n   * @since 3.0.0\n   */\n  unset (key, opts) {\n    this.set(key, undefined, opts)\n  },\n\n  /**\n   * Validate this record based on its current properties.\n   *\n   * @example <caption>Record#validate</caption>\n   * const JSData = require('js-data');\n   * const { Container } = JSData;\n   * console.log('Using JSData v' + JSData.version.full);\n   * const store = new Container();\n   * store.defineMapper('user', {\n   *   schema: {\n   *     properties: {\n   *       name: { type: 'string' }\n   *     }\n   *   }\n   * });\n   * const user = store.createRecord('user', {\n   *   name: 1234\n   * }, {\n   *   noValidate: true // this allows us to put the record into an invalid state\n   * });\n   * console.log('user validation: ' + JSON.stringify(user.validate()));\n   * user.name = 'John';\n   * console.log('user validation: ' + user.validate());\n   *\n   * @method Record#validate\n   * @param {object} [opts] Configuration options. Passed to {@link Mapper#validate}.\n   * @returns {*} Array of errors or `undefined` if no errors.\n   * @since 3.0.0\n   */\n  validate (opts) {\n    return this._mapper().validate(this, opts)\n  }\n}, {\n  creatingPath,\n  noValidatePath,\n  keepChangeHistoryPath,\n  previousPath\n})\n\n/**\n * Allow records to emit events.\n *\n * An record's registered listeners are stored in the record's private data.\n */\nutils.eventify(\n  Record.prototype,\n  function () {\n    return this._get('events')\n  },\n  function (value) {\n    this._set('events', value)\n  }\n)\n\n/**\n * Fired when a record changes. Only works for records that have tracked fields.\n * See {@link Record~changeListener} on how to listen for this event.\n *\n * @event Record#change\n * @see Record~changeListener\n */\n\n/**\n * Callback signature for the {@link Record#event:change} event.\n *\n * @example\n * function onChange (record, changes) {\n *   // do something\n * }\n * record.on('change', onChange);\n *\n * @callback Record~changeListener\n * @param {Record} The Record that changed.\n * @param {object} The changes.\n * @see Record#event:change\n * @since 3.0.0\n */\n\n/**\n * Create a subclass of this Record:\n * @example <caption>Record.extend</caption>\n * const JSData = require('js-data');\n * const { Record } = JSData;\n * console.log('Using JSData v' + JSData.version.full);\n *\n * // Extend the class using ES2015 class syntax.\n * class CustomRecordClass extends Record {\n *   foo () { return 'bar'; }\n *   static beep () { return 'boop'; }\n * }\n * const customRecord = new CustomRecordClass();\n * console.log(customRecord.foo());\n * console.log(CustomRecordClass.beep());\n *\n * // Extend the class using alternate method.\n * const OtherRecordClass = Record.extend({\n *   foo () { return 'bar'; }\n * }, {\n *   beep () { return 'boop'; }\n * });\n * const otherRecord = new OtherRecordClass();\n * console.log(otherRecord.foo());\n * console.log(OtherRecordClass.beep());\n *\n * // Extend the class, providing a custom constructor.\n * function AnotherRecordClass () {\n *   Record.call(this);\n *   this.created_at = new Date().getTime();\n * }\n * Record.extend({\n *   constructor: AnotherRecordClass,\n *   foo () { return 'bar'; }\n * }, {\n *   beep () { return 'boop'; }\n * });\n * const anotherRecord = new AnotherRecordClass();\n * console.log(anotherRecord.created_at);\n * console.log(anotherRecord.foo());\n * console.log(AnotherRecordClass.beep());\n *\n * @method Record.extend\n * @param {object} [props={}] Properties to add to the prototype of the\n * subclass.\n * @param {object} [props.constructor] Provide a custom constructor function\n * to be used as the subclass itself.\n * @param {object} [classProps={}] Static properties to add to the subclass.\n * @returns {Constructor} Subclass of this Record class.\n * @since 3.0.0\n */\n","export function sort (a, b, hashCode) {\n  // Short-circuit comparison if a and b are strictly equal\n  // This is absolutely necessary for indexed objects that\n  // don't have the idAttribute field\n  if (a === b) {\n    return 0\n  }\n  if (hashCode) {\n    a = hashCode(a)\n    b = hashCode(b)\n  }\n  if ((a === null && b === null) || (a === undefined && b === undefined)) {\n    return -1\n  }\n\n  if (a === null || a === undefined) {\n    return -1\n  }\n\n  if (b === null || b === undefined) {\n    return 1\n  }\n\n  if (a < b) {\n    return -1\n  }\n\n  if (a > b) {\n    return 1\n  }\n\n  return 0\n}\n\nexport function insertAt (array, index, value) {\n  array.splice(index, 0, value)\n  return array\n}\n\nexport function removeAt (array, index) {\n  array.splice(index, 1)\n  return array\n}\n\nexport function binarySearch (array, value, field) {\n  let lo = 0\n  let hi = array.length\n  let compared\n  let mid\n\n  while (lo < hi) {\n    mid = ((lo + hi) / 2) | 0\n    compared = sort(value, array[mid], field)\n    if (compared === 0) {\n      return {\n        found: true,\n        index: mid\n      }\n    } else if (compared < 0) {\n      hi = mid\n    } else {\n      lo = mid + 1\n    }\n  }\n\n  return {\n    found: false,\n    index: hi\n  }\n}\n","// Copyright (c) 2015, InternalFX.\n\n// Permission to use, copy, modify, and/or distribute this software for any purpose with or\n// without fee is hereby granted, provided that the above copyright notice and this permission\n// notice appear in all copies.\n\n// THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH REGARD TO\n// THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT\n// SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR\n// ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION\n// OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE\n// USE OR PERFORMANCE OF THIS SOFTWARE.\n\n// Modifications\n// Copyright 2015-2016 Jason Dobry\n//\n// Summary of modifications:\n// Reworked dependencies so as to re-use code already in js-data\n// Removed unused code\nimport utils from '../../src/utils'\nimport {binarySearch, insertAt, removeAt} from './_utils'\n\nexport default function Index (fieldList, opts) {\n  utils.classCallCheck(this, Index)\n  fieldList || (fieldList = [])\n\n  if (!utils.isArray(fieldList)) {\n    throw new Error('fieldList must be an array.')\n  }\n\n  opts || (opts = {})\n  this.fieldList = fieldList\n  this.fieldGetter = opts.fieldGetter\n  this.hashCode = opts.hashCode\n  this.isIndex = true\n  this.keys = []\n  this.values = []\n}\n\nutils.addHiddenPropsToTarget(Index.prototype, {\n  'set' (keyList, value) {\n    if (!utils.isArray(keyList)) {\n      keyList = [keyList]\n    }\n\n    let key = keyList.shift() || undefined\n    let pos = binarySearch(this.keys, key)\n\n    if (keyList.length === 0) {\n      if (pos.found) {\n        let dataLocation = binarySearch(this.values[pos.index], value, this.hashCode)\n        if (!dataLocation.found) {\n          insertAt(this.values[pos.index], dataLocation.index, value)\n        }\n      } else {\n        insertAt(this.keys, pos.index, key)\n        insertAt(this.values, pos.index, [value])\n      }\n    } else {\n      if (pos.found) {\n        this.values[pos.index].set(keyList, value)\n      } else {\n        insertAt(this.keys, pos.index, key)\n        let newIndex = new Index([], { hashCode: this.hashCode })\n        newIndex.set(keyList, value)\n        insertAt(this.values, pos.index, newIndex)\n      }\n    }\n  },\n\n  'get' (keyList) {\n    if (!utils.isArray(keyList)) {\n      keyList = [keyList]\n    }\n\n    let key = keyList.shift() || undefined\n    let pos = binarySearch(this.keys, key)\n\n    if (keyList.length === 0) {\n      if (pos.found) {\n        if (this.values[pos.index].isIndex) {\n          return this.values[pos.index].getAll()\n        } else {\n          return this.values[pos.index].slice()\n        }\n      } else {\n        return []\n      }\n    } else {\n      if (pos.found) {\n        return this.values[pos.index].get(keyList)\n      } else {\n        return []\n      }\n    }\n  },\n\n  getAll (opts) {\n    opts || (opts = {})\n    let results = []\n    const values = this.values\n    if (opts.order === 'desc') {\n      for (let i = values.length - 1; i >= 0; i--) {\n        const value = values[i]\n        if (value.isIndex) {\n          results = results.concat(value.getAll(opts))\n        } else {\n          results = results.concat(value)\n        }\n      }\n    } else {\n      for (let i = 0; i < values.length; i++) {\n        const value = values[i]\n        if (value.isIndex) {\n          results = results.concat(value.getAll(opts))\n        } else {\n          results = results.concat(value)\n        }\n      }\n    }\n    return results\n  },\n\n  visitAll (cb, thisArg) {\n    this.values.forEach(function (value) {\n      if (value.isIndex) {\n        value.visitAll(cb, thisArg)\n      } else {\n        value.forEach(cb, thisArg)\n      }\n    })\n  },\n\n  between (leftKeys, rightKeys, opts) {\n    opts || (opts = {})\n    if (!utils.isArray(leftKeys)) {\n      leftKeys = [leftKeys]\n    }\n    if (!utils.isArray(rightKeys)) {\n      rightKeys = [rightKeys]\n    }\n    utils.fillIn(opts, {\n      leftInclusive: true,\n      rightInclusive: false,\n      limit: undefined,\n      offset: 0\n    })\n\n    let results = this._between(leftKeys, rightKeys, opts)\n\n    if (opts.limit) {\n      return results.slice(opts.offset, opts.limit + opts.offset)\n    } else {\n      return results.slice(opts.offset)\n    }\n  },\n\n  _between (leftKeys, rightKeys, opts) {\n    let results = []\n\n    let leftKey = leftKeys.shift()\n    let rightKey = rightKeys.shift()\n\n    let pos\n\n    if (leftKey !== undefined) {\n      pos = binarySearch(this.keys, leftKey)\n    } else {\n      pos = {\n        found: false,\n        index: 0\n      }\n    }\n\n    if (leftKeys.length === 0) {\n      if (pos.found && opts.leftInclusive === false) {\n        pos.index += 1\n      }\n\n      for (let i = pos.index; i < this.keys.length; i += 1) {\n        if (rightKey !== undefined) {\n          if (opts.rightInclusive) {\n            if (this.keys[i] > rightKey) { break }\n          } else {\n            if (this.keys[i] >= rightKey) { break }\n          }\n        }\n\n        if (this.values[i].isIndex) {\n          results = results.concat(this.values[i].getAll())\n        } else {\n          results = results.concat(this.values[i])\n        }\n\n        if (opts.limit) {\n          if (results.length >= (opts.limit + opts.offset)) {\n            break\n          }\n        }\n      }\n    } else {\n      for (let i = pos.index; i < this.keys.length; i += 1) {\n        let currKey = this.keys[i]\n        if (currKey > rightKey) { break }\n\n        if (this.values[i].isIndex) {\n          if (currKey === leftKey) {\n            results = results.concat(this.values[i]._between(utils.copy(leftKeys), rightKeys.map(function () { return undefined }), opts))\n          } else if (currKey === rightKey) {\n            results = results.concat(this.values[i]._between(leftKeys.map(function () { return undefined }), utils.copy(rightKeys), opts))\n          } else {\n            results = results.concat(this.values[i].getAll())\n          }\n        } else {\n          results = results.concat(this.values[i])\n        }\n\n        if (opts.limit) {\n          if (results.length >= (opts.limit + opts.offset)) {\n            break\n          }\n        }\n      }\n    }\n\n    if (opts.limit) {\n      return results.slice(0, opts.limit + opts.offset)\n    } else {\n      return results\n    }\n  },\n\n  peek () {\n    if (this.values.length) {\n      if (this.values[0].isIndex) {\n        return this.values[0].peek()\n      } else {\n        return this.values[0]\n      }\n    }\n    return []\n  },\n\n  clear () {\n    this.keys = []\n    this.values = []\n  },\n\n  insertRecord (data) {\n    let keyList = this.fieldList.map(function (field) {\n      if (utils.isFunction(field)) {\n        return field(data) || undefined\n      } else {\n        return data[field] || undefined\n      }\n    })\n    this.set(keyList, data)\n  },\n\n  removeRecord (data) {\n    let removed\n    const isUnique = this.hashCode(data) !== undefined\n    this.values.forEach((value, i) => {\n      if (value.isIndex) {\n        if (value.removeRecord(data)) {\n          if (value.keys.length === 0) {\n            removeAt(this.keys, i)\n            removeAt(this.values, i)\n          }\n          removed = true\n          return false\n        }\n      } else {\n        let dataLocation = {}\n        if (this.keys[i] === undefined || !isUnique) {\n          for (let j = value.length - 1; j >= 0; j--) {\n            if (value[j] === data) {\n              dataLocation = {\n                found: true,\n                index: j\n              }\n              break\n            }\n          }\n        } else if (isUnique) {\n          dataLocation = binarySearch(value, data, this.hashCode)\n        }\n        if (dataLocation.found) {\n          removeAt(value, dataLocation.index)\n          if (value.length === 0) {\n            removeAt(this.keys, i)\n            removeAt(this.values, i)\n          }\n          removed = true\n          return false\n        }\n      }\n    })\n    return removed ? data : undefined\n  },\n\n  updateRecord (data) {\n    const removed = this.removeRecord(data)\n    if (removed !== undefined) {\n      this.insertRecord(data)\n    }\n  }\n})\n","import utils from './utils'\nimport Component from './Component'\nimport Query from './Query'\nimport Record from './Record'\nimport Index from '../lib/mindex/index'\n\nconst { noValidatePath } = Record\n\nconst DOMAIN = 'Collection'\n\nconst COLLECTION_DEFAULTS = {\n  /**\n   * Whether to call {@link Record#commit} on records that are added to the\n   * collection and already exist in the collection.\n   *\n   * @name Collection#commitOnMerge\n   * @type {boolean}\n   * @default true\n   */\n  commitOnMerge: true,\n\n  /**\n   * Whether record events should bubble up and be emitted by the collection.\n   *\n   * @name Collection#emitRecordEvents\n   * @type {boolean}\n   * @default true\n   */\n  emitRecordEvents: true,\n\n  /**\n   * Field to be used as the unique identifier for records in this collection.\n   * Defaults to `\"id\"` unless {@link Collection#mapper} is set, in which case\n   * this will default to {@link Mapper#idAttribute}.\n   *\n   * @name Collection#idAttribute\n   * @type {string}\n   * @default \"id\"\n   */\n  idAttribute: 'id',\n\n  /**\n   * What to do when inserting a record into this Collection that shares a\n   * primary key with a record already in this Collection.\n   *\n   * Possible values:\n   * merge\n   * replace\n   * skip\n   *\n   * Merge:\n   *\n   * Recursively shallow copy properties from the new record onto the existing\n   * record.\n   *\n   * Replace:\n   *\n   * Shallow copy top-level properties from the new record onto the existing\n   * record. Any top-level own properties of the existing record that are _not_\n   * on the new record will be removed.\n   *\n   * Skip:\n   *\n   * Ignore new record, keep existing record.\n   *\n   * @name Collection#onConflict\n   * @type {string}\n   * @default \"merge\"\n   */\n  onConflict: 'merge'\n}\n\n/**\n * An ordered set of {@link Record} instances.\n *\n * @example <caption>Collection#constructor</caption>\n * // import { Collection, Record } from 'js-data';\n * const JSData = require('js-data');\n * const {Collection, Record} = JSData;\n * console.log('Using JSData v' + JSData.version.full);\n *\n * const user1 = new Record({ id: 1 });\n * const user2 = new Record({ id: 2 });\n * const UserCollection = new Collection([user1, user2]);\n * console.log(UserCollection.get(1) === user1);\n *\n * @class Collection\n * @extends Component\n * @param {array} [records] Initial set of records to insert into the\n * collection.\n * @param {object} [opts] Configuration options.\n * @param {string} [opts.commitOnMerge] See {@link Collection#commitOnMerge}.\n * @param {string} [opts.idAttribute] See {@link Collection#idAttribute}.\n * @param {string} [opts.onConflict=\"merge\"] See {@link Collection#onConflict}.\n * @param {string} [opts.mapper] See {@link Collection#mapper}.\n * @since 3.0.0\n */\nfunction Collection (records, opts) {\n  utils.classCallCheck(this, Collection)\n  Component.call(this, opts)\n\n  if (records && !utils.isArray(records)) {\n    opts = records\n    records = []\n  }\n  if (utils.isString(opts)) {\n    opts = { idAttribute: opts }\n  }\n\n  // Default values for arguments\n  records || (records = [])\n  opts || (opts = {})\n\n  Object.defineProperties(this, {\n    /**\n     * Default Mapper for this collection. Optional. If a Mapper is provided, then\n     * the collection will use the {@link Mapper#idAttribute} setting, and will\n     * wrap records in {@link Mapper#recordClass}.\n     *\n     * @example <caption>Collection#mapper</caption>\n     * const JSData = require('js-data');\n     * const {Collection, Mapper} = JSData;\n     * console.log('Using JSData v' + JSData.version.full);\n     *\n     * class MyMapperClass extends Mapper {\n     *   foo () { return 'bar'; }\n     * }\n     * const myMapper = new MyMapperClass({ name: 'myMapper' });\n     * const collection = new Collection(null, { mapper: myMapper });\n     *\n     * @name Collection#mapper\n     * @type {Mapper}\n     * @default null\n     * @since 3.0.0\n     */\n    mapper: {\n      value: undefined,\n      writable: true\n    },\n    // Query class used by this collection\n    queryClass: {\n      value: undefined,\n      writable: true\n    }\n  })\n\n  // Apply user-provided configuration\n  utils.fillIn(this, opts)\n  // Fill in any missing options with the defaults\n  utils.fillIn(this, utils.copy(COLLECTION_DEFAULTS))\n\n  if (!this.queryClass) {\n    this.queryClass = Query\n  }\n\n  const idAttribute = this.recordId()\n\n  Object.defineProperties(this, {\n    /**\n     * The main index, which uses @{link Collection#recordId} as the key.\n     *\n     * @name Collection#index\n     * @type {Index}\n     */\n    index: {\n      value: new Index([idAttribute], {\n        hashCode (obj) {\n          return utils.get(obj, idAttribute)\n        }\n      })\n    },\n\n    /**\n     * Object that holds the secondary indexes of this collection.\n     *\n     * @name Collection#indexes\n     * @type {Object.<string, Index>}\n     */\n    indexes: {\n      value: {}\n    }\n  })\n\n  // Insert initial data into the collection\n  if (utils.isObject(records) || (utils.isArray(records) && records.length)) {\n    this.add(records)\n  }\n}\n\nexport default Component.extend({\n  constructor: Collection,\n\n  /**\n   * Used to bind to events emitted by records in this Collection.\n   *\n   * @method Collection#_onRecordEvent\n   * @since 3.0.0\n   * @private\n   * @param {...*} [arg] Args passed to {@link Collection#emit}.\n   */\n  _onRecordEvent (...args) {\n    if (this.emitRecordEvents) {\n      this.emit(...args)\n    }\n  },\n\n  /**\n   * Insert the provided record or records.\n   *\n   * If a record is already in the collection then the provided record will\n   * either merge with or replace the existing record based on the value of the\n   * `onConflict` option.\n   *\n   * The collection's secondary indexes will be updated as each record is\n   * visited.\n   *\n   * @method Collection#add\n   * @since 3.0.0\n   * @param {(Object|Object[]|Record|Record[])} data The record or records to insert.\n   * @param {object} [opts] Configuration options.\n   * @param {boolean} [opts.commitOnMerge=true] See {@link Collection#commitOnMerge}.\n   * @param {boolean} [opts.noValidate] See {@link Record#noValidate}.\n   * @param {string} [opts.onConflict] See {@link Collection#onConflict}.\n   * @returns {(Object|Object[]|Record|Record[])} The added record or records.\n   */\n  add (records, opts) {\n    // Default values for arguments\n    opts || (opts = {})\n\n    // Fill in \"opts\" with the Collection's configuration\n    utils._(opts, this)\n    records = this.beforeAdd(records, opts) || records\n\n    // Track whether just one record or an array of records is being inserted\n    let singular = false\n    const idAttribute = this.recordId()\n    if (!utils.isArray(records)) {\n      if (utils.isObject(records)) {\n        records = [records]\n        singular = true\n      } else {\n        throw utils.err(`${DOMAIN}#add`, 'records')(400, 'object or array', records)\n      }\n    }\n\n    // Map the provided records to existing records.\n    // New records will be inserted. If any records map to existing records,\n    // they will be merged into the existing records according to the onConflict\n    // option.\n    records = records.map((record) => {\n      let id = this.recordId(record)\n      // Grab existing record if there is one\n      const existing = id === undefined ? id : this.get(id)\n      // If the currently visited record is just a reference to an existing\n      // record, then there is nothing to be done. Exit early.\n      if (record === existing) {\n        return existing\n      }\n\n      if (existing) {\n        // Here, the currently visited record corresponds to a record already\n        // in the collection, so we need to merge them\n        const onConflict = opts.onConflict || this.onConflict\n        if (onConflict !== 'merge' && onConflict !== 'replace' && onConflict !== 'skip') {\n          throw utils.err(`${DOMAIN}#add`, 'opts.onConflict')(400, 'one of (merge, replace, skip)', onConflict, true)\n        }\n        const existingNoValidate = existing._get(noValidatePath)\n        if (opts.noValidate) {\n          // Disable validation\n          existing._set(noValidatePath, true)\n        }\n        if (onConflict === 'merge') {\n          utils.deepMixIn(existing, record)\n        } else if (onConflict === 'replace') {\n          utils.forOwn(existing, (value, key) => {\n            if (key !== idAttribute && record[key] === undefined) {\n              existing[key] = undefined\n            }\n          })\n          existing.set(record)\n        } // else if(onConflict === 'skip'){ do nothing }\n\n        if (opts.noValidate) {\n          // Restore previous `noValidate` value\n          existing._set(noValidatePath, existingNoValidate)\n        }\n        record = existing\n        if (opts.commitOnMerge && utils.isFunction(record.commit)) {\n          record.commit()\n        }\n        // Update all indexes in the collection\n        this.updateIndexes(record)\n      } else {\n        // Here, the currently visted record does not correspond to any record\n        // in the collection, so (optionally) instantiate this record and insert\n        // it into the collection\n        record = this.mapper ? this.mapper.createRecord(record, opts) : record\n        this.index.insertRecord(record)\n        utils.forOwn(this.indexes, function (index, name) {\n          index.insertRecord(record)\n        })\n        if (record && utils.isFunction(record.on)) {\n          record.on('all', this._onRecordEvent, this)\n        }\n      }\n      return record\n    })\n    // Finally, return the inserted data\n    const result = singular ? records[0] : records\n    if (!opts.silent) {\n      this.emit('add', result)\n    }\n    return this.afterAdd(records, opts, result) || result\n  },\n\n  /**\n   * Lifecycle hook called by {@link Collection#add}. If this method returns a\n   * value then {@link Collection#add} will return that same value.\n   *\n   * @method Collection#method\n   * @since 3.0.0\n   * @param {(Object|Object[]|Record|Record[])} result The record or records\n   * that were added to this Collection by {@link Collection#add}.\n   * @param {object} opts The `opts` argument passed to {@link Collection#add}.\n   */\n  afterAdd () {},\n\n  /**\n   * Lifecycle hook called by {@link Collection#remove}. If this method returns\n   * a value then {@link Collection#remove} will return that same value.\n   *\n   * @method Collection#afterRemove\n   * @since 3.0.0\n   * @param {(string|number)} id The `id` argument passed to {@link Collection#remove}.\n   * @param {object} opts The `opts` argument passed to {@link Collection#remove}.\n   * @param {object} record The result that will be returned by {@link Collection#remove}.\n   */\n  afterRemove () {},\n\n  /**\n   * Lifecycle hook called by {@link Collection#removeAll}. If this method\n   * returns a value then {@link Collection#removeAll} will return that same\n   * value.\n   *\n   * @method Collection#afterRemoveAll\n   * @since 3.0.0\n   * @param {object} query The `query` argument passed to {@link Collection#removeAll}.\n   * @param {object} opts The `opts` argument passed to {@link Collection#removeAll}.\n   * @param {object} records The result that will be returned by {@link Collection#removeAll}.\n   */\n  afterRemoveAll () {},\n\n  /**\n   * Lifecycle hook called by {@link Collection#add}. If this method returns a\n   * value then the `records` argument in {@link Collection#add} will be\n   * re-assigned to the returned value.\n   *\n   * @method Collection#beforeAdd\n   * @since 3.0.0\n   * @param {(Object|Object[]|Record|Record[])} records The `records` argument passed to {@link Collection#add}.\n   * @param {object} opts The `opts` argument passed to {@link Collection#add}.\n   */\n  beforeAdd () {},\n\n  /**\n   * Lifecycle hook called by {@link Collection#remove}.\n   *\n   * @method Collection#beforeRemove\n   * @since 3.0.0\n   * @param {(string|number)} id The `id` argument passed to {@link Collection#remove}.\n   * @param {object} opts The `opts` argument passed to {@link Collection#remove}.\n   */\n  beforeRemove () {},\n\n  /**\n   * Lifecycle hook called by {@link Collection#removeAll}.\n   *\n   * @method Collection#beforeRemoveAll\n   * @since 3.0.0\n   * @param {object} query The `query` argument passed to {@link Collection#removeAll}.\n   * @param {object} opts The `opts` argument passed to {@link Collection#removeAll}.\n   */\n  beforeRemoveAll () {},\n\n  /**\n   * Find all records between two boundaries.\n   *\n   * Shortcut for `collection.query().between(18, 30, { index: 'age' }).run()`\n   *\n   * @example\n   * // Get all users ages 18 to 30\n   * const users = collection.between(18, 30, { index: 'age' });\n   *\n   * @example\n   * // Same as above\n   * const users = collection.between([18], [30], { index: 'age' });\n   *\n   * @method Collection#between\n   * @since 3.0.0\n   * @param {array} leftKeys Keys defining the left boundary.\n   * @param {array} rightKeys Keys defining the right boundary.\n   * @param {object} [opts] Configuration options.\n   * @param {string} [opts.index] Name of the secondary index to use in the\n   * query. If no index is specified, the main index is used.\n   * @param {boolean} [opts.leftInclusive=true] Whether to include records\n   * on the left boundary.\n   * @param {boolean} [opts.rightInclusive=false] Whether to include records\n   * on the left boundary.\n   * @param {boolean} [opts.limit] Limit the result to a certain number.\n   * @param {boolean} [opts.offset] The number of resulting records to skip.\n   * @returns {Object[]|Record[]} The result.\n   */\n  between (leftKeys, rightKeys, opts) {\n    return this.query().between(leftKeys, rightKeys, opts).run()\n  },\n\n  /**\n   * Create a new secondary index on the contents of the collection.\n   *\n   * @example\n   * // Index users by age\n   * collection.createIndex('age');\n   *\n   * @example\n   * // Index users by status and role\n   * collection.createIndex('statusAndRole', ['status', 'role']);\n   *\n   * @method Collection#createIndex\n   * @since 3.0.0\n   * @param {string} name The name of the new secondary index.\n   * @param {string[]} [fieldList] Array of field names to use as the key or\n   * compound key of the new secondary index. If no fieldList is provided, then\n   * the name will also be the field that is used to index the collection.\n   */\n  createIndex (name, fieldList, opts) {\n    if (utils.isString(name) && fieldList === undefined) {\n      fieldList = [name]\n    }\n    opts || (opts = {})\n    opts.hashCode || (opts.hashCode = (obj) => this.recordId(obj))\n    const index = this.indexes[name] = new Index(fieldList, opts)\n    this.index.visitAll(index.insertRecord, index)\n  },\n\n  /**\n   * Find the record or records that match the provided query or pass the\n   * provided filter function.\n   *\n   * Shortcut for `collection.query().filter(queryOrFn[, thisArg]).run()`\n   *\n   * @example <caption>Collection#filter</caption>\n   * const JSData = require('js-data');\n   * const { Collection } = JSData;\n   * console.log('Using JSData v' + JSData.version.full);\n   *\n   * const collection = new Collection([\n   *   { id: 1, status: 'draft', created_at_timestamp: new Date().getTime() }\n   * ]);\n   *\n   * // Get the draft posts created less than three months ago\n   * let posts = collection.filter({\n   *   where: {\n   *     status: {\n   *       '==': 'draft'\n   *     },\n   *     created_at_timestamp: {\n   *       '>=': (new Date().getTime() - (1000 \\* 60 \\* 60 \\* 24 \\* 30 \\* 3)) // 3 months ago\n   *     }\n   *   }\n   * });\n   * console.log(posts);\n   *\n   * // Use a custom filter function\n   * posts = collection.filter((post) => post.id % 2 === 0);\n   *\n   * @method Collection#filter\n   * @param {(Object|Function)} [queryOrFn={}] Selection query or filter\n   * function.\n   * @param {object} [thisArg] Context to which to bind `queryOrFn` if\n   * `queryOrFn` is a function.\n   * @returns {Array} The result.\n   * @see query\n   * @since 3.0.0\n   */\n  filter (query, thisArg) {\n    return this.query().filter(query, thisArg).run()\n  },\n\n  /**\n   * Iterate over all records.\n   *\n   * @example\n   * collection.forEach(function (record) {\n   *   // do something\n   * });\n   *\n   * @method Collection#forEach\n   * @since 3.0.0\n   * @param {Function} forEachFn Iteration function.\n   * @param {*} [thisArg] Context to which to bind `forEachFn`.\n   * @returns {Array} The result.\n   */\n  forEach (cb, thisArg) {\n    this.index.visitAll(cb, thisArg)\n  },\n\n  /**\n   * Get the record with the given id.\n   *\n   * @method Collection#get\n   * @since 3.0.0\n   * @param {(string|number)} id The primary key of the record to get.\n   * @returns {(Object|Record)} The record with the given id.\n   */\n  get (id) {\n    const instances = id === undefined ? [] : this.query().get(id).run()\n    return instances.length ? instances[0] : undefined\n  },\n\n  /**\n   * Find the record or records that match the provided keyLists.\n   *\n   * Shortcut for `collection.query().getAll(keyList1, keyList2, ...).run()`\n   *\n   * @example\n   * // Get the posts where \"status\" is \"draft\" or \"inReview\"\n   * const posts = collection.getAll('draft', 'inReview', { index: 'status' });\n   *\n   * @example\n   * // Same as above\n   * const posts = collection.getAll(['draft'], ['inReview'], { index: 'status' });\n   *\n   * @method Collection#getAll\n   * @since 3.0.0\n   * @param {...Array} [keyList] Provide one or more keyLists, and all\n   * records matching each keyList will be retrieved. If no keyLists are\n   * provided, all records will be returned.\n   * @param {object} [opts] Configuration options.\n   * @param {string} [opts.index] Name of the secondary index to use in the\n   * query. If no index is specified, the main index is used.\n   * @returns {Array} The result.\n   */\n  getAll (...args) {\n    return this.query().getAll(...args).run()\n  },\n\n  /**\n   * Return the index with the given name. If no name is provided, return the\n   * main index. Throws an error if the specified index does not exist.\n   *\n   * @method Collection#getIndex\n   * @since 3.0.0\n   * @param {string} [name] The name of the index to retrieve.\n   */\n  getIndex (name) {\n    const index = name ? this.indexes[name] : this.index\n    if (!index) {\n      throw utils.err(`${DOMAIN}#getIndex`, name)(404, 'index')\n    }\n    return index\n  },\n\n  /**\n   * Limit the result.\n   *\n   * Shortcut for `collection.query().limit(maximumNumber).run()`\n   *\n   * @example\n   * const posts = collection.limit(10);\n   *\n   * @method Collection#limit\n   * @since 3.0.0\n   * @param {number} num The maximum number of records to keep in the result.\n   * @returns {Array} The result.\n   */\n  limit (num) {\n    return this.query().limit(num).run()\n  },\n\n  /**\n   * Apply a mapping function to all records.\n   *\n   * @example\n   * const names = collection.map((user) => user.name);\n   *\n   * @method Collection#map\n   * @since 3.0.0\n   * @param {Function} mapFn Mapping function.\n   * @param {*} [thisArg] Context to which to bind `mapFn`.\n   * @returns {Array} The result of the mapping.\n   */\n  map (cb, thisArg) {\n    const data = []\n    this.index.visitAll(function (value) {\n      data.push(cb.call(thisArg, value))\n    })\n    return data\n  },\n\n  /**\n   * Return the result of calling the specified function on each record in this\n   * collection's main index.\n   *\n   * @method Collection#mapCall\n   * @since 3.0.0\n   * @param {string} funcName Name of function to call\n   * @parama {...*} [args] Remaining arguments to be passed to the function.\n   * @returns {Array} The result.\n   */\n  mapCall (funcName, ...args) {\n    const data = []\n    this.index.visitAll(function (record) {\n      data.push(record[funcName](...args))\n    })\n    return data\n  },\n\n  /**\n   * Return all \"unsaved\" (not uniquely identifiable) records in this colleciton.\n   *\n   * @method Collection#prune\n   * @param {object} [opts] Configuration options, passed to {@link Collection#removeAll}.\n   * @since 3.0.0\n   * @returns {Array} The removed records, if any.\n   */\n  prune (opts) {\n    return this.removeAll(this.unsaved(), opts)\n  },\n\n  /**\n   * Create a new query to be executed against the contents of the collection.\n   * The result will be all or a subset of the contents of the collection.\n   *\n   * @example\n   * // Grab page 2 of users between ages 18 and 30\n   * collection.query()\n   *   .between(18, 30, { index: 'age' }) // between ages 18 and 30\n   *   .skip(10) // second page\n   *   .limit(10) // page size\n   *   .run();\n   *\n   * @method Collection#query\n   * @since 3.0.0\n   * @returns {Query} New query object.\n   */\n  query () {\n    const Ctor = this.queryClass\n    return new Ctor(this)\n  },\n\n  /**\n   * Return the primary key of the given, or if no record is provided, return the\n   * name of the field that holds the primary key of records in this Collection.\n   *\n   * @method Collection#recordId\n   * @since 3.0.0\n   * @param {(Object|Record)} [record] The record whose primary key is to be\n   * returned.\n   * @returns {(string|number)} Primary key or name of field that holds primary\n   * key.\n   */\n  recordId (record) {\n    if (record) {\n      return utils.get(record, this.recordId())\n    }\n    return this.mapper ? this.mapper.idAttribute : this.idAttribute\n  },\n\n  /**\n   * Reduce the data in the collection to a single value and return the result.\n   *\n   * @example\n   * const totalVotes = collection.reduce((prev, record) => {\n   *   return prev + record.upVotes + record.downVotes;\n   * }, 0);\n   *\n   * @method Collection#reduce\n   * @since 3.0.0\n   * @param {Function} cb Reduction callback.\n   * @param {*} initialValue Initial value of the reduction.\n   * @returns {*} The result.\n   */\n  reduce (cb, initialValue) {\n    const data = this.getAll()\n    return data.reduce(cb, initialValue)\n  },\n\n  /**\n   * Remove the record with the given id from this Collection.\n   *\n   * @method Collection#remove\n   * @since 3.0.0\n   * @param {(string|number|object|Record)} idOrRecord The primary key of the\n   * record to be removed, or a reference to the record that is to be removed.\n   * @param {object} [opts] Configuration options.\n   * @returns {Object|Record} The removed record, if any.\n   */\n  remove (idOrRecord, opts) {\n    // Default values for arguments\n    opts || (opts = {})\n    this.beforeRemove(idOrRecord, opts)\n    let record = utils.isSorN(idOrRecord) ? this.get(idOrRecord) : idOrRecord\n\n    // The record is in the collection, remove it\n    if (utils.isObject(record)) {\n      record = this.index.removeRecord(record)\n      if (record) {\n        utils.forOwn(this.indexes, function (index, name) {\n          index.removeRecord(record)\n        })\n        if (utils.isFunction(record.off)) {\n          record.off('all', this._onRecordEvent, this)\n          if (!opts.silent) {\n            this.emit('remove', record)\n          }\n        }\n      }\n    }\n    return this.afterRemove(idOrRecord, opts, record) || record\n  },\n\n  /**\n   * Remove from this collection the given records or the records selected by\n   * the given \"query\".\n   *\n   * @method Collection#removeAll\n   * @since 3.0.0\n   * @param {Object|Object[]|Record[]} [queryOrRecords={}] Records to be removed or selection query. See {@link query}.\n   * @param {object} [queryOrRecords.where] See {@link query.where}.\n   * @param {number} [queryOrRecords.offset] See {@link query.offset}.\n   * @param {number} [queryOrRecords.limit] See {@link query.limit}.\n   * @param {string|Array[]} [queryOrRecords.orderBy] See {@link query.orderBy}.\n   * @param {object} [opts] Configuration options.\n   * @returns {(Object[]|Record[])} The removed records, if any.\n   */\n  removeAll (queryOrRecords, opts) {\n    // Default values for arguments\n    opts || (opts = {})\n    this.beforeRemoveAll(queryOrRecords, opts)\n    let records = utils.isArray(queryOrRecords) ? queryOrRecords.slice() : this.filter(queryOrRecords)\n\n    // Remove each selected record from the collection\n    const optsCopy = utils.plainCopy(opts)\n    optsCopy.silent = true\n    records = records\n      .map((record) => this.remove(record, optsCopy))\n      .filter((record) => record)\n    if (!opts.silent) {\n      this.emit('remove', records)\n    }\n    return this.afterRemoveAll(queryOrRecords, opts, records) || records\n  },\n\n  /**\n   * Skip a number of results.\n   *\n   * Shortcut for `collection.query().skip(numberToSkip).run()`\n   *\n   * @example\n   * const posts = collection.skip(10);\n   *\n   * @method Collection#skip\n   * @since 3.0.0\n   * @param {number} num The number of records to skip.\n   * @returns {Array} The result.\n   */\n  skip (num) {\n    return this.query().skip(num).run()\n  },\n\n  /**\n   * Return the plain JSON representation of all items in this collection.\n   * Assumes records in this collection have a toJSON method.\n   *\n   * @method Collection#toJSON\n   * @since 3.0.0\n   * @param {object} [opts] Configuration options.\n   * @param {string[]} [opts.with] Array of relation names or relation fields\n   * to include in the representation.\n   * @returns {Array} The records.\n   */\n  toJSON (opts) {\n    return this.mapCall('toJSON', opts)\n  },\n\n  /**\n   * Return all \"unsaved\" (not uniquely identifiable) records in this colleciton.\n   *\n   * @method Collection#unsaved\n   * @since 3.0.0\n   * @returns {Array} The unsaved records, if any.\n   */\n  unsaved (opts) {\n    return this.index.get()\n  },\n\n  /**\n   * Update a record's position in a single index of this collection. See\n   * {@link Collection#updateIndexes} to update a record's position in all\n   * indexes at once.\n   *\n   * @method Collection#updateIndex\n   * @since 3.0.0\n   * @param {object} record The record to update.\n   * @param {object} [opts] Configuration options.\n   * @param {string} [opts.index] The index in which to update the record's\n   * position. If you don't specify an index then the record will be updated\n   * in the main index.\n   */\n  updateIndex (record, opts) {\n    opts || (opts = {})\n    this.getIndex(opts.index).updateRecord(record)\n  },\n\n  /**\n   * Updates all indexes in this collection for the provided record. Has no\n   * effect if the record is not in the collection.\n   *\n   * @method Collection#updateIndexes\n   * @since 3.0.0\n   * @param {object} record TODO\n   */\n  updateIndexes (record) {\n    this.index.updateRecord(record)\n    utils.forOwn(this.indexes, function (index, name) {\n      index.updateRecord(record)\n    })\n  }\n})\n\n/**\n * Fired when a record changes. Only works for records that have tracked changes.\n * See {@link Collection~changeListener} on how to listen for this event.\n *\n * @event Collection#change\n * @see Collection~changeListener\n */\n\n/**\n * Callback signature for the {@link Collection#event:change} event.\n *\n * @example\n * function onChange (record, changes) {\n *   // do something\n * }\n * collection.on('change', onChange);\n *\n * @callback Collection~changeListener\n * @param {Record} The Record that changed.\n * @param {object} The changes.\n * @see Collection#event:change\n * @since 3.0.0\n */\n\n/**\n * Fired when one or more records are added to the Collection. See\n * {@link Collection~addListener} on how to listen for this event.\n *\n * @event Collection#add\n * @see Collection~addListener\n * @see Collection#event:add\n * @see Collection#add\n */\n\n/**\n * Callback signature for the {@link Collection#event:add} event.\n *\n * @example\n * function onAdd (recordOrRecords) {\n *   // do something\n * }\n * collection.on('add', onAdd);\n *\n * @callback Collection~addListener\n * @param {Record|Record[]} The Record or Records that were added.\n * @see Collection#event:add\n * @see Collection#add\n * @since 3.0.0\n */\n\n/**\n * Fired when one or more records are removed from the Collection. See\n * {@link Collection~removeListener} for how to listen for this event.\n *\n * @event Collection#remove\n * @see Collection~removeListener\n * @see Collection#event:remove\n * @see Collection#remove\n * @see Collection#removeAll\n */\n\n/**\n * Callback signature for the {@link Collection#event:remove} event.\n *\n * @example\n * function onRemove (recordsOrRecords) {\n *   // do something\n * }\n * collection.on('remove', onRemove);\n *\n * @callback Collection~removeListener\n * @param {Record|Record[]} Record or Records that were removed.\n * @see Collection#event:remove\n * @see Collection#remove\n * @see Collection#removeAll\n * @since 3.0.0\n */\n\n/**\n * Create a subclass of this Collection:\n * @example <caption>Collection.extend</caption>\n * const JSData = require('js-data');\n * const { Collection } = JSData;\n * console.log('Using JSData v' + JSData.version.full);\n *\n * // Extend the class using ES2015 class syntax.\n * class CustomCollectionClass extends Collection {\n *   foo () { return 'bar'; }\n *   static beep () { return 'boop'; }\n * }\n * const customCollection = new CustomCollectionClass();\n * console.log(customCollection.foo());\n * console.log(CustomCollectionClass.beep());\n *\n * // Extend the class using alternate method.\n * const OtherCollectionClass = Collection.extend({\n *   foo () { return 'bar'; }\n * }, {\n *   beep () { return 'boop'; }\n * });\n * const otherCollection = new OtherCollectionClass();\n * console.log(otherCollection.foo());\n * console.log(OtherCollectionClass.beep());\n *\n * // Extend the class, providing a custom constructor.\n * function AnotherCollectionClass () {\n *   Collection.call(this);\n *   this.created_at = new Date().getTime();\n * }\n * Collection.extend({\n *   constructor: AnotherCollectionClass,\n *   foo () { return 'bar'; }\n * }, {\n *   beep () { return 'boop'; }\n * });\n * const anotherCollection = new AnotherCollectionClass();\n * console.log(anotherCollection.created_at);\n * console.log(anotherCollection.foo());\n * console.log(AnotherCollectionClass.beep());\n *\n * @method Collection.extend\n * @param {object} [props={}] Properties to add to the prototype of the\n * subclass.\n * @param {object} [props.constructor] Provide a custom constructor function\n * to be used as the subclass itself.\n * @param {object} [classProps={}] Static properties to add to the subclass.\n * @returns {Constructor} Subclass of this Collection class.\n * @since 3.0.0\n */\n","import utils from './utils'\nimport Component from './Component'\n\nconst DOMAIN = 'Schema'\n\n/**\n * A function map for each of the seven primitive JSON types defined by the core specification.\n * Each function will check a given value and return true or false if the value is an instance of that type.\n * ```\n *   types.integer(1) // returns true\n *   types.string({}) // returns false\n * ```\n * http://json-schema.org/latest/json-schema-core.html#anchor8\n * @name Schema.types\n * @type {object}\n */\nconst types = {\n  array: utils.isArray,\n  boolean: utils.isBoolean,\n  integer: utils.isInteger,\n  'null': utils.isNull,\n  number: utils.isNumber,\n  object: utils.isObject,\n  string: utils.isString\n}\n\n/**\n * @ignore\n */\nconst segmentToString = function (segment, prev) {\n  let str = ''\n  if (segment) {\n    if (utils.isNumber(segment)) {\n      str += `[${segment}]`\n    } else if (prev) {\n      str += `.${segment}`\n    } else {\n      str += `${segment}`\n    }\n  }\n  return str\n}\n\n/**\n * @ignore\n */\nconst makePath = function (opts) {\n  opts || (opts = {})\n  let path = ''\n  const segments = opts.path || []\n  segments.forEach(function (segment) {\n    path += segmentToString(segment, path)\n  })\n  path += segmentToString(opts.prop, path)\n  return path\n}\n\n/**\n * @ignore\n */\nconst makeError = function (actual, expected, opts) {\n  return {\n    expected,\n    actual: '' + actual,\n    path: makePath(opts)\n  }\n}\n\n/**\n * @ignore\n */\nconst addError = function (actual, expected, opts, errors) {\n  errors.push(makeError(actual, expected, opts))\n}\n\n/**\n * @ignore\n */\nconst maxLengthCommon = function (keyword, value, schema, opts) {\n  const max = schema[keyword]\n  if (value.length > max) {\n    return makeError(value.length, `length no more than ${max}`, opts)\n  }\n}\n\n/**\n * @ignore\n */\nconst minLengthCommon = function (keyword, value, schema, opts) {\n  const min = schema[keyword]\n  if (value.length < min) {\n    return makeError(value.length, `length no less than ${min}`, opts)\n  }\n}\n\n/**\n * A map of all object member validation functions for each keyword defined in the JSON Schema.\n * @name Schema.validationKeywords\n * @type {object}\n */\nconst validationKeywords = {\n  /**\n   * Validates the provided value against all schemas defined in the Schemas `allOf` keyword.\n   * The instance is valid against if and only if it is valid against all the schemas declared in the Schema's value.\n   *\n   * The value of this keyword MUST be an array. This array MUST have at least one element.\n   * Each element of this array MUST be a valid JSON Schema.\n   *\n   * see http://json-schema.org/latest/json-schema-validation.html#anchor82\n   *\n   * @name Schema.validationKeywords.allOf\n   * @method\n   * @param {*} value Value to be validated.\n   * @param {object} schema Schema containing the `allOf` keyword.\n   * @param {object} [opts] Configuration options.\n   * @returns {(array|undefined)} Array of errors or `undefined` if valid.\n   */\n  allOf (value, schema, opts) {\n    let allErrors = []\n    schema.allOf.forEach(function (_schema) {\n      allErrors = allErrors.concat(validate(value, _schema, opts) || [])\n    })\n    return allErrors.length ? allErrors : undefined\n  },\n\n  /**\n   * Validates the provided value against all schemas defined in the Schemas `anyOf` keyword.\n   * The instance is valid against this keyword if and only if it is valid against\n   * at least one of the schemas in this keyword's value.\n   *\n   * The value of this keyword MUST be an array. This array MUST have at least one element.\n   * Each element of this array MUST be an object, and each object MUST be a valid JSON Schema.\n   * see http://json-schema.org/latest/json-schema-validation.html#anchor85\n   *\n   * @name Schema.validationKeywords.anyOf\n   * @method\n   * @param {*} value Value to be validated.\n   * @param {object} schema Schema containing the `anyOf` keyword.\n   * @param {object} [opts] Configuration options.\n   * @returns {(array|undefined)} Array of errors or `undefined` if valid.\n   */\n  anyOf (value, schema, opts) {\n    let validated = false\n    let allErrors = []\n    schema.anyOf.forEach(function (_schema) {\n      const errors = validate(value, _schema, opts)\n      if (errors) {\n        allErrors = allErrors.concat(errors)\n      } else {\n        validated = true\n      }\n    })\n    return validated ? undefined : allErrors\n  },\n\n  /**\n   * http://json-schema.org/latest/json-schema-validation.html#anchor70\n   *\n   * @name Schema.validationKeywords.dependencies\n   * @method\n   * @param {*} value TODO\n   * @param {object} schema TODO\n   * @param {object} opts TODO\n   */\n  dependencies (value, schema, opts) {\n    // TODO\n  },\n\n  /**\n   * Validates the provided value against an array of possible values defined by the Schema's `enum` keyword\n   * Validation succeeds if the value is deeply equal to one of the values in the array.\n   * see http://json-schema.org/latest/json-schema-validation.html#anchor76\n   *\n   * @name Schema.validationKeywords.enum\n   * @method\n   * @param {*} value Value to validate\n   * @param {object} schema Schema containing the `enum` keyword.\n   * @param {object} [opts] Configuration options.\n   * @returns {(array|undefined)} Array of errors or `undefined` if valid.\n   */\n  enum (value, schema, opts) {\n    const possibleValues = schema['enum']\n    if (utils.findIndex(possibleValues, (item) => utils.deepEqual(item, value)) === -1) {\n      return makeError(value, `one of (${possibleValues.join(', ')})`, opts)\n    }\n  },\n\n  /**\n   * Validates each of the provided array values against a schema or an array of schemas defined by the Schema's `items` keyword\n   * see http://json-schema.org/latest/json-schema-validation.html#anchor37 for validation rules.\n   *\n   * @name Schema.validationKeywords.items\n   * @method\n   * @param {*} value Array to be validated.\n   * @param {object} schema Schema containing the items keyword.\n   * @param {object} [opts] Configuration options.\n   * @returns {(array|undefined)} Array of errors or `undefined` if valid.\n   */\n  items (value, schema, opts) {\n    opts || (opts = {})\n    // TODO: additionalItems\n    let items = schema.items\n    let errors = []\n    const checkingTuple = utils.isArray(items)\n    const length = value.length\n    for (var prop = 0; prop < length; prop++) {\n      if (checkingTuple) {\n        // Validating a tuple, instead of just checking each item against the\n        // same schema\n        items = schema.items[prop]\n      }\n      opts.prop = prop\n      errors = errors.concat(validate(value[prop], items, opts) || [])\n    }\n    return errors.length ? errors : undefined\n  },\n\n  /**\n   * Validates the provided number against a maximum value defined by the Schema's `maximum` keyword\n   * Validation succeeds if the value is a number, and is less than, or equal to, the value of this keyword.\n   * http://json-schema.org/latest/json-schema-validation.html#anchor17\n   *\n   * @name Schema.validationKeywords.maximum\n   * @method\n   * @param {*} value Number to validate against the keyword.\n   * @param {object} schema Schema containing the `maximum` keyword.\n   * @param {object} [opts] Configuration options.\n   * @returns {(array|undefined)} Array of errors or `undefined` if valid.\n   */\n  maximum (value, schema, opts) {\n    // Must be a number\n    const maximum = schema.maximum\n    // Must be a boolean\n    // Depends on maximum\n    // default: false\n    const exclusiveMaximum = schema.exclusiveMaximum\n    if (typeof value === typeof maximum && !(exclusiveMaximum ? maximum > value : maximum >= value)) {\n      return exclusiveMaximum\n        ? makeError(value, `no more than nor equal to ${maximum}`, opts)\n        : makeError(value, `no more than ${maximum}`, opts)\n    }\n  },\n\n  /**\n   * Validates the length of the provided array against a maximum value defined by the Schema's `maxItems` keyword.\n   * Validation succeeds if the length of the array is less than, or equal to the value of this keyword.\n   * see http://json-schema.org/latest/json-schema-validation.html#anchor42\n   *\n   * @name Schema.validationKeywords.maxItems\n   * @method\n   * @param {*} value Array to be validated.\n   * @param {object} schema Schema containing the `maxItems` keyword.\n   * @param {object} [opts] Configuration options.\n   * @returns {(array|undefined)} Array of errors or `undefined` if valid.\n   */\n  maxItems (value, schema, opts) {\n    if (utils.isArray(value)) {\n      return maxLengthCommon('maxItems', value, schema, opts)\n    }\n  },\n\n  /**\n   * Validates the length of the provided string against a maximum value defined in the Schema's `maxLength` keyword.\n   * Validation succeeds if the length of the string is less than, or equal to the value of this keyword.\n   * see http://json-schema.org/latest/json-schema-validation.html#anchor26\n   *\n   * @name Schema.validationKeywords.maxLength\n   * @method\n   * @param {*} value String to be validated.\n   * @param {object} schema Schema containing the `maxLength` keyword.\n   * @param {object} [opts] Configuration options.\n   * @returns {(array|undefined)} Array of errors or `undefined` if valid.\n   */\n  maxLength (value, schema, opts) {\n    return maxLengthCommon('maxLength', value, schema, opts)\n  },\n\n  /**\n   * Validates the count of the provided object's properties against a maximum value defined in the Schema's `maxProperties` keyword.\n   * Validation succeeds if the object's property count is less than, or equal to the value of this keyword.\n   * see http://json-schema.org/latest/json-schema-validation.html#anchor54\n   *\n   * @name Schema.validationKeywords.maxProperties\n   * @method\n   * @param {*} value Object to be validated.\n   * @param {object} schema Schema containing the `maxProperties` keyword.\n   * @param {object} [opts] Configuration options.\n   * @returns {(array|undefined)} Array of errors or `undefined` if valid.\n   */\n  maxProperties (value, schema, opts) {\n    // validate only objects\n    if (!utils.isObject(value)) return\n    const maxProperties = schema.maxProperties\n    const length = Object.keys(value).length\n    if (length > maxProperties) {\n      return makeError(length, `no more than ${maxProperties} properties`, opts)\n    }\n  },\n\n  /**\n   * Validates the provided value against a minimum value defined by the Schema's `minimum` keyword\n   * Validation succeeds if the value is a number and is greater than, or equal to, the value of this keyword.\n   * http://json-schema.org/latest/json-schema-validation.html#anchor21\n   *\n   * @name Schema.validationKeywords.minimum\n   * @method\n   * @param {*} value Number to validate against the keyword.\n   * @param {object} schema Schema containing the `minimum` keyword.\n   * @param {object} [opts] Configuration options.\n   * @returns {(array|undefined)} Array of errors or `undefined` if valid.\n   */\n  minimum (value, schema, opts) {\n    // Must be a number\n    const minimum = schema.minimum\n    // Must be a boolean\n    // Depends on minimum\n    // default: false\n    const exclusiveMinimum = schema.exclusiveMinimum\n    if (typeof value === typeof minimum && !(exclusiveMinimum ? value > minimum : value >= minimum)) {\n      return exclusiveMinimum\n        ? makeError(value, `no less than nor equal to ${minimum}`, opts)\n        : makeError(value, `no less than ${minimum}`, opts)\n    }\n  },\n\n  /**\n   * Validates the length of the provided array against a minimum value defined by the Schema's `minItems` keyword.\n   * Validation succeeds if the length of the array is greater than, or equal to the value of this keyword.\n   * see http://json-schema.org/latest/json-schema-validation.html#anchor45\n   *\n   * @name Schema.validationKeywords.minItems\n   * @method\n   * @param {*} value Array to be validated.\n   * @param {object} schema Schema containing the `minItems` keyword.\n   * @param {object} [opts] Configuration options.\n   * @returns {(array|undefined)} Array of errors or `undefined` if valid.\n   */\n  minItems (value, schema, opts) {\n    if (utils.isArray(value)) {\n      return minLengthCommon('minItems', value, schema, opts)\n    }\n  },\n\n  /**\n   * Validates the length of the provided string against a minimum value defined in the Schema's `minLength` keyword.\n   * Validation succeeds if the length of the string is greater than, or equal to the value of this keyword.\n   * see http://json-schema.org/latest/json-schema-validation.html#anchor29\n   *\n   * @name Schema.validationKeywords.minLength\n   * @method\n   * @param {*} value String to be validated.\n   * @param {object} schema Schema containing the `minLength` keyword.\n   * @param {object} [opts] Configuration options.\n   * @returns {(array|undefined)} Array of errors or `undefined` if valid.\n   */\n  minLength (value, schema, opts) {\n    return minLengthCommon('minLength', value, schema, opts)\n  },\n\n  /**\n   * Validates the count of the provided object's properties against a minimum value defined in the Schema's `minProperties` keyword.\n   * Validation succeeds if the object's property count is greater than, or equal to the value of this keyword.\n   * see http://json-schema.org/latest/json-schema-validation.html#anchor57\n   *\n   * @name Schema.validationKeywords.minProperties\n   * @method\n   * @param {*} value Object to be validated.\n   * @param {object} schema Schema containing the `minProperties` keyword.\n   * @param {object} [opts] Configuration options.\n   * @returns {(array|undefined)} Array of errors or `undefined` if valid.\n   */\n  minProperties (value, schema, opts) {\n    // validate only objects\n    if (!utils.isObject(value)) return\n    const minProperties = schema.minProperties\n    const length = Object.keys(value).length\n    if (length < minProperties) {\n      return makeError(length, `no more than ${minProperties} properties`, opts)\n    }\n  },\n\n  /**\n   * Validates the provided number is a multiple of the number defined in the Schema's `multipleOf` keyword.\n   * Validation succeeds if the number can be divided equally into the value of this keyword.\n   * see http://json-schema.org/latest/json-schema-validation.html#anchor14\n   *\n   * @name Schema.validationKeywords.multipleOf\n   * @method\n   * @param {*} value Number to be validated.\n   * @param {object} schema Schema containing the `multipleOf` keyword.\n   * @param {object} [opts] Configuration options.\n   * @returns {(array|undefined)} Array of errors or `undefined` if valid.\n   */\n  multipleOf (value, schema, opts) {\n    const multipleOf = schema.multipleOf\n    if (utils.isNumber(value)) {\n      if ((value / multipleOf) % 1 !== 0) {\n        return makeError(value, `multipleOf ${multipleOf}`, opts)\n      }\n    }\n  },\n\n  /**\n   * Validates the provided value is not valid with any of the schemas defined in the Schema's `not` keyword.\n   * An instance is valid against this keyword if and only if it is NOT valid against the schemas in this keyword's value.\n   *\n   * see http://json-schema.org/latest/json-schema-validation.html#anchor91\n   * @name Schema.validationKeywords.not\n   * @method\n   * @param {*} value to be checked.\n   * @param {object} schema Schema containing the not keyword.\n   * @param {object} [opts] Configuration options.\n   * @returns {(array|undefined)} Array of errors or `undefined` if valid.\n   */\n  not (value, schema, opts) {\n    if (!validate(value, schema.not, opts)) {\n      // TODO: better messaging\n      return makeError('succeeded', 'should have failed', opts)\n    }\n  },\n\n  /**\n   * Validates the provided value is valid with one and only one of the schemas defined in the Schema's `oneOf` keyword.\n   * An instance is valid against this keyword if and only if it is valid against a single schemas in this keyword's value.\n   *\n   * see http://json-schema.org/latest/json-schema-validation.html#anchor88\n   * @name Schema.validationKeywords.oneOf\n   * @method\n   * @param {*} value to be checked.\n   * @param {object} schema Schema containing the `oneOf` keyword.\n   * @param {object} [opts] Configuration options.\n   * @returns {(array|undefined)} Array of errors or `undefined` if valid.\n   */\n  oneOf (value, schema, opts) {\n    let validated = false\n    let allErrors = []\n    schema.oneOf.forEach(function (_schema) {\n      const errors = validate(value, _schema, opts)\n      if (errors) {\n        allErrors = allErrors.concat(errors)\n      } else if (validated) {\n        allErrors = [makeError('valid against more than one', 'valid against only one', opts)]\n        validated = false\n        return false\n      } else {\n        validated = true\n      }\n    })\n    return validated ? undefined : allErrors\n  },\n\n  /**\n   * Validates the provided string matches a pattern defined in the Schema's `pattern` keyword.\n   * Validation succeeds if the string is a match of the regex value of this keyword.\n   *\n   * see http://json-schema.org/latest/json-schema-validation.html#anchor33\n   * @name Schema.validationKeywords.pattern\n   * @method\n   * @param {*} value String to be validated.\n   * @param {object} schema Schema containing the `pattern` keyword.\n   * @param {object} [opts] Configuration options.\n   * @returns {(array|undefined)} Array of errors or `undefined` if valid.\n   */\n  pattern (value, schema, opts) {\n    const pattern = schema.pattern\n    if (utils.isString(value) && !value.match(pattern)) {\n      return makeError(value, pattern, opts)\n    }\n  },\n\n  /**\n   * Validates the provided object's properties against a map of values defined in the Schema's `properties` keyword.\n   * Validation succeeds if the object's property are valid with each of the schema's in the provided map.\n   * Validation also depends on the additionalProperties and or patternProperties.\n   *\n   * see http://json-schema.org/latest/json-schema-validation.html#anchor64 for more info.\n   *\n   * @name Schema.validationKeywords.properties\n   * @method\n   * @param {*} value Object to be validated.\n   * @param {object} schema Schema containing the `properties` keyword.\n   * @param {object} [opts] Configuration options.\n   * @returns {(array|undefined)} Array of errors or `undefined` if valid.\n   */\n  properties (value, schema, opts) {\n    opts || (opts = {})\n\n    if (utils.isArray(value)) {\n      return\n    }\n\n    // Can be a boolean or an object\n    // Technically the default is an \"empty schema\", but here \"true\" is\n    // functionally the same\n    const additionalProperties = schema.additionalProperties === undefined ? true : schema.additionalProperties\n    const validated = []\n    // \"p\": The property set from \"properties\".\n    // Default is an object\n    const properties = schema.properties || {}\n    // \"pp\": The property set from \"patternProperties\".\n    // Default is an object\n    const patternProperties = schema.patternProperties || {}\n    let errors = []\n\n    utils.forOwn(properties, function (_schema, prop) {\n      opts.prop = prop\n      errors = errors.concat(validate(value[prop], _schema, opts) || [])\n      validated.push(prop)\n    })\n\n    const toValidate = utils.omit(value, validated)\n    utils.forOwn(patternProperties, function (_schema, pattern) {\n      utils.forOwn(toValidate, function (undef, prop) {\n        if (prop.match(pattern)) {\n          opts.prop = prop\n          errors = errors.concat(validate(value[prop], _schema, opts) || [])\n          validated.push(prop)\n        }\n      })\n    })\n    const keys = Object.keys(utils.omit(value, validated))\n    // If \"s\" is not empty, validation fails\n    if (additionalProperties === false) {\n      if (keys.length) {\n        const origProp = opts.prop\n        opts.prop = ''\n        addError(`extra fields: ${keys.join(', ')}`, 'no extra fields', opts, errors)\n        opts.prop = origProp\n      }\n    } else if (utils.isObject(additionalProperties)) {\n      // Otherwise, validate according to provided schema\n      keys.forEach(function (prop) {\n        opts.prop = prop\n        errors = errors.concat(validate(value[prop], additionalProperties, opts) || [])\n      })\n    }\n    return errors.length ? errors : undefined\n  },\n\n  /**\n   * Validates the provided object's has all properties listed in the Schema's `properties` keyword array.\n   * Validation succeeds if the object contains all properties provided in the array value of this keyword.\n   * see http://json-schema.org/latest/json-schema-validation.html#anchor61\n   *\n   * @name Schema.validationKeywords.required\n   * @method\n   * @param {*} value Object to be validated.\n   * @param {object} schema Schema containing the `required` keyword.\n   * @param {object} [opts] Configuration options.\n   * @returns {(array|undefined)} Array of errors or `undefined` if valid.\n   */\n  required (value, schema, opts) {\n    opts || (opts = {})\n    const required = schema.required\n    let errors = []\n    if (!opts.existingOnly) {\n      required.forEach(function (prop) {\n        if (utils.get(value, prop) === undefined) {\n          const prevProp = opts.prop\n          opts.prop = prop\n          addError(undefined, 'a value', opts, errors)\n          opts.prop = prevProp\n        }\n      })\n    }\n    return errors.length ? errors : undefined\n  },\n\n  /**\n   * Validates the provided value's type is equal to the type, or array of types, defined in the Schema's `type` keyword.\n   * see http://json-schema.org/latest/json-schema-validation.html#anchor79\n   *\n   * @name Schema.validationKeywords.type\n   * @method\n   * @param {*} value Value to be validated.\n   * @param {object} schema Schema containing the `type` keyword.\n   * @param {object} [opts] Configuration options.\n   * @returns {(array|undefined)} Array of errors or `undefined` if valid.\n   */\n  type (value, schema, opts) {\n    let type = schema.type\n    let validType\n    // Can be one of several types\n    if (utils.isString(type)) {\n      type = [type]\n    }\n    // Try to match the value against an expected type\n    type.forEach(function (_type) {\n      // TODO: throw an error if type is not defined\n      if (types[_type](value, schema, opts)) {\n        // Matched a type\n        validType = _type\n        return false\n      }\n    })\n    // Value did not match any expected type\n    if (!validType) {\n      return makeError(value !== undefined && value !== null ? typeof value : '' + value, `one of (${type.join(', ')})`, opts)\n    }\n    // Run keyword validators for matched type\n    // http://json-schema.org/latest/json-schema-validation.html#anchor12\n    const validator = typeGroupValidators[validType]\n    if (validator) {\n      return validator(value, schema, opts)\n    }\n  },\n\n  /**\n   * Validates the provided array values are unique.\n   * Validation succeeds if the items in the array are unique, but only if the value of this keyword is true\n   * see http://json-schema.org/latest/json-schema-validation.html#anchor49\n   *\n   * @name Schema.validationKeywords.uniqueItems\n   * @method\n   * @param {*} value Array to be validated.\n   * @param {object} schema Schema containing the `uniqueItems` keyword.\n   * @param {object} [opts] Configuration options.\n   * @returns {(array|undefined)} Array of errors or `undefined` if valid.\n   */\n  uniqueItems (value, schema, opts) {\n    if (value && value.length && schema.uniqueItems) {\n      const length = value.length\n      let item, i, j\n      // Check n - 1 items\n      for (i = length - 1; i > 0; i--) {\n        item = value[i]\n        // Only compare against unchecked items\n        for (j = i - 1; j >= 0; j--) {\n          // Found a duplicate\n          if (utils.deepEqual(item, value[j])) {\n            return makeError(item, 'no duplicates', opts)\n          }\n        }\n      }\n    }\n  }\n}\n\n/**\n * @ignore\n */\nconst runOps = function (ops, value, schema, opts) {\n  let errors = []\n  ops.forEach(function (op) {\n    if (schema[op] !== undefined) {\n      errors = errors.concat(validationKeywords[op](value, schema, opts) || [])\n    }\n  })\n  return errors.length ? errors : undefined\n}\n\n/**\n * Validation keywords validated for any type:\n *\n * - `enum`\n * - `type`\n * - `allOf`\n * - `anyOf`\n * - `oneOf`\n * - `not`\n *\n * @name Schema.ANY_OPS\n * @type {string[]}\n */\nconst ANY_OPS = ['enum', 'type', 'allOf', 'anyOf', 'oneOf', 'not']\n\n/**\n * Validation keywords validated for array types:\n *\n * - `items`\n * - `maxItems`\n * - `minItems`\n * - `uniqueItems`\n *\n * @name Schema.ARRAY_OPS\n * @type {string[]}\n */\nconst ARRAY_OPS = ['items', 'maxItems', 'minItems', 'uniqueItems']\n\n/**\n * Validation keywords validated for numeric (number and integer) types:\n *\n * - `multipleOf`\n * - `maximum`\n * - `minimum`\n *\n * @name Schema.NUMERIC_OPS\n * @type {string[]}\n */\nconst NUMERIC_OPS = ['multipleOf', 'maximum', 'minimum']\n\n/**\n * Validation keywords validated for object types:\n *\n * - `maxProperties`\n * - `minProperties`\n * - `required`\n * - `properties`\n * - `dependencies`\n *\n * @name Schema.OBJECT_OPS\n * @type {string[]}\n */\nconst OBJECT_OPS = ['maxProperties', 'minProperties', 'required', 'properties', 'dependencies']\n\n/**\n * Validation keywords validated for string types:\n *\n * - `maxLength`\n * - `minLength`\n * - `pattern`\n *\n * @name Schema.STRING_OPS\n * @type {string[]}\n */\nconst STRING_OPS = ['maxLength', 'minLength', 'pattern']\n\n/**\n * http://json-schema.org/latest/json-schema-validation.html#anchor75\n * @ignore\n */\nconst validateAny = function (value, schema, opts) {\n  return runOps(ANY_OPS, value, schema, opts)\n}\n\n/**\n * Validates the provided value against a given Schema according to the http://json-schema.org/ v4 specification.\n *\n * @name Schema.validate\n * @method\n * @param {*} value Value to be validated.\n * @param {object} schema Valid Schema according to the http://json-schema.org/ v4 specification.\n * @param {object} [opts] Configuration options.\n * @returns {(array|undefined)} Array of errors or `undefined` if valid.\n */\nconst validate = function (value, schema, opts) {\n  let errors = []\n  opts || (opts = {})\n  opts.ctx || (opts.ctx = { value, schema })\n  let shouldPop\n  let prevProp = opts.prop\n  if (schema === undefined) {\n    return\n  }\n  if (!utils.isObject(schema)) {\n    throw utils.err(`${DOMAIN}#validate`)(500, `Invalid schema at path: \"${opts.path}\"`)\n  }\n  if (opts.path === undefined) {\n    opts.path = []\n  }\n  // Track our location as we recurse\n  if (opts.prop !== undefined) {\n    shouldPop = true\n    opts.path.push(opts.prop)\n    opts.prop = undefined\n  }\n  // Validate against parent schema\n  if (schema['extends']) {\n    // opts.path = path\n    // opts.prop = prop\n    if (utils.isFunction(schema['extends'].validate)) {\n      errors = errors.concat(schema['extends'].validate(value, opts) || [])\n    } else {\n      errors = errors.concat(validate(value, schema['extends'], opts) || [])\n    }\n  }\n  if (value === undefined) {\n    // Check if property is required\n    if (schema.required === true && !opts.existingOnly) {\n      addError(value, 'a value', opts, errors)\n    }\n    if (shouldPop) {\n      opts.path.pop()\n      opts.prop = prevProp\n    }\n    return errors.length ? errors : undefined\n  }\n\n  errors = errors.concat(validateAny(value, schema, opts) || [])\n  if (shouldPop) {\n    opts.path.pop()\n    opts.prop = prevProp\n  }\n  return errors.length ? errors : undefined\n}\n\n// These strings are cached for optimal performance of the change detection\n// boolean - Whether a Record is changing in the current execution frame\nconst changingPath = 'changing'\n// string[] - Properties that have changed in the current execution frame\nconst changedPath = 'changed'\n// Object[] - History of change records\nconst changeHistoryPath = 'history'\n// boolean - Whether a Record is currently being instantiated\nconst creatingPath = 'creating'\n// number - The setTimeout change event id of a Record, if any\nconst eventIdPath = 'eventId'\n// boolean - Whether to skip validation for a Record's currently changing property\nconst noValidatePath = 'noValidate'\n// boolean - Whether to preserve Change History for a Record\nconst keepChangeHistoryPath = 'keepChangeHistory'\n// boolean - Whether to skip change notification for a Record's currently\n// changing property\nconst silentPath = 'silent'\nconst validationFailureMsg = 'validation failed'\n\n/**\n * A map of validation functions grouped by type.\n *\n * @name Schema.typeGroupValidators\n * @type {object}\n */\nconst typeGroupValidators = {\n  /**\n   * Validates the provided value against the schema using all of the validation keywords specific to instances of an array.\n   * The validation keywords for the type `array` are:\n   *```\n   * ['items', 'maxItems', 'minItems', 'uniqueItems']\n   *```\n   * see http://json-schema.org/latest/json-schema-validation.html#anchor25\n   *\n   * @name Schema.typeGroupValidators.array\n   * @method\n   * @param {*} value Array to be validated.\n   * @param {object} schema Schema containing at least one array keyword.\n   * @param {object} [opts] Configuration options.\n   * @returns {(array|undefined)} Array of errors or `undefined` if valid.\n   */\n  array: function (value, schema, opts) {\n    return runOps(ARRAY_OPS, value, schema, opts)\n  },\n\n  /**\n   * Validates the provided value against the schema using all of the validation keywords specific to instances of an integer.\n   * The validation keywords for the type `integer` are:\n   *```\n   * ['multipleOf', 'maximum', 'minimum']\n   *```\n   * @name Schema.typeGroupValidators.integer\n   * @method\n   * @param {*} value Number to be validated.\n   * @param {object} schema Schema containing at least one `integer` keyword.\n   * @param {object} [opts] Configuration options.\n   * @returns {(array|undefined)} Array of errors or `undefined` if valid.\n   */\n  integer: function (value, schema, opts) {\n    // Additional validations for numerics are the same\n    return typeGroupValidators.numeric(value, schema, opts)\n  },\n\n  /**\n   * Validates the provided value against the schema using all of the validation keywords specific to instances of an number.\n   * The validation keywords for the type `number` are:\n   *```\n   * ['multipleOf', 'maximum', 'minimum']\n   *```\n   * @name Schema.typeGroupValidators.number\n   * @method\n   * @param {*} value Number to be validated.\n   * @param {object} schema Schema containing at least one `number` keyword.\n   * @param {object} [opts] Configuration options.\n   * @returns {(array|undefined)} Array of errors or `undefined` if valid.\n   */\n  number: function (value, schema, opts) {\n    // Additional validations for numerics are the same\n    return typeGroupValidators.numeric(value, schema, opts)\n  },\n\n  /**\n   * Validates the provided value against the schema using all of the validation keywords specific to instances of a number or integer.\n   * The validation keywords for the type `numeric` are:\n   *```\n   * ['multipleOf', 'maximum', 'minimum']\n   *```\n   * See http://json-schema.org/latest/json-schema-validation.html#anchor13.\n   *\n   * @name Schema.typeGroupValidators.numeric\n   * @method\n   * @param {*} value Number to be validated.\n   * @param {object} schema Schema containing at least one `numeric` keyword.\n   * @param {object} [opts] Configuration options.\n   * @returns {(array|undefined)} Array of errors or `undefined` if valid.\n   */\n  numeric: function (value, schema, opts) {\n    return runOps(NUMERIC_OPS, value, schema, opts)\n  },\n\n  /**\n   * Validates the provided value against the schema using all of the validation keywords specific to instances of an object.\n   * The validation keywords for the type `object` are:\n   *```\n   * ['maxProperties', 'minProperties', 'required', 'properties', 'dependencies']\n   *```\n   * See http://json-schema.org/latest/json-schema-validation.html#anchor53.\n   *\n   * @name Schema.typeGroupValidators.object\n   * @method\n   * @param {*} value Object to be validated.\n   * @param {object} schema Schema containing at least one `object` keyword.\n   * @param {object} [opts] Configuration options.\n   * @returns {(array|undefined)} Array of errors or `undefined` if valid.\n   */\n  object: function (value, schema, opts) {\n    return runOps(OBJECT_OPS, value, schema, opts)\n  },\n\n  /**\n   * Validates the provided value against the schema using all of the validation keywords specific to instances of an string.\n   * The validation keywords for the type `string` are:\n   *```\n   * ['maxLength', 'minLength', 'pattern']\n   *```\n   * See http://json-schema.org/latest/json-schema-validation.html#anchor25.\n   *\n   * @name Schema.typeGroupValidators.string\n   * @method\n   * @param {*} value String to be validated.\n   * @param {object} schema Schema containing at least one `string` keyword.\n   * @param {object} [opts] Configuration options.\n   * @returns {(array|undefined)} Array of errors or `undefined` if valid.\n   */\n  string: function (value, schema, opts) {\n    return runOps(STRING_OPS, value, schema, opts)\n  }\n}\n\n/**\n * js-data's Schema class.\n *\n * @example <caption>Schema#constructor</caption>\n * const JSData = require('js-data');\n * const { Schema } = JSData;\n * console.log('Using JSData v' + JSData.version.full);\n *\n * const PostSchema = new Schema({\n *   type: 'object',\n *   properties: {\n *     title: { type: 'string' }\n *   }\n * });\n * PostSchema.validate({ title: 1234 });\n *\n * @class Schema\n * @extends Component\n * @param {object} definition Schema definition according to json-schema.org\n */\nfunction Schema (definition) {\n  definition || (definition = {})\n  // TODO: schema validation\n  utils.fillIn(this, definition)\n\n  if (this.type === 'object') {\n    this.properties = this.properties || {}\n    utils.forOwn(this.properties, (_definition, prop) => {\n      if (!(_definition instanceof Schema)) {\n        this.properties[prop] = new Schema(_definition)\n      }\n    })\n  } else if (this.type === 'array' && this.items && !(this.items instanceof Schema)) {\n    this.items = new Schema(this.items)\n  }\n  if (this.extends && !(this.extends instanceof Schema)) {\n    this.extends = new Schema(this.extends)\n  }\n  ['allOf', 'anyOf', 'oneOf'].forEach((validationKeyword) => {\n    if (this[validationKeyword]) {\n      this[validationKeyword].forEach((_definition, i) => {\n        if (!(_definition instanceof Schema)) {\n          this[validationKeyword][i] = new Schema(_definition)\n        }\n      })\n    }\n  })\n}\n\nexport default Component.extend({\n  constructor: Schema,\n\n  /**\n   * This adds ES5 getters/setters to the target based on the \"properties\" in\n   * this Schema, which makes possible change tracking and validation on\n   * property assignment.\n   *\n   * @name Schema#apply\n   * @method\n   * @param {object} target The prototype to which to apply this schema.\n   */\n  apply (target, opts) {\n    opts || (opts = {})\n    opts.getter || (opts.getter = '_get')\n    opts.setter || (opts.setter = '_set')\n    opts.unsetter || (opts.unsetter = '_unset')\n    opts.track || (opts.track = this.track)\n    const properties = this.properties || {}\n    utils.forOwn(properties, (schema, prop) => {\n      Object.defineProperty(\n        target,\n        prop,\n        this.makeDescriptor(prop, schema, opts)\n      )\n    })\n  },\n\n  /**\n   * Apply default values to the target object for missing values.\n   *\n   * @name Schema#applyDefaults\n   * @method\n   * @param {object} target The target to which to apply values for missing values.\n   */\n  applyDefaults (target) {\n    if (!target) {\n      return\n    }\n    const properties = this.properties || {}\n    const hasSet = utils.isFunction(target.set) || utils.isFunction(target._set)\n    utils.forOwn(properties, function (schema, prop) {\n      if (schema.hasOwnProperty('default') && utils.get(target, prop) === undefined) {\n        if (hasSet) {\n          target.set(prop, utils.plainCopy(schema['default']), { silent: true })\n        } else {\n          utils.set(target, prop, utils.plainCopy(schema['default']))\n        }\n      }\n      if (schema.type === 'object' && schema.properties) {\n        if (hasSet) {\n          const orig = target._get('noValidate')\n          target._set('noValidate', true)\n          utils.set(target, prop, utils.get(target, prop) || {}, { silent: true })\n          target._set('noValidate', orig)\n        } else {\n          utils.set(target, prop, utils.get(target, prop) || {})\n        }\n        schema.applyDefaults(utils.get(target, prop))\n      }\n    })\n  },\n\n  /**\n   * Assemble a property descriptor for tracking and validating changes to\n   * a property according to the given schema. This method is called when\n   * {@link Mapper#applySchema} is set to `true`.\n   *\n   * @name Schema#makeDescriptor\n   * @method\n   * @param {string} prop The property name.\n   * @param {(Schema|object)} schema The schema for the property.\n   * @param {object} [opts] Optional configuration.\n   * @param {function} [opts.getter] Custom getter function.\n   * @param {function} [opts.setter] Custom setter function.\n   * @param {function} [opts.track] Whether to track changes.\n   * @returns {object} A property descriptor for the given schema.\n   */\n  makeDescriptor (prop, schema, opts) {\n    const descriptor = {\n      // Better to allow configurability, but at the user's own risk\n      configurable: true,\n      // These properties are enumerable by default, but regardless of their\n      // enumerability, they won't be \"own\" properties of individual records\n      enumerable: schema.enumerable === undefined ? true : !!schema.enumerable\n    }\n    // Cache a few strings for optimal performance\n    const keyPath = `props.${prop}`\n    const previousPath = `previous.${prop}`\n    const getter = opts.getter\n    const setter = opts.setter\n    const unsetter = opts.unsetter\n    const track = utils.isBoolean(opts.track) ? opts.track : schema.track\n\n    descriptor.get = function () {\n      return this._get(keyPath)\n    }\n\n    if (utils.isFunction(schema.get)) {\n      const originalGet = descriptor.get\n      descriptor.get = function () {\n        return schema.get.call(this, originalGet)\n      }\n    }\n\n    descriptor.set = function (value) {\n      // These are accessed a lot\n      const _get = this[getter]\n      const _set = this[setter]\n      const _unset = this[unsetter]\n      // Optionally check that the new value passes validation\n      if (!_get(noValidatePath)) {\n        const errors = schema.validate(value, { path: [prop] })\n        if (errors) {\n          // Immediately throw an error, preventing the record from getting into\n          // an invalid state\n          const error = new Error(validationFailureMsg)\n          error.errors = errors\n          throw error\n        }\n      }\n      // TODO: Make it so tracking can be turned on for all properties instead of\n      // only per-property\n      if (track && !_get(creatingPath)) {\n        // previous is versioned on database commit\n        // props are versioned on set()\n        const previous = _get(previousPath)\n        const current = _get(keyPath)\n        let changing = _get(changingPath)\n        let changed = _get(changedPath)\n\n        if (!changing) {\n          // Track properties that are changing in the current event loop\n          changed = []\n        }\n\n        // Add changing properties to this array once at most\n        const index = changed.indexOf(prop)\n        if (current !== value && index === -1) {\n          changed.push(prop)\n        }\n        if (previous === value) {\n          if (index >= 0) {\n            changed.splice(index, 1)\n          }\n        }\n        // No changes in current event loop\n        if (!changed.length) {\n          changing = false\n          _unset(changingPath)\n          _unset(changedPath)\n          // Cancel pending change event\n          if (_get(eventIdPath)) {\n            clearTimeout(_get(eventIdPath))\n            _unset(eventIdPath)\n          }\n        }\n        // Changes detected in current event loop\n        if (!changing && changed.length) {\n          _set(changedPath, changed)\n          _set(changingPath, true)\n          // Saving the timeout id allows us to batch all changes in the same\n          // event loop into a single \"change\"\n          // TODO: Optimize\n          _set(eventIdPath, setTimeout(() => {\n            // Previous event loop where changes were gathered has ended, so\n            // notify any listeners of those changes and prepare for any new\n            // changes\n            _unset(changedPath)\n            _unset(eventIdPath)\n            _unset(changingPath)\n            // TODO: Optimize\n            if (!_get(silentPath)) {\n              let i\n              for (i = 0; i < changed.length; i++) {\n                this.emit('change:' + changed[i], this, utils.get(this, changed[i]))\n              }\n\n              const changes = utils.diffObjects({ [prop]: value }, { [prop]: current })\n\n              if (_get(keepChangeHistoryPath)) {\n                const changeRecord = utils.plainCopy(changes)\n                changeRecord.timestamp = new Date().getTime()\n                let changeHistory = _get(changeHistoryPath)\n                !changeHistory && _set(changeHistoryPath, (changeHistory = []))\n                changeHistory.push(changeRecord)\n              }\n              this.emit('change', this, changes)\n            }\n            _unset(silentPath)\n          }, 0))\n        }\n      }\n      _set(keyPath, value)\n      return value\n    }\n\n    if (utils.isFunction(schema.set)) {\n      const originalSet = descriptor.set\n      descriptor.set = function (value) {\n        return schema.set.call(this, value, originalSet)\n      }\n    }\n\n    return descriptor\n  },\n\n  /**\n   * Create a copy of the given value that contains only the properties defined\n   * in this schema.\n   *\n   * @name Schema#pick\n   * @method\n   * @param {*} value The value to copy.\n   * @returns {*} The copy.\n   */\n  pick (value) {\n    if (value === undefined) {\n      return\n    }\n    if (this.type === 'object') {\n      let copy = {}\n      const properties = this.properties\n      if (properties) {\n        utils.forOwn(properties, (_definition, prop) => {\n          copy[prop] = _definition.pick(value[prop])\n        })\n      }\n      if (this.extends) {\n        utils.fillIn(copy, this.extends.pick(value))\n      }\n      // Conditionally copy properties not defined in \"properties\"\n      if (this.additionalProperties) {\n        for (var key in value) {\n          if (!properties[key]) {\n            copy[key] = utils.plainCopy(value[key])\n          }\n        }\n      }\n      return copy\n    } else if (this.type === 'array') {\n      return value.map((item) => {\n        const _copy = this.items ? this.items.pick(item) : {}\n        if (this.extends) {\n          utils.fillIn(_copy, this.extends.pick(item))\n        }\n        return _copy\n      })\n    }\n    return utils.plainCopy(value)\n  },\n\n  /**\n   * Validate the provided value against this schema.\n   *\n   * @name Schema#validate\n   * @method\n   * @param {*} value Value to validate.\n   * @param {object} [opts] Configuration options.\n   * @returns {(array|undefined)} Array of errors or `undefined` if valid.\n   */\n  validate (value, opts) {\n    return validate(value, this, opts)\n  }\n}, {\n  ANY_OPS,\n  ARRAY_OPS,\n  NUMERIC_OPS,\n  OBJECT_OPS,\n  STRING_OPS,\n  typeGroupValidators,\n  types,\n  validate,\n  validationKeywords\n})\n\n/**\n * Create a subclass of this Schema:\n * @example <caption>Schema.extend</caption>\n * const JSData = require('js-data');\n * const { Schema } = JSData;\n * console.log('Using JSData v' + JSData.version.full);\n *\n * // Extend the class using ES2015 class syntax.\n * class CustomSchemaClass extends Schema {\n *   foo () { return 'bar'; }\n *   static beep () { return 'boop'; }\n * }\n * const customSchema = new CustomSchemaClass();\n * console.log(customSchema.foo());\n * console.log(CustomSchemaClass.beep());\n *\n * // Extend the class using alternate method.\n * const OtherSchemaClass = Schema.extend({\n *   foo () { return 'bar'; }\n * }, {\n *   beep () { return 'boop'; }\n * });\n * const otherSchema = new OtherSchemaClass();\n * console.log(otherSchema.foo());\n * console.log(OtherSchemaClass.beep());\n *\n * // Extend the class, providing a custom constructor.\n * function AnotherSchemaClass () {\n *   Schema.call(this);\n *   this.created_at = new Date().getTime();\n * }\n * Schema.extend({\n *   constructor: AnotherSchemaClass,\n *   foo () { return 'bar'; }\n * }, {\n *   beep () { return 'boop'; }\n * });\n * const anotherSchema = new AnotherSchemaClass();\n * console.log(anotherSchema.created_at);\n * console.log(anotherSchema.foo());\n * console.log(AnotherSchemaClass.beep());\n *\n * @method Schema.extend\n * @param {object} [props={}] Properties to add to the prototype of the\n * subclass.\n * @param {object} [props.constructor] Provide a custom constructor function\n * to be used as the subclass itself.\n * @param {object} [classProps={}] Static properties to add to the subclass.\n * @returns {Constructor} Subclass of this Schema class.\n * @since 3.0.0\n */\n","import utils from './utils'\nimport Component from './Component'\nimport Record from './Record'\nimport Schema from './Schema'\nimport { Relation } from './relations'\nimport {\n  belongsTo,\n  belongsToType,\n  hasMany,\n  hasManyType,\n  hasOne,\n  hasOneType\n} from './decorators'\n\nconst DOMAIN = 'Mapper'\nconst applyDefaultsHooks = [\n  'beforeCreate',\n  'beforeCreateMany'\n]\nconst validatingHooks = [\n  'beforeCreate',\n  'beforeCreateMany',\n  'beforeUpdate',\n  'beforeUpdateAll',\n  'beforeUpdateMany'\n]\nconst makeNotify = function (num) {\n  return function (...args) {\n    const opts = args[args.length - num]\n    const op = opts.op\n    this.dbg(op, ...args)\n\n    if (applyDefaultsHooks.indexOf(op) !== -1 && opts.applyDefaults !== false) {\n      const schema = this.getSchema()\n      if (schema && schema.applyDefaults) {\n        let toProcess = args[0]\n        if (!utils.isArray(toProcess)) {\n          toProcess = [toProcess]\n        }\n        toProcess.forEach((record) => {\n          schema.applyDefaults(record)\n        })\n      }\n    }\n\n    // Automatic validation\n    if (validatingHooks.indexOf(op) !== -1 && !opts.noValidate) {\n      // Save current value of option\n      const originalExistingOnly = opts.existingOnly\n\n      // For updates, ignore required fields if they aren't present\n      if (op.indexOf('beforeUpdate') === 0 && opts.existingOnly === undefined) {\n        opts.existingOnly = true\n      }\n      const errors = this.validate(args[op === 'beforeUpdate' ? 1 : 0], utils.pick(opts, ['existingOnly']))\n\n      // Restore option\n      opts.existingOnly = originalExistingOnly\n\n      // Abort lifecycle due to validation errors\n      if (errors) {\n        const err = new Error('validation failed')\n        err.errors = errors\n        return utils.reject(err)\n      }\n    }\n\n    // Emit lifecycle event\n    if (opts.notify || (opts.notify === undefined && this.notify)) {\n      setTimeout(() => {\n        this.emit(op, ...args)\n      })\n    }\n  }\n}\n\n// These are the default implementations of all of the lifecycle hooks\nconst notify = makeNotify(1)\nconst notify2 = makeNotify(2)\n\n// This object provides meta information used by Mapper#crud to actually\n// execute each lifecycle method\nconst LIFECYCLE_METHODS = {\n  count: {\n    defaults: [{}, {}],\n    skip: true,\n    types: []\n  },\n  destroy: {\n    defaults: [{}, {}],\n    skip: true,\n    types: []\n  },\n  destroyAll: {\n    defaults: [{}, {}],\n    skip: true,\n    types: []\n  },\n  find: {\n    defaults: [undefined, {}],\n    types: []\n  },\n  findAll: {\n    defaults: [{}, {}],\n    types: []\n  },\n  sum: {\n    defaults: [undefined, {}, {}],\n    skip: true,\n    types: []\n  },\n  update: {\n    adapterArgs (mapper, id, props, opts) {\n      return [id, mapper.toJSON(props, opts), opts]\n    },\n    beforeAssign: 1,\n    defaults: [undefined, {}, {}],\n    types: []\n  },\n  updateAll: {\n    adapterArgs (mapper, props, query, opts) {\n      return [mapper.toJSON(props, opts), query, opts]\n    },\n    beforeAssign: 0,\n    defaults: [{}, {}, {}],\n    types: []\n  },\n  updateMany: {\n    adapterArgs (mapper, records, opts) {\n      return [records.map((record) => mapper.toJSON(record, opts)), opts]\n    },\n    beforeAssign: 0,\n    defaults: [[], {}],\n    types: []\n  }\n}\n\nconst MAPPER_DEFAULTS = {\n  /**\n   * Hash of registered adapters. Don't modify directly. Use\n   * {@link Mapper#registerAdapter} instead.\n   *\n   * @default {}\n   * @name Mapper#_adapters\n   * @since 3.0.0\n   * @tutorial [\"http://www.js-data.io/v3.0/docs/connecting-to-a-data-source\",\"Connecting to a data source\"]\n   */\n  _adapters: {},\n\n  /**\n   * Whether {@link Mapper#beforeCreate} and {@link Mapper#beforeCreateMany}\n   * should automatically receive default values according to the Mapper's schema.\n   *\n   * @default true\n   * @name Mapper#applyDefaults\n   * @since 3.0.0\n   * @type {boolean}\n   */\n  applyDefaults: true,\n\n  /**\n   * Whether to augment {@link Mapper#recordClass} with ES5 getters and setters\n   * according to the properties defined in {@link Mapper#schema}. This makes\n   * possible validation and change tracking on individual properties\n   * when using the dot (e.g. `user.name = \"Bob\"`) operator to modify a\n   * property, and is `true` by default.\n   *\n   * @default true\n   * @name Mapper#applySchema\n   * @since 3.0.0\n   * @type {boolean}\n   */\n  applySchema: true,\n\n  /**\n   * The name of the registered adapter that this Mapper should used by default.\n   *\n   * @default \"http\"\n   * @name Mapper#defaultAdapter\n   * @since 3.0.0\n   * @tutorial [\"http://www.js-data.io/v3.0/docs/connecting-to-a-data-source\",\"Connecting to a data source\"]\n   * @type {string}\n   */\n  defaultAdapter: 'http',\n\n  /**\n   * The field used as the unique identifier on records handled by this Mapper.\n   *\n   * @default id\n   * @name Mapper#idAttribute\n   * @since 3.0.0\n   * @type {string}\n   */\n  idAttribute: 'id',\n\n  /**\n   * Whether records created from this mapper keep changeHistory on property changes.\n   *\n   * @default true\n   * @name Mapper#keepChangeHistory\n   * @since 3.0.0\n   * @type {boolean}\n   */\n  keepChangeHistory: true,\n\n  /**\n   * Whether this Mapper should emit operational events.\n   *\n   * @default true\n   * @name Mapper#notify\n   * @since 3.0.0\n   * @type {boolean}\n   */\n  notify: true,\n\n  /**\n   * Whether to skip validation when the Record instances are created.\n   *\n   * @default false\n   * @name Mapper#noValidate\n   * @since 3.0.0\n   * @type {boolean}\n   */\n  noValidate: false,\n\n  /**\n   * Whether {@link Mapper#create}, {@link Mapper#createMany},\n   * {@link Mapper#update}, {@link Mapper#updateAll}, {@link Mapper#updateMany},\n   * {@link Mapper#find}, {@link Mapper#findAll}, {@link Mapper#destroy},\n   * {@link Mapper#destroyAll}, {@link Mapper#count}, and {@link Mapper#sum}\n   * should return a raw result object that contains both the instance data\n   * returned by the adapter _and_ metadata about the operation.\n   *\n   * The default is to NOT return the result object, and instead return just the\n   * instance data.\n   *\n   * @default false\n   * @name Mapper#raw\n   * @since 3.0.0\n   * @type {boolean}\n   */\n  raw: false,\n\n  /**\n   * Whether records created from this mapper automatically validate their properties\n   * when their properties are modified.\n   *\n   * @default true\n   * @name Mapper#validateOnSet\n   * @since 3.0.0\n   * @type {boolean}\n   */\n  validateOnSet: true\n}\n\n/**\n * The core of JSData's [ORM/ODM][orm] implementation. Given a minimum amout of\n * meta information about a resource, a Mapper can perform generic CRUD\n * operations against that resource. Apart from its configuration, a Mapper is\n * stateless. The particulars of various persistence layers have been abstracted\n * into adapters, which a Mapper uses to perform its operations.\n *\n * The term \"Mapper\" comes from the [Data Mapper Pattern][pattern] described in\n * Martin Fowler's [Patterns of Enterprise Application Architecture][book]. A\n * Data Mapper moves data between [in-memory object instances][record] and a\n * relational or document-based database. JSData's Mapper can work with any\n * persistence layer you can write an adapter for.\n *\n * _(\"Model\" is a heavily overloaded term and is avoided in this documentation\n * to prevent confusion.)_\n *\n * [orm]: https://en.wikipedia.org/wiki/Object-relational_mapping\n *\n * @example\n * [pattern]: https://en.wikipedia.org/wiki/Data_mapper_pattern\n * [book]: http://martinfowler.com/books/eaa.html\n * [record]: Record.html\n * // Import and instantiate\n * import { Mapper } from 'js-data';\n * const UserMapper = new Mapper({ name: 'user' });\n *\n * @example\n * // Define a Mapper using the Container component\n * import { Container } from 'js-data';\n * const store = new Container();\n * store.defineMapper('user');\n *\n * @class Mapper\n * @extends Component\n * @param {object} opts Configuration options.\n * @param {boolean} [opts.applySchema=true] See {@link Mapper#applySchema}.\n * @param {boolean} [opts.debug=false] See {@link Component#debug}.\n * @param {string} [opts.defaultAdapter=http] See {@link Mapper#defaultAdapter}.\n * @param {string} [opts.idAttribute=id] See {@link Mapper#idAttribute}.\n * @param {object} [opts.methods] See {@link Mapper#methods}.\n * @param {string} opts.name See {@link Mapper#name}.\n * @param {boolean} [opts.notify] See {@link Mapper#notify}.\n * @param {boolean} [opts.raw=false] See {@link Mapper#raw}.\n * @param {Function|boolean} [opts.recordClass] See {@link Mapper#recordClass}.\n * @param {Object|Schema} [opts.schema] See {@link Mapper#schema}.\n * @returns {Mapper} A new {@link Mapper} instance.\n * @see http://www.js-data.io/v3.0/docs/components-of-jsdata#mapper\n * @since 3.0.0\n * @tutorial [\"http://www.js-data.io/v3.0/docs/components-of-jsdata#mapper\",\"Components of JSData: Mapper\"]\n * @tutorial [\"http://www.js-data.io/v3.0/docs/modeling-your-data\",\"Modeling your data\"]\n */\nfunction Mapper (opts) {\n  utils.classCallCheck(this, Mapper)\n  Component.call(this)\n  opts || (opts = {})\n\n  // Prepare certain properties to be non-enumerable\n  Object.defineProperties(this, {\n    _adapters: {\n      value: undefined,\n      writable: true\n    },\n\n    /**\n     * The {@link Container} that holds this Mapper. __Do not modify.__\n     *\n     * @name Mapper#lifecycleMethods\n     * @since 3.0.0\n     * @type {Object}\n     */\n    datastore: {\n      value: undefined,\n      writable: true\n    },\n\n    /**\n     * The meta information describing this Mapper's available lifecycle\n     * methods. __Do not modify.__\n     *\n     * @name Mapper#lifecycleMethods\n     * @since 3.0.0\n     * @type {Object}\n     */\n    lifecycleMethods: {\n      value: LIFECYCLE_METHODS\n    },\n\n    /**\n     * Set to `false` to force the Mapper to work with POJO objects only.\n     *\n     * @example\n     * // Use POJOs only.\n     * import { Mapper, Record } from 'js-data';\n     * const UserMapper = new Mapper({ recordClass: false });\n     * UserMapper.recordClass // false;\n     * const user = UserMapper.createRecord();\n     * user instanceof Record; // false\n     *\n     * @example\n     * // Set to a custom class to have records wrapped in your custom class.\n     * import { Mapper, Record } from 'js-data';\n     *  // Custom class\n     * class User {\n     *   constructor (props = {}) {\n     *     for (var key in props) {\n     *       if (props.hasOwnProperty(key)) {\n     *         this[key] = props[key];\n     *       }\n     *     }\n     *   }\n     * }\n     * const UserMapper = new Mapper({ recordClass: User });\n     * UserMapper.recordClass; // function User() {}\n     * const user = UserMapper.createRecord();\n     * user instanceof Record; // false\n     * user instanceof User; // true\n     *\n     *\n     * @example\n     * // Extend the {@link Record} class.\n     * import { Mapper, Record } from 'js-data';\n     *  // Custom class\n     * class User extends Record {\n     *   constructor () {\n     *     super(props);\n     *   }\n     * }\n     * const UserMapper = new Mapper({ recordClass: User });\n     * UserMapper.recordClass; // function User() {}\n     * const user = UserMapper.createRecord();\n     * user instanceof Record; // true\n     * user instanceof User; // true\n     *\n     * @name Mapper#recordClass\n     * @default {@link Record}\n     * @see Record\n     * @since 3.0.0\n     */\n    recordClass: {\n      value: undefined,\n      writable: true\n    },\n\n    /**\n     * This Mapper's {@link Schema}.\n     *\n     * @example <caption>Mapper#schema</caption>\n     * const JSData = require('js-data');\n     * const { Mapper } = JSData;\n     * console.log('Using JSData v' + JSData.version.full);\n     *\n     * const UserMapper = new Mapper({\n     *   name: 'user',\n     *   schema: {\n     *     properties: {\n     *       id: { type: 'number' },\n     *       first: { type: 'string', track: true },\n     *       last: { type: 'string', track: true },\n     *       role: { type: 'string', track: true, required: true },\n     *       age: { type: 'integer', track: true },\n     *       is_active: { type: 'number' }\n     *     }\n     *   }\n     * });\n     * const user = UserMapper.createRecord({\n     *   id: 1,\n     *   name: 'John',\n     *   role: 'admin'\n     * });\n     * user.on('change', function (user, changes) {\n     *   console.log(changes);\n     * });\n     * user.on('change:role', function (user, value) {\n     *   console.log('change:role - ' + value);\n     * });\n     * user.role = 'owner';\n     *\n     * @name Mapper#schema\n     * @see Schema\n     * @since 3.0.0\n     * @type {Schema}\n     */\n    schema: {\n      value: undefined,\n      writable: true\n    }\n  })\n\n  // Apply user-provided configuration\n  utils.fillIn(this, opts)\n  // Fill in any missing options with the defaults\n  utils.fillIn(this, utils.copy(MAPPER_DEFAULTS))\n\n  /**\n   * The name for this Mapper. This is the minimum amount of meta information\n   * required for a Mapper to be able to execute CRUD operations for a\n   * Resource.\n   *\n   * @name Mapper#name\n   * @since 3.0.0\n   * @type {string}\n   */\n  if (!this.name) {\n    throw utils.err(`new ${DOMAIN}`, 'opts.name')(400, 'string', this.name)\n  }\n\n  // Setup schema, with an empty default schema if necessary\n  if (this.schema) {\n    this.schema.type || (this.schema.type = 'object')\n    if (!(this.schema instanceof Schema)) {\n      this.schema = new Schema(this.schema || { type: 'object' })\n    }\n  }\n\n  // Create a subclass of Record that's tied to this Mapper\n  if (this.recordClass === undefined) {\n    const superClass = Record\n    this.recordClass = superClass.extend({\n      constructor: (function Record () {\n        var subClass = function Record (props, opts) {\n          utils.classCallCheck(this, subClass)\n          superClass.call(this, props, opts)\n        }\n        return subClass\n      })()\n    })\n  }\n\n  if (this.recordClass) {\n    this.recordClass.mapper = this\n\n    /**\n     * Functions that should be added to the prototype of {@link Mapper#recordClass}.\n     *\n     * @name Mapper#methods\n     * @since 3.0.0\n     * @type {Object}\n     */\n    if (utils.isObject(this.methods)) {\n      utils.addHiddenPropsToTarget(this.recordClass.prototype, this.methods)\n    }\n\n    // We can only apply the schema to the prototype of this.recordClass if the\n    // class extends Record\n    if (Record.prototype.isPrototypeOf(Object.create(this.recordClass.prototype)) && this.schema && this.schema.apply && this.applySchema) {\n      this.schema.apply(this.recordClass.prototype)\n    }\n  }\n}\n\nexport default Component.extend({\n  constructor: Mapper,\n\n  /**\n   * Mapper lifecycle hook called by {@link Mapper#count}. If this method\n   * returns a promise then {@link Mapper#count} will wait for the promise\n   * to resolve before continuing.\n   *\n   * @method Mapper#afterCount\n   * @param {object} query The `query` argument passed to {@link Mapper#count}.\n   * @param {object} opts The `opts` argument passed to {@link Mapper#count}.\n   * @param {*} result The result, if any.\n   * @since 3.0.0\n   */\n  afterCount: notify2,\n\n  /**\n   * Mapper lifecycle hook called by {@link Mapper#create}. If this method\n   * returns a promise then {@link Mapper#create} will wait for the promise\n   * to resolve before continuing.\n   *\n   * @method Mapper#afterCreate\n   * @param {object} props The `props` argument passed to {@link Mapper#create}.\n   * @param {object} opts The `opts` argument passed to {@link Mapper#create}.\n   * @param {*} result The result, if any.\n   * @since 3.0.0\n   */\n  afterCreate: notify2,\n\n  /**\n   * Mapper lifecycle hook called by {@link Mapper#createMany}. If this method\n   * returns a promise then {@link Mapper#createMany} will wait for the promise\n   * to resolve before continuing.\n   *\n   * @method Mapper#afterCreateMany\n   * @param {array} records The `records` argument passed to {@link Mapper#createMany}.\n   * @param {object} opts The `opts` argument passed to {@link Mapper#createMany}.\n   * @param {*} result The result, if any.\n   * @since 3.0.0\n   */\n  afterCreateMany: notify2,\n\n  /**\n   * Mapper lifecycle hook called by {@link Mapper#destroy}. If this method\n   * returns a promise then {@link Mapper#destroy} will wait for the promise\n   * to resolve before continuing.\n   *\n   * @method Mapper#afterDestroy\n   * @param {(string|number)} id The `id` argument passed to {@link Mapper#destroy}.\n   * @param {object} opts The `opts` argument passed to {@link Mapper#destroy}.\n   * @param {*} result The result, if any.\n   * @since 3.0.0\n   */\n  afterDestroy: notify2,\n\n  /**\n   * Mapper lifecycle hook called by {@link Mapper#destroyAll}. If this method\n   * returns a promise then {@link Mapper#destroyAll} will wait for the promise\n   * to resolve before continuing.\n   *\n   * @method Mapper#afterDestroyAll\n   * @param {*} data The `data` returned by the adapter.\n   * @param {query} query The `query` argument passed to {@link Mapper#destroyAll}.\n   * @param {object} opts The `opts` argument passed to {@link Mapper#destroyAll}.\n   * @param {*} result The result, if any.\n   * @since 3.0.0\n   */\n  afterDestroyAll: notify2,\n\n  /**\n   * Mapper lifecycle hook called by {@link Mapper#find}. If this method\n   * returns a promise then {@link Mapper#find} will wait for the promise\n   * to resolve before continuing.\n   *\n   * @method Mapper#afterFind\n   * @param {(string|number)} id The `id` argument passed to {@link Mapper#find}.\n   * @param {object} opts The `opts` argument passed to {@link Mapper#find}.\n   * @param {*} result The result, if any.\n   * @since 3.0.0\n   */\n  afterFind: notify2,\n\n  /**\n   * Mapper lifecycle hook called by {@link Mapper#findAll}. If this method\n   * returns a promise then {@link Mapper#findAll} will wait for the promise\n   * to resolve before continuing.\n   *\n   * @method Mapper#afterFindAll\n   * @param {object} query The `query` argument passed to {@link Mapper#findAll}.\n   * @param {object} opts The `opts` argument passed to {@link Mapper#findAll}.\n   * @param {*} result The result, if any.\n   * @since 3.0.0\n   */\n  afterFindAll: notify2,\n\n  /**\n   * Mapper lifecycle hook called by {@link Mapper#sum}. If this method\n   * returns a promise then {@link Mapper#sum} will wait for the promise\n   * to resolve before continuing.\n   *\n   * @method Mapper#afterSum\n   * @param {object} query The `query` argument passed to {@link Mapper#sum}.\n   * @param {object} opts The `opts` argument passed to {@link Mapper#sum}.\n   * @param {*} result The result, if any.\n   * @since 3.0.0\n   */\n  afterSum: notify2,\n\n  /**\n   * Mapper lifecycle hook called by {@link Mapper#update}. If this method\n   * returns a promise then {@link Mapper#update} will wait for the promise\n   * to resolve before continuing.\n   *\n   * @method Mapper#afterUpdate\n   * @param {(string|number)} id The `id` argument passed to {@link Mapper#update}.\n   * @param {props} props The `props` argument passed to {@link Mapper#update}.\n   * @param {object} opts The `opts` argument passed to {@link Mapper#update}.\n   * @param {*} result The result, if any.\n   * @since 3.0.0\n   */\n  afterUpdate: notify2,\n\n  /**\n   * Mapper lifecycle hook called by {@link Mapper#updateAll}. If this method\n   * returns a promise then {@link Mapper#updateAll} will wait for the promise\n   * to resolve before continuing.\n   *\n   * @method Mapper#afterUpdateAll\n   * @param {object} props The `props` argument passed to {@link Mapper#updateAll}.\n   * @param {object} query The `query` argument passed to {@link Mapper#updateAll}.\n   * @param {object} opts The `opts` argument passed to {@link Mapper#updateAll}.\n   * @param {*} result The result, if any.\n   * @since 3.0.0\n   */\n  afterUpdateAll: notify2,\n\n  /**\n   * Mapper lifecycle hook called by {@link Mapper#updateMany}. If this method\n   * returns a promise then {@link Mapper#updateMany} will wait for the promise\n   * to resolve before continuing.\n   *\n   * @method Mapper#afterUpdateMany\n   * @param {array} records The `records` argument passed to {@link Mapper#updateMany}.\n   * @param {object} opts The `opts` argument passed to {@link Mapper#updateMany}.\n   * @param {*} result The result, if any.\n   * @since 3.0.0\n   */\n  afterUpdateMany: notify2,\n\n  /**\n   * Mapper lifecycle hook called by {@link Mapper#create}. If this method\n   * returns a promise then {@link Mapper#create} will wait for the promise\n   * to resolve before continuing.\n   *\n   * @method Mapper#beforeCreate\n   * @param {object} props The `props` argument passed to {@link Mapper#create}.\n   * @param {object} opts The `opts` argument passed to {@link Mapper#create}.\n   * @since 3.0.0\n   */\n  beforeCreate: notify,\n\n  /**\n   * Mapper lifecycle hook called by {@link Mapper#createMany}. If this method\n   * returns a promise then {@link Mapper#createMany} will wait for the promise\n   * to resolve before continuing.\n   *\n   * @method Mapper#beforeCreateMany\n   * @param {array} records The `records` argument passed to {@link Mapper#createMany}.\n   * @param {object} opts The `opts` argument passed to {@link Mapper#createMany}.\n   * @since 3.0.0\n   */\n  beforeCreateMany: notify,\n\n  /**\n   * Mapper lifecycle hook called by {@link Mapper#count}. If this method\n   * returns a promise then {@link Mapper#count} will wait for the promise\n   * to resolve before continuing.\n   *\n   * @method Mapper#beforeCount\n   * @param {object} query The `query` argument passed to {@link Mapper#count}.\n   * @param {object} opts The `opts` argument passed to {@link Mapper#count}.\n   * @since 3.0.0\n   */\n  beforeCount: notify,\n\n  /**\n   * Mapper lifecycle hook called by {@link Mapper#destroy}. If this method\n   * returns a promise then {@link Mapper#destroy} will wait for the promise\n   * to resolve before continuing.\n   *\n   * @method Mapper#beforeDestroy\n   * @param {(string|number)} id The `id` argument passed to {@link Mapper#destroy}.\n   * @param {object} opts The `opts` argument passed to {@link Mapper#destroy}.\n   * @since 3.0.0\n   */\n  beforeDestroy: notify,\n\n  /**\n   * Mapper lifecycle hook called by {@link Mapper#destroyAll}. If this method\n   * returns a promise then {@link Mapper#destroyAll} will wait for the promise\n   * to resolve before continuing.\n   *\n   * @method Mapper#beforeDestroyAll\n   * @param {query} query The `query` argument passed to {@link Mapper#destroyAll}.\n   * @param {object} opts The `opts` argument passed to {@link Mapper#destroyAll}.\n   * @since 3.0.0\n   */\n  beforeDestroyAll: notify,\n\n  /**\n   * Mappers lifecycle hook called by {@link Mapper#find}. If this method\n   * returns a promise then {@link Mapper#find} will wait for the promise\n   * to resolve before continuing.\n   *\n   * @method Mapper#beforeFind\n   * @param {(string|number)} id The `id` argument passed to {@link Mapper#find}.\n   * @param {object} opts The `opts` argument passed to {@link Mapper#find}.\n   * @since 3.0.0\n   */\n  beforeFind: notify,\n\n  /**\n   * Mapper lifecycle hook called by {@link Mapper#findAll}. If this method\n   * returns a promise then {@link Mapper#findAll} will wait for the promise\n   * to resolve before continuing.\n   *\n   * @method Mapper#beforeFindAll\n   * @param {object} query The `query` argument passed to {@link Mapper#findAll}.\n   * @param {object} opts The `opts` argument passed to {@link Mapper#findAll}.\n   * @since 3.0.0\n   */\n  beforeFindAll: notify,\n\n  /**\n   * Mapper lifecycle hook called by {@link Mapper#sum}. If this method\n   * returns a promise then {@link Mapper#sum} will wait for the promise\n   * to resolve before continuing.\n   *\n   * @method Mapper#beforeSum\n   * @param {string} field The `field` argument passed to {@link Mapper#sum}.\n   * @param {object} query The `query` argument passed to {@link Mapper#sum}.\n   * @param {object} opts The `opts` argument passed to {@link Mapper#sum}.\n   * @since 3.0.0\n   */\n  beforeSum: notify,\n\n  /**\n   * Mapper lifecycle hook called by {@link Mapper#update}. If this method\n   * returns a promise then {@link Mapper#update} will wait for the promise\n   * to resolve before continuing.\n   *\n   * @method Mapper#beforeUpdate\n   * @param {(string|number)} id The `id` argument passed to {@link Mapper#update}.\n   * @param {props} props The `props` argument passed to {@link Mapper#update}.\n   * @param {object} opts The `opts` argument passed to {@link Mapper#update}.\n   * @since 3.0.0\n   */\n  beforeUpdate: notify,\n\n  /**\n   * Mapper lifecycle hook called by {@link Mapper#updateAll}. If this method\n   * returns a promise then {@link Mapper#updateAll} will wait for the promise\n   * to resolve before continuing.\n   *\n   * @method Mapper#beforeUpdateAll\n   * @param {object} props The `props` argument passed to {@link Mapper#updateAll}.\n   * @param {object} query The `query` argument passed to {@link Mapper#updateAll}.\n   * @param {object} opts The `opts` argument passed to {@link Mapper#updateAll}.\n   * @since 3.0.0\n   */\n  beforeUpdateAll: notify,\n\n  /**\n   * Mapper lifecycle hook called by {@link Mapper#updateMany}. If this method\n   * returns a promise then {@link Mapper#updateMany} will wait for the promise\n   * to resolve before continuing.\n   *\n   * @method Mapper#beforeUpdateMany\n   * @param {array} records The `records` argument passed to {@link Mapper#updateMany}.\n   * @param {object} opts The `opts` argument passed to {@link Mapper#updateMany}.\n   * @since 3.0.0\n   */\n  beforeUpdateMany: notify,\n\n  /**\n   * This method is called at the end of most lifecycle methods. It does the\n   * following:\n   *\n   * 1. If `opts.raw` is `true`, add this Mapper's configuration to the `opts`\n   * argument as metadata for the operation.\n   * 2. Wrap the result data appropriately using {@link Mapper#wrap}, which\n   * calls {@link Mapper#createRecord}.\n   *\n   * @method Mapper#_end\n   * @private\n   * @since 3.0.0\n   */\n  _end (result, opts, skip) {\n    if (opts.raw) {\n      utils._(result, opts)\n    }\n    if (skip) {\n      return result\n    }\n    let _data = opts.raw ? result.data : result\n    if (_data && utils.isFunction(this.wrap)) {\n      _data = this.wrap(_data, opts)\n      if (opts.raw) {\n        result.data = _data\n      } else {\n        result = _data\n      }\n    }\n    return result\n  },\n\n  /**\n   * Define a belongsTo relationship. Only useful if you're managing your\n   * Mappers manually and not using a Container or DataStore component.\n   *\n   * @example\n   * PostMapper.belongsTo(UserMapper, {\n   *   // post.user_id points to user.id\n   *   foreignKey: 'user_id'\n   *   // user records will be attached to post records at \"post.user\"\n   *   localField: 'user'\n   * });\n   *\n   * CommentMapper.belongsTo(UserMapper, {\n   *   // comment.user_id points to user.id\n   *   foreignKey: 'user_id'\n   *   // user records will be attached to comment records at \"comment.user\"\n   *   localField: 'user'\n   * });\n   * CommentMapper.belongsTo(PostMapper, {\n   *   // comment.post_id points to post.id\n   *   foreignKey: 'post_id'\n   *   // post records will be attached to comment records at \"comment.post\"\n   *   localField: 'post'\n   * });\n   *\n   * @method Mapper#belongsTo\n   * @see http://www.js-data.io/v3.0/docs/relations\n   * @since 3.0.0\n   */\n  belongsTo (relatedMapper, opts) {\n    return belongsTo(relatedMapper, opts)(this)\n  },\n\n  /**\n   * Select records according to the `query` argument and return the count.\n   *\n   * {@link Mapper#beforeCount} will be called before calling the adapter.\n   * {@link Mapper#afterCount} will be called after calling the adapter.\n   *\n   * @example\n   * // Get the number of published blog posts\n   * PostMapper.count({ status: 'published' }).then((numPublished) => {\n   *   console.log(numPublished); // e.g. 45\n   * });\n   *\n   * @method Mapper#count\n   * @param {object} [query={}] Selection query. See {@link query}.\n   * @param {object} [query.where] See {@link query.where}.\n   * @param {number} [query.offset] See {@link query.offset}.\n   * @param {number} [query.limit] See {@link query.limit}.\n   * @param {string|Array[]} [query.orderBy] See {@link query.orderBy}.\n   * @param {object} [opts] Configuration options. Refer to the `count` method\n   * of whatever adapter you're using for more configuration options.\n   * @param {boolean} [opts.adapter={@link Mapper#defaultAdapter}] Name of the\n   * adapter to use.\n   * @param {boolean} [opts.notify={@link Mapper#notify}] See {@link Mapper#notify}.\n   * @param {boolean} [opts.raw={@link Mapper#raw}] See {@link Mapper#raw}.\n   * @returns {Promise} Resolves with the count of the selected records.\n   * @since 3.0.0\n   */\n  count (query, opts) {\n    return this.crud('count', query, opts)\n  },\n\n  /**\n   * Fired during {@link Mapper#create}. See\n   * {@link Mapper~beforeCreateListener} for how to listen for this event.\n   *\n   * @event Mapper#beforeCreate\n   * @see Mapper~beforeCreateListener\n   * @see Mapper#create\n   */\n  /**\n   * Callback signature for the {@link Mapper#event:beforeCreate} event.\n   *\n   * @example\n   * function onBeforeCreate (props, opts) {\n   *   // do something\n   * }\n   * store.on('beforeCreate', onBeforeCreate);\n   *\n   * @callback Mapper~beforeCreateListener\n   * @param {object} props The `props` argument passed to {@link Mapper#beforeCreate}.\n   * @param {object} opts The `opts` argument passed to {@link Mapper#beforeCreate}.\n   * @see Mapper#event:beforeCreate\n   * @see Mapper#create\n   * @since 3.0.0\n   */\n  /**\n   * Fired during {@link Mapper#create}. See\n   * {@link Mapper~afterCreateListener} for how to listen for this event.\n   *\n   * @event Mapper#afterCreate\n   * @see Mapper~afterCreateListener\n   * @see Mapper#create\n   */\n  /**\n   * Callback signature for the {@link Mapper#event:afterCreate} event.\n   *\n   * @example\n   * function onAfterCreate (props, opts, result) {\n   *   // do something\n   * }\n   * store.on('afterCreate', onAfterCreate);\n   *\n   * @callback Mapper~afterCreateListener\n   * @param {object} props The `props` argument passed to {@link Mapper#afterCreate}.\n   * @param {object} opts The `opts` argument passed to {@link Mapper#afterCreate}.\n   * @param {object} result The `result` argument passed to {@link Mapper#afterCreate}.\n   * @see Mapper#event:afterCreate\n   * @see Mapper#create\n   * @since 3.0.0\n   */\n  /**\n   * Create and save a new the record using the provided `props`.\n   *\n   * {@link Mapper#beforeCreate} will be called before calling the adapter.\n   * {@link Mapper#afterCreate} will be called after calling the adapter.\n   *\n   * @example\n   * // Create and save a new blog post\n   * PostMapper.create({\n   *   title: 'Modeling your data',\n   *   status: 'draft'\n   * }).then((post) => {\n   *   console.log(post); // { id: 1234, status: 'draft', ... }\n   * });\n   *\n   * @fires Mapper#beforeCreate\n   * @fires Mapper#afterCreate\n   * @method Mapper#create\n   * @param {object} props The properties for the new record.\n   * @param {object} [opts] Configuration options. Refer to the `create` method\n   * of whatever adapter you're using for more configuration options.\n   * @param {boolean} [opts.adapter={@link Mapper#defaultAdapter}] Name of the\n   * adapter to use.\n   * @param {boolean} [opts.noValidate={@link Mapper#noValidate}] See {@link Mapper#noValidate}.\n   * @param {boolean} [opts.notify={@link Mapper#notify}] See {@link Mapper#notify}.\n   * @param {boolean} [opts.raw={@link Mapper#raw}] See {@link Mapper#raw}.\n   * @param {string[]} [opts.with=[]] Relations to create in a cascading\n   * create if `props` contains nested relations. NOT performed in a\n   * transaction. Each nested create will result in another {@link Mapper#create}\n   * or {@link Mapper#createMany} call.\n   * @param {string[]} [opts.pass=[]] Relations to send to the adapter as part\n   * of the payload. Normally relations are not sent.\n   * @returns {Promise} Resolves with the created record.\n   * @since 3.0.0\n   */\n  create (props, opts) {\n    // Default values for arguments\n    props || (props = {})\n    opts || (opts = {})\n    const originalRecord = props\n    let parentRelationMap = {}\n    let adapterResponse = {}\n\n    // Fill in \"opts\" with the Mapper's configuration\n    utils._(opts, this)\n    opts.adapter = this.getAdapterName(opts)\n\n    opts.op = 'beforeCreate'\n    return this._runHook(opts.op, props, opts).then((props) => {\n      opts.with || (opts.with = [])\n      return this._createParentRecordIfRequired(props, opts)\n    }).then((relationMap) => {\n      parentRelationMap = relationMap\n    }).then(() => {\n      opts.op = 'create'\n      return this._invokeAdapterMethod(opts.op, props, opts)\n    }).then((result) => {\n      adapterResponse = result\n    }).then(() => {\n      const createdProps = opts.raw ? adapterResponse.data : adapterResponse\n\n      return this._createOrAssignChildRecordIfRequired(createdProps, {\n        opts,\n        parentRelationMap,\n        originalProps: props\n      })\n    }).then((createdProps) => {\n      return this._commitChanges(originalRecord, createdProps)\n    }).then((record) => {\n      if (opts.raw) {\n        adapterResponse.data = record\n      } else {\n        adapterResponse = record\n      }\n      const result = this._end(adapterResponse, opts)\n      opts.op = 'afterCreate'\n      return this._runHook(opts.op, props, opts, result)\n    })\n  },\n\n  _commitChanges (recordOrRecords, newValues) {\n    if (utils.isArray(recordOrRecords)) {\n      return recordOrRecords.map((record, i) => this._commitChanges(record, newValues[i]))\n    }\n\n    utils.set(recordOrRecords, newValues, { silent: true })\n\n    if (utils.isFunction(recordOrRecords.commit)) {\n      recordOrRecords.commit()\n    }\n\n    return recordOrRecords\n  },\n\n  /**\n   * Use {@link Mapper#createRecord} instead.\n   * @deprecated\n   * @method Mapper#createInstance\n   * @param {Object|Array} props See {@link Mapper#createRecord}.\n   * @param {object} [opts] See {@link Mapper#createRecord}.\n   * @returns {Object|Array} See {@link Mapper#createRecord}.\n   * @see Mapper#createRecord\n   * @since 3.0.0\n   */\n  createInstance (props, opts) {\n    return this.createRecord(props, opts)\n  },\n\n  /**\n   * Creates parent record for relation types like BelongsTo or HasMany with localKeys\n   * in order to satisfy foreignKey dependency (so called child records).\n   * @param {object} props See {@link Mapper#create}.\n   * @param {object} opts See {@link Mapper#create}.\n   * @returns {Object} cached parent records map\n   * @see Mapper#create\n   * @since 3.0.0\n   */\n  _createParentRecordIfRequired (props, opts) {\n    const tasks = []\n    const relations = []\n\n    utils.forEachRelation(this, opts, (def, optsCopy) => {\n      if (!def.isRequiresParentId() || !def.getLocalField(props)) {\n        return\n      }\n\n      optsCopy.raw = false\n      relations.push(def)\n      tasks.push(def.createParentRecord(props, optsCopy))\n    })\n\n    return utils.Promise.all(tasks).then(records => {\n      return relations.reduce((map, relation, index) => {\n        relation.setLocalField(map, records[index])\n        return map\n      }, {})\n    })\n  },\n\n  /**\n   * Creates child record for relation types like HasOne or HasMany with foreignKey\n   * in order to satisfy foreignKey dependency (so called parent records).\n   * @param {object} props See {@link Mapper#create}.\n   * @param {object} context contains collected information.\n   * @param {object} context.opts See {@link Mapper#create}.\n   * @param {object} context.parentRelationMap contains parent records map\n   * @param {object} context.originalProps contains data passed into {@link Mapper#create} method\n   * @return {Promise} updated props\n   * @see Mapper#create\n   * @since 3.0.0\n   */\n  _createOrAssignChildRecordIfRequired (props, context) {\n    const tasks = []\n\n    utils.forEachRelation(this, context.opts, (def, optsCopy) => {\n      const relationData = def.getLocalField(context.originalProps)\n\n      if (!relationData) {\n        return\n      }\n\n      optsCopy.raw = false\n      // Create hasMany and hasOne after the main create because we needed\n      // a generated id to attach to these items\n      if (def.isRequiresChildId()) {\n        tasks.push(def.createChildRecord(props, relationData, optsCopy))\n      } else if (def.isRequiresParentId()) {\n        const parent = def.getLocalField(context.parentRelationMap)\n\n        if (parent) {\n          def.setLocalField(props, parent)\n        }\n      }\n    })\n\n    return utils.Promise.all(tasks)\n      .then(() => props)\n  },\n\n  /**\n   * Fired during {@link Mapper#createMany}. See\n   * {@link Mapper~beforeCreateManyListener} for how to listen for this event.\n   *\n   * @event Mapper#beforeCreateMany\n   * @see Mapper~beforeCreateManyListener\n   * @see Mapper#createMany\n   */\n  /**\n   * Callback signature for the {@link Mapper#event:beforeCreateMany} event.\n   *\n   * @example\n   * function onBeforeCreateMany (records, opts) {\n   *   // do something\n   * }\n   * store.on('beforeCreateMany', onBeforeCreateMany);\n   *\n   * @callback Mapper~beforeCreateManyListener\n   * @param {object} records The `records` argument received by {@link Mapper#beforeCreateMany}.\n   * @param {object} opts The `opts` argument received by {@link Mapper#beforeCreateMany}.\n   * @see Mapper#event:beforeCreateMany\n   * @see Mapper#createMany\n   * @since 3.0.0\n   */\n  /**\n   * Fired during {@link Mapper#createMany}. See\n   * {@link Mapper~afterCreateManyListener} for how to listen for this event.\n   *\n   * @event Mapper#afterCreateMany\n   * @see Mapper~afterCreateManyListener\n   * @see Mapper#createMany\n   */\n  /**\n   * Callback signature for the {@link Mapper#event:afterCreateMany} event.\n   *\n   * @example\n   * function onAfterCreateMany (records, opts, result) {\n   *   // do something\n   * }\n   * store.on('afterCreateMany', onAfterCreateMany);\n   *\n   * @callback Mapper~afterCreateManyListener\n   * @param {object} records The `records` argument received by {@link Mapper#afterCreateMany}.\n   * @param {object} opts The `opts` argument received by {@link Mapper#afterCreateMany}.\n   * @param {object} result The `result` argument received by {@link Mapper#afterCreateMany}.\n   * @see Mapper#event:afterCreateMany\n   * @see Mapper#createMany\n   * @since 3.0.0\n   */\n  /**\n   * Given an array of records, batch create them via an adapter.\n   *\n   * {@link Mapper#beforeCreateMany} will be called before calling the adapter.\n   * {@link Mapper#afterCreateMany} will be called after calling the adapter.\n   *\n   * @example\n   * // Create and save several new blog posts\n   * PostMapper.createMany([{\n   *   title: 'Modeling your data',\n   *   status: 'draft'\n   * }, {\n   *   title: 'Reading data',\n   *   status: 'draft'\n   * }]).then((posts) => {\n   *   console.log(posts[0]); // { id: 1234, status: 'draft', ... }\n   *   console.log(posts[1]); // { id: 1235, status: 'draft', ... }\n   * });\n   *\n   * @fires Mapper#beforeCreate\n   * @fires Mapper#afterCreate\n   * @method Mapper#createMany\n   * @param {Record[]} records Array of records to be created in one batch.\n   * @param {object} [opts] Configuration options. Refer to the `createMany`\n   * method of whatever adapter you're using for more configuration options.\n   * @param {boolean} [opts.adapter={@link Mapper#defaultAdapter}] Name of the\n   * adapter to use.\n   * @param {boolean} [opts.noValidate={@link Mapper#noValidate}] See {@link Mapper#noValidate}.\n   * @param {boolean} [opts.notify={@link Mapper#notify}] See {@link Mapper#notify}.\n   * @param {boolean} [opts.raw={@link Mapper#raw}] See {@link Mapper#raw}.\n   * @param {string[]} [opts.with=[]] Relations to create in a cascading\n   * create if `records` contains nested relations. NOT performed in a\n   * transaction. Each nested create will result in another {@link Mapper#createMany}\n   * call.\n   * @param {string[]} [opts.pass=[]] Relations to send to the adapter as part\n   * of the payload. Normally relations are not sent.\n   * @returns {Promise} Resolves with the created records.\n   * @since 3.0.0\n   * @tutorial [\"http://www.js-data.io/v3.0/docs/saving-data\",\"Saving data\"]\n   */\n  createMany (records, opts) {\n    // Default values for arguments\n    records || (records = [])\n    opts || (opts = {})\n    const originalRecords = records\n    let adapterResponse\n\n    // Fill in \"opts\" with the Mapper's configuration\n    utils._(opts, this)\n    opts.adapter = this.getAdapterName(opts)\n\n    // beforeCreateMany lifecycle hook\n    opts.op = 'beforeCreateMany'\n    return this._runHook(opts.op, records, opts).then((records) => {\n      // Deep pre-create belongsTo relations\n      const belongsToRelationData = {}\n      opts.with || (opts.with = [])\n      let tasks = []\n      utils.forEachRelation(this, opts, (def, optsCopy) => {\n        const relationData = records\n          .map((record) => def.getLocalField(record))\n          .filter(Boolean)\n        if (def.type === belongsToType && relationData.length === records.length) {\n          // Create belongsTo relation first because we need a generated id to\n          // attach to the child\n          optsCopy.raw = false\n          tasks.push(def.createLinked(relationData, optsCopy).then((relatedRecords) => {\n            records.forEach((record, i) => def.setForeignKey(record, relatedRecords[i]))\n          }).then((relatedRecords) => {\n            def.setLocalField(belongsToRelationData, relatedRecords)\n          }))\n        }\n      })\n      return utils.Promise.all(tasks).then(() => {\n        opts.op = 'createMany'\n        return this._invokeAdapterMethod(opts.op, records, opts)\n      }).then((result) => {\n        adapterResponse = result\n      }).then(() => {\n        const createdRecordsData = opts.raw ? adapterResponse.data : adapterResponse\n\n        // Deep post-create hasOne relations\n        tasks = []\n        utils.forEachRelation(this, opts, (def, optsCopy) => {\n          const relationData = records\n            .map((record) => def.getLocalField(record))\n            .filter(Boolean)\n          if (relationData.length !== records.length) {\n            return\n          }\n\n          optsCopy.raw = false\n          const belongsToData = def.getLocalField(belongsToRelationData)\n          let task\n          // Create hasMany and hasOne after the main create because we needed\n          // a generated id to attach to these items\n          if (def.type === hasManyType) {\n            // Not supported\n            this.log('warn', 'deep createMany of hasMany type not supported!')\n          } else if (def.type === hasOneType) {\n            createdRecordsData.forEach((createdRecordData, i) => {\n              def.setForeignKey(createdRecordData, relationData[i])\n            })\n            task = def.getRelation().createMany(relationData, optsCopy).then((relatedData) => {\n              createdRecordsData.forEach((createdRecordData, i) => {\n                def.setLocalField(createdRecordData, relatedData[i])\n              })\n            })\n          } else if (def.type === belongsToType && belongsToData && belongsToData.length === createdRecordsData.length) {\n            createdRecordsData.forEach((createdRecordData, i) => {\n              def.setLocalField(createdRecordData, belongsToData[i])\n            })\n          }\n          if (task) {\n            tasks.push(task)\n          }\n        })\n        return utils.Promise.all(tasks).then(() => {\n          return this._commitChanges(originalRecords, createdRecordsData)\n        })\n      })\n    }).then((records) => {\n      if (opts.raw) {\n        adapterResponse.data = records\n      } else {\n        adapterResponse = records\n      }\n      const result = this._end(adapterResponse, opts)\n      opts.op = 'afterCreateMany'\n      return this._runHook(opts.op, records, opts, result)\n    })\n  },\n\n  /**\n   * Create an unsaved, uncached instance of this Mapper's\n   * {@link Mapper#recordClass}.\n   *\n   * Returns `props` if `props` is already an instance of\n   * {@link Mapper#recordClass}.\n   *\n   * __Note:__ This method does __not__ interact with any adapter, and does\n   * __not__ save any data. It only creates new objects in memory.\n   *\n   * @example\n   * // Create empty unsaved record instance\n   * const post = PostMapper.createRecord();\n   *\n   * @example\n   * // Create an unsaved record instance with inital properties\n   * const post = PostMapper.createRecord({\n   *   title: 'Modeling your data',\n   *   status: 'draft'\n   * });\n   *\n   * @example\n   * // Create a record instance that corresponds to a saved record\n   * const post = PostMapper.createRecord({\n   *   // JSData thinks this record has been saved if it has a primary key\n   *   id: 1234,\n   *   title: 'Modeling your data',\n   *   status: 'draft'\n   * });\n   *\n   * @example\n   * // Create record instances from an array\n   * const posts = PostMapper.createRecord([{\n   *   title: 'Modeling your data',\n   *   status: 'draft'\n   * }, {\n   *   title: 'Reading data',\n   *   status: 'draft'\n   * }]);\n   *\n   * @example\n   * // Records are validated by default\n   * import { Mapper } from 'js-data';\n   * const PostMapper = new Mapper({\n   *   name: 'post',\n   *   schema: { properties: { title: { type: 'string' } } }\n   * });\n   * try {\n   *   const post = PostMapper.createRecord({\n   *     title: 1234,\n   *   });\n   * } catch (err) {\n   *   console.log(err.errors); // [{ expected: 'one of (string)', actual: 'number', path: 'title' }]\n   * }\n   *\n   * @example\n   * // Skip validation\n   * import { Mapper } from 'js-data';\n   * const PostMapper = new Mapper({\n   *   name: 'post',\n   *   schema: { properties: { title: { type: 'string' } } }\n   * });\n   * const post = PostMapper.createRecord({\n   *   title: 1234,\n   * }, { noValidate: true });\n   * console.log(post.isValid()); // false\n   *\n   * @method Mapper#createRecord\n   * @param {Object|Object[]} props The properties for the Record instance or an\n   * array of property objects for the Record instances.\n   * @param {object} [opts] Configuration options.\n   * @param {boolean} [opts.noValidate={@link Mapper#noValidate}] See {@link Mapper#noValidate}.\n   * @returns {Record|Record[]} The Record instance or Record instances.\n   * @since 3.0.0\n   */\n  createRecord (props, opts) {\n    props || (props = {})\n    if (utils.isArray(props)) {\n      return props.map((_props) => this.createRecord(_props, opts))\n    }\n    if (!utils.isObject(props)) {\n      throw utils.err(`${DOMAIN}#createRecord`, 'props')(400, 'array or object', props)\n    }\n\n    if (this.relationList) {\n      this.relationList.forEach(function (def) {\n        def.ensureLinkedDataHasProperType(props, opts)\n      })\n    }\n    const RecordCtor = this.recordClass\n\n    return (!RecordCtor || props instanceof RecordCtor) ? props : new RecordCtor(props, opts)\n  },\n\n  /**\n   * Lifecycle invocation method. You probably won't call this method directly.\n   *\n   * @method Mapper#crud\n   * @param {string} method Name of the lifecycle method to invoke.\n   * @param {...*} args Arguments to pass to the lifecycle method.\n   * @returns {Promise}\n   * @since 3.0.0\n   */\n  crud (method, ...args) {\n    const config = this.lifecycleMethods[method]\n    if (!config) {\n      throw utils.err(`${DOMAIN}#crud`, method)(404, 'method')\n    }\n\n    const upper = `${method.charAt(0).toUpperCase()}${method.substr(1)}`\n    const before = `before${upper}`\n    const after = `after${upper}`\n\n    let op, adapter\n\n    // Default values for arguments\n    config.defaults.forEach((value, i) => {\n      if (args[i] === undefined) {\n        args[i] = utils.copy(value)\n      }\n    })\n\n    const opts = args[args.length - 1]\n\n    // Fill in \"opts\" with the Mapper's configuration\n    utils._(opts, this)\n    adapter = opts.adapter = this.getAdapterName(opts)\n\n    // before lifecycle hook\n    op = opts.op = before\n    return utils.resolve(this[op](...args)).then((_value) => {\n      if (args[config.beforeAssign] !== undefined) {\n        // Allow for re-assignment from lifecycle hook\n        args[config.beforeAssign] = _value === undefined ? args[config.beforeAssign] : _value\n      }\n      // Now delegate to the adapter\n      op = opts.op = method\n      args = config.adapterArgs ? config.adapterArgs(this, ...args) : args\n      this.dbg(op, ...args)\n      return utils.resolve(this.getAdapter(adapter)[op](this, ...args))\n    }).then((result) => {\n      result = this._end(result, opts, !!config.skip)\n      args.push(result)\n      // after lifecycle hook\n      op = opts.op = after\n      return utils.resolve(this[op](...args)).then((_result) => {\n        // Allow for re-assignment from lifecycle hook\n        return _result === undefined ? result : _result\n      })\n    })\n  },\n\n  /**\n   * Fired during {@link Mapper#destroy}. See\n   * {@link Mapper~beforeDestroyListener} for how to listen for this event.\n   *\n   * @event Mapper#beforeDestroy\n   * @see Mapper~beforeDestroyListener\n   * @see Mapper#destroy\n   */\n  /**\n   * Callback signature for the {@link Mapper#event:beforeDestroy} event.\n   *\n   * @example\n   * function onBeforeDestroy (id, opts) {\n   *   // do something\n   * }\n   * store.on('beforeDestroy', onBeforeDestroy);\n   *\n   * @callback Mapper~beforeDestroyListener\n   * @param {string|number} id The `id` argument passed to {@link Mapper#beforeDestroy}.\n   * @param {object} opts The `opts` argument passed to {@link Mapper#beforeDestroy}.\n   * @see Mapper#event:beforeDestroy\n   * @see Mapper#destroy\n   * @since 3.0.0\n   */\n  /**\n   * Fired during {@link Mapper#destroy}. See\n   * {@link Mapper~afterDestroyListener} for how to listen for this event.\n   *\n   * @event Mapper#afterDestroy\n   * @see Mapper~afterDestroyListener\n   * @see Mapper#destroy\n   */\n  /**\n   * Callback signature for the {@link Mapper#event:afterDestroy} event.\n   *\n   * @example\n   * function onAfterDestroy (id, opts, result) {\n   *   // do something\n   * }\n   * store.on('afterDestroy', onAfterDestroy);\n   *\n   * @callback Mapper~afterDestroyListener\n   * @param {string|number} id The `id` argument passed to {@link Mapper#afterDestroy}.\n   * @param {object} opts The `opts` argument passed to {@link Mapper#afterDestroy}.\n   * @param {object} result The `result` argument passed to {@link Mapper#afterDestroy}.\n   * @see Mapper#event:afterDestroy\n   * @see Mapper#destroy\n   * @since 3.0.0\n   */\n  /**\n   * Using an adapter, destroy the record with the given primary key.\n   *\n   * {@link Mapper#beforeDestroy} will be called before destroying the record.\n   * {@link Mapper#afterDestroy} will be called after destroying the record.\n   *\n   * @example\n   * // Destroy a specific blog post\n   * PostMapper.destroy(1234).then(() => {\n   *   // Blog post #1234 has been destroyed\n   * });\n   *\n   * @example\n   * // Get full response\n   * PostMapper.destroy(1234, { raw: true }).then((result) => {\n   *   console.log(result.deleted); e.g. 1\n   *   console.log(...); // etc., more metadata can be found on the result\n   * });\n   *\n   * @fires Mapper#beforeDestroy\n   * @fires Mapper#afterDestroy\n   * @method Mapper#destroy\n   * @param {(string|number)} id The primary key of the record to destroy.\n   * @param {object} [opts] Configuration options. Refer to the `destroy` method\n   * of whatever adapter you're using for more configuration options.\n   * @param {boolean} [opts.adapter={@link Mapper#defaultAdapter}] Name of the\n   * adapter to use.\n   * @param {boolean} [opts.notify={@link Mapper#notify}] See {@link Mapper#notify}.\n   * @param {boolean} [opts.raw={@link Mapper#raw}] See {@link Mapper#raw}.\n   * @returns {Promise} Resolves when the record has been destroyed. Resolves\n   * even if no record was found to be destroyed.\n   * @since 3.0.0\n   * @tutorial [\"http://www.js-data.io/v3.0/docs/saving-data\",\"Saving data\"]\n   */\n  destroy (id, opts) {\n    return this.crud('destroy', id, opts)\n  },\n\n  /**\n   * Fired during {@link Mapper#destroyAll}. See\n   * {@link Mapper~beforeDestroyAllListener} for how to listen for this event.\n   *\n   * @event Mapper#beforeDestroyAll\n   * @see Mapper~beforeDestroyAllListener\n   * @see Mapper#destroyAll\n   */\n  /**\n   * Callback signature for the {@link Mapper#event:beforeDestroyAll} event.\n   *\n   * @example\n   * function onBeforeDestroyAll (query, opts) {\n   *   // do something\n   * }\n   * store.on('beforeDestroyAll', onBeforeDestroyAll);\n   *\n   * @callback Mapper~beforeDestroyAllListener\n   * @param {object} query The `query` argument passed to {@link Mapper#beforeDestroyAll}.\n   * @param {object} opts The `opts` argument passed to {@link Mapper#beforeDestroyAll}.\n   * @see Mapper#event:beforeDestroyAll\n   * @see Mapper#destroyAll\n   * @since 3.0.0\n   */\n  /**\n   * Fired during {@link Mapper#destroyAll}. See\n   * {@link Mapper~afterDestroyAllListener} for how to listen for this event.\n   *\n   * @event Mapper#afterDestroyAll\n   * @see Mapper~afterDestroyAllListener\n   * @see Mapper#destroyAll\n   */\n  /**\n   * Callback signature for the {@link Mapper#event:afterDestroyAll} event.\n   *\n   * @example\n   * function onAfterDestroyAll (query, opts, result) {\n   *   // do something\n   * }\n   * store.on('afterDestroyAll', onAfterDestroyAll);\n   *\n   * @callback Mapper~afterDestroyAllListener\n   * @param {object} query The `query` argument passed to {@link Mapper#afterDestroyAll}.\n   * @param {object} opts The `opts` argument passed to {@link Mapper#afterDestroyAll}.\n   * @param {object} result The `result` argument passed to {@link Mapper#afterDestroyAll}.\n   * @see Mapper#event:afterDestroyAll\n   * @see Mapper#destroyAll\n   * @since 3.0.0\n   */\n  /**\n   * Destroy the records selected by `query` via an adapter. If no `query` is\n   * provided then all records will be destroyed.\n   *\n   * {@link Mapper#beforeDestroyAll} will be called before destroying the records.\n   * {@link Mapper#afterDestroyAll} will be called after destroying the records.\n   *\n   * @example\n   * // Destroy all blog posts\n   * PostMapper.destroyAll().then(() => {\n   *   // All blog posts have been destroyed\n   * });\n   *\n   * @example\n   * // Destroy all \"draft\" blog posts\n   * PostMapper.destroyAll({ status: 'draft' }).then(() => {\n   *   // All \"draft\" blog posts have been destroyed\n   * });\n   *\n   * @example\n   * // Get full response\n   * const query = null;\n   * const options = { raw: true };\n   * PostMapper.destroyAll(query, options).then((result) => {\n   *   console.log(result.deleted); e.g. 14\n   *   console.log(...); // etc., more metadata can be found on the result\n   * });\n   *\n   * @fires Mapper#beforeDestroyAll\n   * @fires Mapper#afterDestroyAll\n   * @method Mapper#destroyAll\n   * @param {object} [query={}] Selection query. See {@link query}.\n   * @param {object} [query.where] See {@link query.where}.\n   * @param {number} [query.offset] See {@link query.offset}.\n   * @param {number} [query.limit] See {@link query.limit}.\n   * @param {string|Array[]} [query.orderBy] See {@link query.orderBy}.\n   * @param {object} [opts] Configuration options. Refer to the `destroyAll`\n   * method of whatever adapter you're using for more configuration options.\n   * @param {boolean} [opts.adapter={@link Mapper#defaultAdapter}] Name of the\n   * adapter to use.\n   * @param {boolean} [opts.notify={@link Mapper#notify}] See {@link Mapper#notify}.\n   * @param {boolean} [opts.raw={@link Mapper#raw}] See {@link Mapper#raw}.\n   * @returns {Promise} Resolves when the records have been destroyed. Resolves\n   * even if no records were found to be destroyed.\n   * @see query\n   * @since 3.0.0\n   * @tutorial [\"http://www.js-data.io/v3.0/docs/saving-data\",\"Saving data\"]\n   */\n  destroyAll (query, opts) {\n    return this.crud('destroyAll', query, opts)\n  },\n\n  /**\n   * Fired during {@link Mapper#find}. See\n   * {@link Mapper~beforeFindListener} for how to listen for this event.\n   *\n   * @event Mapper#beforeFind\n   * @see Mapper~beforeFindListener\n   * @see Mapper#find\n   */\n  /**\n   * Callback signature for the {@link Mapper#event:beforeFind} event.\n   *\n   * @example\n   * function onBeforeFind (id, opts) {\n   *   // do something\n   * }\n   * store.on('beforeFind', onBeforeFind);\n   *\n   * @callback Mapper~beforeFindListener\n   * @param {string|number} id The `id` argument passed to {@link Mapper#beforeFind}.\n   * @param {object} opts The `opts` argument passed to {@link Mapper#beforeFind}.\n   * @see Mapper#event:beforeFind\n   * @see Mapper#find\n   * @since 3.0.0\n   */\n  /**\n   * Fired during {@link Mapper#find}. See\n   * {@link Mapper~afterFindListener} for how to listen for this event.\n   *\n   * @event Mapper#afterFind\n   * @see Mapper~afterFindListener\n   * @see Mapper#find\n   */\n  /**\n   * Callback signature for the {@link Mapper#event:afterFind} event.\n   *\n   * @example\n   * function onAfterFind (id, opts, result) {\n   *   // do something\n   * }\n   * store.on('afterFind', onAfterFind);\n   *\n   * @callback Mapper~afterFindListener\n   * @param {string|number} id The `id` argument passed to {@link Mapper#afterFind}.\n   * @param {object} opts The `opts` argument passed to {@link Mapper#afterFind}.\n   * @param {object} result The `result` argument passed to {@link Mapper#afterFind}.\n   * @see Mapper#event:afterFind\n   * @see Mapper#find\n   * @since 3.0.0\n   */\n  /**\n   * Retrieve via an adapter the record with the given primary key.\n   *\n   * {@link Mapper#beforeFind} will be called before calling the adapter.\n   * {@link Mapper#afterFind} will be called after calling the adapter.\n   *\n   * @example\n   * PostMapper.find(1).then((post) => {\n   *   console.log(post); // { id: 1, ...}\n   * });\n   *\n   * @example\n   * // Get full response\n   * PostMapper.find(1, { raw: true }).then((result) => {\n   *   console.log(result.data); // { id: 1, ...}\n   *   console.log(result.found); // 1\n   *   console.log(...); // etc., more metadata can be found on the result\n   * });\n   *\n   * @fires Mapper#beforeFind\n   * @fires Mapper#afterFind\n   * @method Mapper#find\n   * @param {(string|number)} id The primary key of the record to retrieve.\n   * @param {object} [opts] Configuration options. Refer to the `find` method\n   * of whatever adapter you're using for more configuration options.\n   * @param {boolean} [opts.adapter={@link Mapper#defaultAdapter}] Name of the\n   * adapter to use.\n   * @param {boolean} [opts.notify={@link Mapper#notify}] See {@link Mapper#notify}.\n   * @param {boolean} [opts.raw={@link Mapper#raw}] See {@link Mapper#raw}.\n   * @param {string[]} [opts.with=[]] Relations to eager load in the request.\n   * @returns {Promise} Resolves with the found record. Resolves with\n   * `undefined` if no record was found.\n   * @see http://www.js-data.io/v3.0/docs/reading-data\n   * @since 3.0.0\n   * @tutorial [\"http://www.js-data.io/v3.0/docs/reading-data\",\"Reading data\"]\n   */\n  find (id, opts) {\n    return this.crud('find', id, opts)\n  },\n\n  /**\n   * Fired during {@link Mapper#findAll}. See\n   * {@link Mapper~beforeFindAllListener} for how to listen for this event.\n   *\n   * @event Mapper#beforeFindAll\n   * @see Mapper~beforeFindAllListener\n   * @see Mapper#findAll\n   */\n  /**\n   * Callback signature for the {@link Mapper#event:beforeFindAll} event.\n   *\n   * @example\n   * function onBeforeFindAll (query, opts) {\n   *   // do something\n   * }\n   * store.on('beforeFindAll', onBeforeFindAll);\n   *\n   * @callback Mapper~beforeFindAllListener\n   * @param {object} query The `query` argument passed to {@link Mapper#beforeFindAll}.\n   * @param {object} opts The `opts` argument passed to {@link Mapper#beforeFindAll}.\n   * @see Mapper#event:beforeFindAll\n   * @see Mapper#findAll\n   * @since 3.0.0\n   */\n  /**\n   * Fired during {@link Mapper#findAll}. See\n   * {@link Mapper~afterFindAllListener} for how to listen for this event.\n   *\n   * @event Mapper#afterFindAll\n   * @see Mapper~afterFindAllListener\n   * @see Mapper#findAll\n   */\n  /**\n   * Callback signature for the {@link Mapper#event:afterFindAll} event.\n   *\n   * @example\n   * function onAfterFindAll (query, opts, result) {\n   *   // do something\n   * }\n   * store.on('afterFindAll', onAfterFindAll);\n   *\n   * @callback Mapper~afterFindAllListener\n   * @param {object} query The `query` argument passed to {@link Mapper#afterFindAll}.\n   * @param {object} opts The `opts` argument passed to {@link Mapper#afterFindAll}.\n   * @param {object} result The `result` argument passed to {@link Mapper#afterFindAll}.\n   * @see Mapper#event:afterFindAll\n   * @see Mapper#findAll\n   * @since 3.0.0\n   */\n  /**\n   * Using the `query` argument, select records to retrieve via an adapter.\n   *\n   * {@link Mapper#beforeFindAll} will be called before calling the adapter.\n   * {@link Mapper#afterFindAll} will be called after calling the adapter.\n   *\n   * @example\n   * // Find all \"published\" blog posts\n   * PostMapper.findAll({ status: 'published' }).then((posts) => {\n   *   console.log(posts); // [{ id: 1, status: 'published', ...}, ...]\n   * });\n   *\n   * @example\n   * // Get full response\n   * PostMapper.findAll({ status: 'published' }, { raw: true }).then((result) => {\n   *   console.log(result.data); // [{ id: 1, status: 'published', ...}, ...]\n   *   console.log(result.found); // e.g. 13\n   *   console.log(...); // etc., more metadata can be found on the result\n   * });\n   *\n   * @fires Mapper#beforeFindAll\n   * @fires Mapper#afterFindAll\n   * @method Mapper#findAll\n   * @param {object} [query={}] Selection query. See {@link query}.\n   * @param {object} [query.where] See {@link query.where}.\n   * @param {number} [query.offset] See {@link query.offset}.\n   * @param {number} [query.limit] See {@link query.limit}.\n   * @param {string|Array[]} [query.orderBy] See {@link query.orderBy}.\n   * @param {object} [opts] Configuration options. Refer to the `findAll` method\n   * of whatever adapter you're using for more configuration options.\n   * @param {boolean} [opts.adapter={@link Mapper#defaultAdapter}] Name of the\n   * adapter to use.\n   * @param {boolean} [opts.notify={@link Mapper#notify}] See {@link Mapper#notify}.\n   * @param {boolean} [opts.raw={@link Mapper#raw}] See {@link Mapper#raw}.\n   * @param {string[]} [opts.with=[]] Relations to eager load in the request.\n   * @returns {Promise} Resolves with the found records, if any.\n   * @see query\n   * @since 3.0.0\n   * @tutorial [\"http://www.js-data.io/v3.0/docs/reading-data\",\"Reading data\"]\n   */\n  findAll (query, opts) {\n    return this.crud('findAll', query, opts)\n  },\n\n  /**\n   * Return the registered adapter with the given name or the default adapter if\n   * no name is provided.\n   *\n   * @method Mapper#getAdapter\n   * @param {string} [name] The name of the adapter to retrieve.\n   * @returns {Adapter} The adapter.\n   * @since 3.0.0\n   * @tutorial [\"http://www.js-data.io/v3.0/docs/connecting-to-a-data-source\",\"Connecting to a data source\"]\n   */\n  getAdapter (name) {\n    this.dbg('getAdapter', 'name:', name)\n    const adapter = this.getAdapterName(name)\n    if (!adapter) {\n      throw utils.err(`${DOMAIN}#getAdapter`, 'name')(400, 'string', name)\n    }\n    return this.getAdapters()[adapter]\n  },\n\n  /**\n   * Return the name of a registered adapter based on the given name or options,\n   * or the name of the default adapter if no name provided.\n   *\n   * @method Mapper#getAdapterName\n   * @param {(Object|string)} [opts] The name of an adapter or options, if any.\n   * @returns {string} The name of the adapter.\n   * @since 3.0.0\n   * @tutorial [\"http://www.js-data.io/v3.0/docs/connecting-to-a-data-source\",\"Connecting to a data source\"]\n   */\n  getAdapterName (opts) {\n    opts || (opts = {})\n    if (utils.isString(opts)) {\n      opts = { adapter: opts }\n    }\n    return opts.adapter || opts.defaultAdapter\n  },\n\n  /**\n   * Get the object of registered adapters for this Mapper.\n   *\n   * @method Mapper#getAdapters\n   * @returns {Object} {@link Mapper#_adapters}\n   * @since 3.0.0\n   * @tutorial [\"http://www.js-data.io/v3.0/docs/connecting-to-a-data-source\",\"Connecting to a data source\"]\n   */\n  getAdapters () {\n    return this._adapters\n  },\n\n  /**\n   * Returns this Mapper's {@link Schema}.\n   *\n   * @method Mapper#getSchema\n   * @returns {Schema} This Mapper's {@link Schema}.\n   * @see Mapper#schema\n   * @since 3.0.0\n   */\n  getSchema () {\n    return this.schema\n  },\n\n  /**\n   * Defines a hasMany relationship. Only useful if you're managing your\n   * Mappers manually and not using a Container or DataStore component.\n   *\n   * @example\n   * UserMapper.hasMany(PostMapper, {\n   *   // post.user_id points to user.id\n   *   foreignKey: 'user_id'\n   *   // post records will be attached to user records at \"user.posts\"\n   *   localField: 'posts'\n   * });\n   *\n   * @method Mapper#hasMany\n   * @see http://www.js-data.io/v3.0/docs/relations\n   * @since 3.0.0\n   */\n  hasMany (relatedMapper, opts) {\n    return hasMany(relatedMapper, opts)(this)\n  },\n\n  /**\n   * Defines a hasOne relationship. Only useful if you're managing your Mappers\n   * manually and not using a {@link Container} or {@link DataStore} component.\n   *\n   * @example\n   * UserMapper.hasOne(ProfileMapper, {\n   *   // profile.user_id points to user.id\n   *   foreignKey: 'user_id'\n   *   // profile records will be attached to user records at \"user.profile\"\n   *   localField: 'profile'\n   * });\n   *\n   * @method Mapper#hasOne\n   * @see http://www.js-data.io/v3.0/docs/relations\n   * @since 3.0.0\n   */\n  hasOne (relatedMapper, opts) {\n    return hasOne(relatedMapper, opts)(this)\n  },\n\n  /**\n   * Return whether `record` is an instance of this Mapper's recordClass.\n   *\n   * @example\n   * const post = PostMapper.createRecord();\n   *\n   * console.log(PostMapper.is(post)); // true\n   * // Equivalent to what's above\n   * console.log(post instanceof PostMapper.recordClass); // true\n   *\n   * @method Mapper#is\n   * @param {Object|Record} record The record to check.\n   * @returns {boolean} Whether `record` is an instance of this Mapper's\n   * {@link Mapper#recordClass}.\n   * @since 3.0.0\n   */\n  is (record) {\n    const recordClass = this.recordClass\n    return recordClass ? record instanceof recordClass : false\n  },\n\n  /**\n   * Register an adapter on this Mapper under the given name.\n   *\n   * @method Mapper#registerAdapter\n   * @param {string} name The name of the adapter to register.\n   * @param {Adapter} adapter The adapter to register.\n   * @param {object} [opts] Configuration options.\n   * @param {boolean} [opts.default=false] Whether to make the adapter the\n   * default adapter for this Mapper.\n   * @since 3.0.0\n   * @tutorial [\"http://www.js-data.io/v3.0/docs/connecting-to-a-data-source\",\"Connecting to a data source\"]\n   */\n  registerAdapter (name, adapter, opts) {\n    opts || (opts = {})\n    this.getAdapters()[name] = adapter\n    // Optionally make it the default adapter for the target.\n    if (opts === true || opts.default) {\n      this.defaultAdapter = name\n    }\n  },\n\n  _runHook (hookName, ...hookArgs) {\n    const defaultValueIndex = hookName.indexOf('after') === 0 ? hookArgs.length - 1 : 0\n\n    return utils.resolve(this[hookName](...hookArgs))\n      .then((overridenResult) => overridenResult === undefined ? hookArgs[defaultValueIndex] : overridenResult)\n  },\n\n  _invokeAdapterMethod (method, propsOrRecords, opts) {\n    const conversionOptions = { with: opts.pass || [] }\n    let object\n\n    this.dbg(opts.op, propsOrRecords, opts)\n\n    if (utils.isArray(propsOrRecords)) {\n      object = propsOrRecords.map(record => this.toJSON(record, conversionOptions))\n    } else {\n      object = this.toJSON(propsOrRecords, conversionOptions)\n    }\n\n    return this.getAdapter(opts.adapter)[method](this, object, opts)\n  },\n\n  /**\n   * Select records according to the `query` argument, and aggregate the sum\n   * value of the property specified by `field`.\n   *\n   * {@link Mapper#beforeSum} will be called before calling the adapter.\n   * {@link Mapper#afterSum} will be called after calling the adapter.\n   *\n   * @example\n   * PurchaseOrderMapper.sum('amount', { status: 'paid' }).then((amountPaid) => {\n   *   console.log(amountPaid); // e.g. 451125.34\n   * });\n   *\n   * @method Mapper#sum\n   * @param {string} field The field to sum.\n   * @param {object} [query={}] Selection query. See {@link query}.\n   * @param {object} [query.where] See {@link query.where}.\n   * @param {number} [query.offset] See {@link query.offset}.\n   * @param {number} [query.limit] See {@link query.limit}.\n   * @param {string|Array[]} [query.orderBy] See {@link query.orderBy}.\n   * @param {object} [opts] Configuration options. Refer to the `sum` method\n   * of whatever adapter you're using for more configuration options.\n   * @param {boolean} [opts.adapter={@link Mapper#defaultAdapter}] Name of the\n   * adapter to use.\n   * @param {boolean} [opts.notify={@link Mapper#notify}] See {@link Mapper#notify}.\n   * @param {boolean} [opts.raw={@link Mapper#raw}] See {@link Mapper#raw}.\n   * @returns {Promise} Resolves with the aggregated sum.\n   * @since 3.0.0\n   */\n  sum (field, query, opts) {\n    return this.crud('sum', field, query, opts)\n  },\n\n  /**\n   * Return a plain object representation of the given record. Relations can\n   * be optionally be included. Non-schema properties can be excluded.\n   *\n   * @example\n   * import { Mapper, Schema } from 'js-data';\n   * const PersonMapper = new Mapper({\n   *   name: 'person',\n   *   schema: {\n   *     properties: {\n   *       name: { type: 'string' },\n   *       id: { type: 'string' }\n   *     }\n   *   }\n   * });\n   * const person = PersonMapper.createRecord({ id: 1, name: 'John', foo: 'bar' });\n   * // \"foo\" is stripped by toJSON()\n   * console.log(PersonMapper.toJSON(person)); // {\"id\":1,\"name\":\"John\"}\n   *\n   * const PersonRelaxedMapper = new Mapper({\n   *   name: 'personRelaxed',\n   *   schema: {\n   *     properties: {\n   *       name: { type: 'string' },\n   *       id: { type: 'string' }\n   *     },\n   *     additionalProperties: true\n   *   }\n   * });\n   * const person2 = PersonRelaxedMapper.createRecord({ id: 1, name: 'John', foo: 'bar' });\n   * // \"foo\" is not stripped by toJSON\n   * console.log(PersonRelaxedMapper.toJSON(person2)); // {\"id\":1,\"name\":\"John\",\"foo\":\"bar\"}\n   *\n   * @method Mapper#toJSON\n   * @param {Record|Record[]} records Record or records from which to create a\n   * POJO representation.\n   * @param {object} [opts] Configuration options.\n   * @param {string[]} [opts.with] Array of relation names or relation fields\n   * to include in the POJO representation.\n   * @param {boolean} [opts.withAll] Whether to simply include all relations in\n   * the representation. Overrides `opts.with`.\n   * @returns {Object|Object[]} POJO representation of the record or records.\n   * @since 3.0.0\n   */\n  toJSON (records, opts) {\n    let record\n    opts || (opts = {})\n    if (utils.isArray(records)) {\n      return records.map((record) => this.toJSON(record, opts))\n    } else {\n      record = records\n    }\n    const relationFields = (this ? this.relationFields : []) || []\n    let json = {}\n\n    // Copy properties defined in the schema\n    if (this && this.schema) {\n      json = this.schema.pick(record)\n    } else {\n      for (var key in record) {\n        if (relationFields.indexOf(key) === -1) {\n          json[key] = utils.plainCopy(record[key])\n        }\n      }\n    }\n\n    // The user wants to include relations in the resulting plain object representation\n    if (this && opts.withAll) {\n      opts.with = relationFields.slice()\n    }\n    if (this && opts.with) {\n      if (utils.isString(opts.with)) {\n        opts.with = [opts.with]\n      }\n      utils.forEachRelation(this, opts, (def, optsCopy) => {\n        const relationData = def.getLocalField(record)\n        if (relationData) {\n          // The actual recursion\n          if (utils.isArray(relationData)) {\n            def.setLocalField(json, relationData.map((item) => {\n              return def.getRelation().toJSON(item, optsCopy)\n            }))\n          } else {\n            def.setLocalField(json, def.getRelation().toJSON(relationData, optsCopy))\n          }\n        }\n      })\n    }\n    return json\n  },\n\n  /**\n   * Fired during {@link Mapper#update}. See\n   * {@link Mapper~beforeUpdateListener} for how to listen for this event.\n   *\n   * @event Mapper#beforeUpdate\n   * @see Mapper~beforeUpdateListener\n   * @see Mapper#update\n   */\n  /**\n   * Callback signature for the {@link Mapper#event:beforeUpdate} event.\n   *\n   * @example\n   * function onBeforeUpdate (id, props, opts) {\n   *   // do something\n   * }\n   * store.on('beforeUpdate', onBeforeUpdate);\n   *\n   * @callback Mapper~beforeUpdateListener\n   * @param {string|number} id The `id` argument passed to {@link Mapper#beforeUpdate}.\n   * @param {object} props The `props` argument passed to {@link Mapper#beforeUpdate}.\n   * @param {object} opts The `opts` argument passed to {@link Mapper#beforeUpdate}.\n   * @see Mapper#event:beforeUpdate\n   * @see Mapper#update\n   * @since 3.0.0\n   */\n  /**\n   * Fired during {@link Mapper#update}. See\n   * {@link Mapper~afterUpdateListener} for how to listen for this event.\n   *\n   * @event Mapper#afterUpdate\n   * @see Mapper~afterUpdateListener\n   * @see Mapper#update\n   */\n  /**\n   * Callback signature for the {@link Mapper#event:afterUpdate} event.\n   *\n   * @example\n   * function onAfterUpdate (id, props, opts, result) {\n   *   // do something\n   * }\n   * store.on('afterUpdate', onAfterUpdate);\n   *\n   * @callback Mapper~afterUpdateListener\n   * @param {string|number} id The `id` argument passed to {@link Mapper#afterUpdate}.\n   * @param {object} props The `props` argument passed to {@link Mapper#afterUpdate}.\n   * @param {object} opts The `opts` argument passed to {@link Mapper#afterUpdate}.\n   * @param {object} result The `result` argument passed to {@link Mapper#afterUpdate}.\n   * @see Mapper#event:afterUpdate\n   * @see Mapper#update\n   * @since 3.0.0\n   */\n  /**\n   * Using an adapter, update the record with the primary key specified by the\n   * `id` argument.\n   *\n   * {@link Mapper#beforeUpdate} will be called before updating the record.\n   * {@link Mapper#afterUpdate} will be called after updating the record.\n   *\n   * @example\n   * // Update a specific post\n   * PostMapper.update(1234, {\n   *   status: 'published',\n   *   published_at: new Date()\n   * }).then((post) => {\n   *   console.log(post); // { id: 1234, status: 'published', ... }\n   * });\n   *\n   * @fires Mapper#beforeUpdate\n   * @fires Mapper#afterUpdate\n   * @method Mapper#update\n   * @param {(string|number)} id The primary key of the record to update.\n   * @param {object} props The update to apply to the record.\n   * @param {object} [opts] Configuration options. Refer to the `update` method\n   * of whatever adapter you're using for more configuration options.\n   * @param {boolean} [opts.adapter={@link Mapper#defaultAdapter}] Name of the\n   * adapter to use.\n   * @param {boolean} [opts.notify={@link Mapper#notify}] See {@link Mapper#notify}.\n   * @param {boolean} [opts.noValidate={@link Mapper#noValidate}] See {@link Mapper#noValidate}.\n   * @param {boolean} [opts.raw={@link Mapper#raw}] See {@link Mapper#raw}.\n   * transaction.\n   * @returns {Promise} Resolves with the updated record. Rejects if the record\n   * could not be found.\n   * @since 3.0.0\n   * @tutorial [\"http://www.js-data.io/v3.0/docs/saving-data\",\"Saving data\"]\n   */\n  update (id, props, opts) {\n    return this.crud('update', id, props, opts)\n  },\n\n  /**\n   * Fired during {@link Mapper#updateAll}. See\n   * {@link Mapper~beforeUpdateAllListener} for how to listen for this event.\n   *\n   * @event Mapper#beforeUpdateAll\n   * @see Mapper~beforeUpdateAllListener\n   * @see Mapper#updateAll\n   */\n  /**\n   * Callback signature for the {@link Mapper#event:beforeUpdateAll} event.\n   *\n   * @example\n   * function onBeforeUpdateAll (props, query, opts) {\n   *   // do something\n   * }\n   * store.on('beforeUpdateAll', onBeforeUpdateAll);\n   *\n   * @callback Mapper~beforeUpdateAllListener\n   * @param {object} props The `props` argument received by {@link Mapper#beforeUpdateAll}.\n   * @param {object} query The `query` argument received by {@link Mapper#beforeUpdateAll}.\n   * @param {object} opts The `opts` argument received by {@link Mapper#beforeUpdateAll}.\n   * @see Mapper#event:beforeUpdateAll\n   * @see Mapper#updateAll\n   * @since 3.0.0\n   */\n  /**\n   * Fired during {@link Mapper#updateAll}. See\n   * {@link Mapper~afterUpdateAllListener} for how to listen for this event.\n   *\n   * @event Mapper#afterUpdateAll\n   * @see Mapper~afterUpdateAllListener\n   * @see Mapper#updateAll\n   */\n  /**\n   * Callback signature for the {@link Mapper#event:afterUpdateAll} event.\n   *\n   * @example\n   * function onAfterUpdateAll (props, query, opts, result) {\n   *   // do something\n   * }\n   * store.on('afterUpdateAll', onAfterUpdateAll);\n   *\n   * @callback Mapper~afterUpdateAllListener\n   * @param {object} props The `props` argument received by {@link Mapper#afterUpdateAll}.\n   * @param {object} query The `query` argument received by {@link Mapper#afterUpdateAll}.\n   * @param {object} opts The `opts` argument received by {@link Mapper#afterUpdateAll}.\n   * @param {object} result The `result` argument received by {@link Mapper#afterUpdateAll}.\n   * @see Mapper#event:afterUpdateAll\n   * @see Mapper#updateAll\n   * @since 3.0.0\n   */\n  /**\n   * Using the `query` argument, perform the a single updated to the selected\n   * records.\n   *\n   * {@link Mapper#beforeUpdateAll} will be called before making the update.\n   * {@link Mapper#afterUpdateAll} will be called after making the update.\n   *\n   * @example\n   * // Turn all of John's blog posts into drafts.\n   * const update = { status: draft: published_at: null };\n   * const query = { userId: 1234 };\n   * PostMapper.updateAll(update, query).then((posts) => {\n   *   console.log(posts); // [...]\n   * });\n   *\n   * @fires Mapper#beforeUpdateAll\n   * @fires Mapper#afterUpdateAll\n   * @method Mapper#updateAll\n   * @param {object} props Update to apply to selected records.\n   * @param {object} [query={}] Selection query. See {@link query}.\n   * @param {object} [query.where] See {@link query.where}.\n   * @param {number} [query.offset] See {@link query.offset}.\n   * @param {number} [query.limit] See {@link query.limit}.\n   * @param {string|Array[]} [query.orderBy] See {@link query.orderBy}.\n   * @param {object} [opts] Configuration options. Refer to the `updateAll`\n   * method of whatever adapter you're using for more configuration options.\n   * @param {boolean} [opts.adapter={@link Mapper#defaultAdapter}] Name of the\n   * adapter to use.\n   * @param {boolean} [opts.notify={@link Mapper#notify}] See {@link Mapper#notify}.\n   * @param {boolean} [opts.noValidate={@link Mapper#noValidate}] See {@link Mapper#noValidate}.\n   * @param {boolean} [opts.raw={@link Mapper#raw}] See {@link Mapper#raw}.\n   * @returns {Promise} Resolves with the update records, if any.\n   * @see query\n   * @since 3.0.0\n   * @tutorial [\"http://www.js-data.io/v3.0/docs/saving-data\",\"Saving data\"]\n   */\n  updateAll (props, query, opts) {\n    return this.crud('updateAll', props, query, opts)\n  },\n\n  /**\n   * Fired during {@link Mapper#updateMany}. See\n   * {@link Mapper~beforeUpdateManyListener} for how to listen for this event.\n   *\n   * @event Mapper#beforeUpdateMany\n   * @see Mapper~beforeUpdateManyListener\n   * @see Mapper#updateMany\n   */\n  /**\n   * Callback signature for the {@link Mapper#event:beforeUpdateMany} event.\n   *\n   * @example\n   * function onBeforeUpdateMany (records, opts) {\n   *   // do something\n   * }\n   * store.on('beforeUpdateMany', onBeforeUpdateMany);\n   *\n   * @callback Mapper~beforeUpdateManyListener\n   * @param {object} records The `records` argument received by {@link Mapper#beforeUpdateMany}.\n   * @param {object} opts The `opts` argument received by {@link Mapper#beforeUpdateMany}.\n   * @see Mapper#event:beforeUpdateMany\n   * @see Mapper#updateMany\n   * @since 3.0.0\n   */\n  /**\n   * Fired during {@link Mapper#updateMany}. See\n   * {@link Mapper~afterUpdateManyListener} for how to listen for this event.\n   *\n   * @event Mapper#afterUpdateMany\n   * @see Mapper~afterUpdateManyListener\n   * @see Mapper#updateMany\n   */\n  /**\n   * Callback signature for the {@link Mapper#event:afterUpdateMany} event.\n   *\n   * @example\n   * function onAfterUpdateMany (records, opts, result) {\n   *   // do something\n   * }\n   * store.on('afterUpdateMany', onAfterUpdateMany);\n   *\n   * @callback Mapper~afterUpdateManyListener\n   * @param {object} records The `records` argument received by {@link Mapper#afterUpdateMany}.\n   * @param {object} opts The `opts` argument received by {@link Mapper#afterUpdateMany}.\n   * @param {object} result The `result` argument received by {@link Mapper#afterUpdateMany}.\n   * @see Mapper#event:afterUpdateMany\n   * @see Mapper#updateMany\n   * @since 3.0.0\n   */\n  /**\n   * Given an array of updates, perform each of the updates via an adapter. Each\n   * \"update\" is a hash of properties with which to update an record. Each\n   * update must contain the primary key of the record to be updated.\n   *\n   * {@link Mapper#beforeUpdateMany} will be called before making the update.\n   * {@link Mapper#afterUpdateMany} will be called after making the update.\n   *\n   * @example\n   * PostMapper.updateMany([\n   *   { id: 1234, status: 'draft' },\n   *   { id: 2468, status: 'published', published_at: new Date() }\n   * ]).then((posts) => {\n   *   console.log(posts); // [...]\n   * });\n   *\n   * @fires Mapper#beforeUpdateMany\n   * @fires Mapper#afterUpdateMany\n   * @method Mapper#updateMany\n   * @param {Record[]} records Array up record updates.\n   * @param {object} [opts] Configuration options. Refer to the `updateMany`\n   * method of whatever adapter you're using for more configuration options.\n   * @param {boolean} [opts.adapter={@link Mapper#defaultAdapter}] Name of the\n   * adapter to use.\n   * @param {boolean} [opts.notify={@link Mapper#notify}] See {@link Mapper#notify}.\n   * @param {boolean} [opts.noValidate={@link Mapper#noValidate}] See {@link Mapper#noValidate}.\n   * @param {boolean} [opts.raw={@link Mapper#raw}] See {@link Mapper#raw}.\n   * @returns {Promise} Resolves with the updated records. Rejects if any of the\n   * records could be found.\n   * @since 3.0.0\n   * @tutorial [\"http://www.js-data.io/v3.0/docs/saving-data\",\"Saving data\"]\n   */\n  updateMany (records, opts) {\n    return this.crud('updateMany', records, opts)\n  },\n\n  /**\n   * Validate the given record or records according to this Mapper's\n   * {@link Schema}. If there are no validation errors then the return value\n   * will be `undefined`.\n   *\n   * @example\n   * import {Mapper, Schema} from 'js-data'\n   * const PersonSchema = new Schema({\n   *   properties: {\n   *     name: { type: 'string' },\n   *     id: { type: 'string' }\n   *   }\n   * });\n   * const PersonMapper = new Mapper({\n   *   name: 'person',\n   *   schema: PersonSchema\n   * });\n   * let errors = PersonMapper.validate({ name: 'John' });\n   * console.log(errors); // undefined\n   * errors = PersonMapper.validate({ name: 123 });\n   * console.log(errors); // [{ expected: 'one of (string)', actual: 'number', path: 'name' }]\n   *\n   * @method Mapper#validate\n   * @param {Object|Object[]} record The record or records to validate.\n   * @param {object} [opts] Configuration options. Passed to\n   * {@link Schema#validate}.\n   * @returns {Object[]} Array of errors or `undefined` if no errors.\n   * @since 3.0.0\n   */\n  validate (record, opts) {\n    opts || (opts = {})\n    const schema = this.getSchema()\n    if (!schema) {\n      return\n    }\n    const _opts = utils.pick(opts, ['existingOnly'])\n    if (utils.isArray(record)) {\n      const errors = record.map((_record) => schema.validate(_record, utils.pick(_opts, ['existingOnly'])))\n\n      return errors.some(Boolean) ? errors : undefined\n    }\n    return schema.validate(record, _opts)\n  },\n\n  /**\n   * Method used to wrap data returned by an adapter with this Mapper's\n   * {@link Mapper#recordClass}. This method is used by all of a Mapper's CRUD\n   * methods. The provided implementation of this method assumes that the `data`\n   * passed to it is a record or records that need to be wrapped with\n   * {@link Mapper#createRecord}. Override with care.\n   *\n   * Provided implementation of {@link Mapper#wrap}:\n   *\n   * ```\n   * function (data, opts) {\n   *   return this.createRecord(data, opts);\n   * }\n   * ```\n   *\n   * @example\n   * const PostMapper = new Mapper({\n   *   name: 'post',\n   *   // Override to customize behavior\n   *   wrap (data, opts) {\n   *     const originalWrap = this.constructor.prototype.wrap;\n   *     // Let's say \"GET /post\" doesn't return JSON quite like JSData expects,\n   *     // but the actual post records are nested under a \"posts\" field. So,\n   *     // we override Mapper#wrap to handle this special case.\n   *     if (opts.op === 'findAll') {\n   *       return originalWrap.call(this, data.posts, opts);\n   *     }\n   *     // Otherwise perform original behavior\n   *     return originalWrap.call(this, data, opts);\n   *   }\n   * });\n   *\n   * @method Mapper#wrap\n   * @param {Object|Object[]} data The record or records to be wrapped.\n   * @param {object} [opts] Configuration options. Passed to {@link Mapper#createRecord}.\n   * @returns {Record|Record[]} The wrapped record or records.\n   * @since 3.0.0\n   */\n  wrap (data, opts) {\n    return this.createRecord(data, opts)\n  },\n\n  /**\n   * @ignore\n   */\n  defineRelations () {\n    // Setup the mapper's relations, including generating Mapper#relationList\n    // and Mapper#relationFields\n    utils.forOwn(this.relations, (group, type) => {\n      utils.forOwn(group, (relations, _name) => {\n        if (utils.isObject(relations)) {\n          relations = [relations]\n        }\n        relations.forEach((def) => {\n          const relatedMapper = this.datastore.getMapperByName(_name) || _name\n          def.getRelation = () => this.datastore.getMapper(_name)\n\n          if (typeof Relation[type] !== 'function') {\n            throw utils.err(DOMAIN, 'defineRelations')(400, 'relation type (hasOne, hasMany, etc)', type, true)\n          }\n\n          this[type](relatedMapper, def)\n        })\n      })\n    })\n  }\n})\n\n/**\n * Create a subclass of this Mapper:\n *\n * @example <caption>Mapper.extend</caption>\n * const JSData = require('js-data');\n * const { Mapper } = JSData;\n * console.log('Using JSData v' + JSData.version.full);\n *\n * // Extend the class using ES2015 class syntax.\n * class CustomMapperClass extends Mapper {\n *   foo () { return 'bar'; }\n *   static beep () { return 'boop'; }\n * };\n * const customMapper = new CustomMapperClass();\n * console.log(customMapper.foo());\n * console.log(CustomMapperClass.beep());\n *\n * // Extend the class using alternate method.\n * const OtherMapperClass = Mapper.extend({\n *   foo () { return 'bar'; }\n * }, {\n *   beep () { return 'boop'; }\n * });\n * const otherMapper = new OtherMapperClass();\n * console.log(otherMapper.foo());\n * console.log(OtherMapperClass.beep());\n *\n * // Extend the class, providing a custom constructor.\n * function AnotherMapperClass () {\n *   Mapper.call(this);\n *   this.created_at = new Date().getTime();\n * }\n * Mapper.extend({\n *   constructor: AnotherMapperClass,\n *   foo () { return 'bar'; }\n * }, {\n *   beep () { return 'boop'; }\n * })\n * const anotherMapper = new AnotherMapperClass();\n * console.log(anotherMapper.created_at);\n * console.log(anotherMapper.foo());\n * console.log(AnotherMapperClass.beep());\n *\n * @method Mapper.extend\n * @param {object} [props={}] Properties to add to the prototype of the\n * subclass.\n * @param {object} [props.constructor] Provide a custom constructor function\n * to be used as the subclass itself.\n * @param {object} [classProps={}] Static properties to add to the subclass.\n * @returns {Constructor} Subclass of this Mapper class.\n * @since 3.0.0\n */\n","import utils from './utils'\nimport Component from './Component'\nimport Mapper from './Mapper'\n\nconst DOMAIN = 'Container'\n\nexport const proxiedMapperMethods = [\n  /**\n   * Wrapper for {@link Mapper#count}.\n   *\n   * @example\n   * // Get the number of published blog posts\n   * import { Container } from 'js-data';\n   * import RethinkDBAdapter from 'js-data-rethinkdb';\n   * const store = new Container();\n   * store.registerAdapter('rethinkdb', new RethinkDBAdapter(), { default: true });\n   * store.defineMapper('post');\n   *\n   * store.count('post', { status: 'published' }).then((numPublished) => {\n   *   console.log(numPublished); // e.g. 45\n   * });\n   *\n   * @method Container#count\n   * @param {string} name Name of the {@link Mapper} to target.\n   * @param {object} [query] See {@link Mapper#count}.\n   * @param {object} [opts] See {@link Mapper#count}.\n   * @returns {Promise} See {@link Mapper#count}.\n   * @see Mapper#count\n   * @since 3.0.0\n   */\n  'count',\n\n  /**\n   * Fired during {@link Container#create}. See\n   * {@link Container~beforeCreateListener} for how to listen for this event.\n   *\n   * @event Container#beforeCreate\n   * @see Container~beforeCreateListener\n   * @see Container#create\n   */\n  /**\n   * Callback signature for the {@link Container#event:beforeCreate} event.\n   *\n   * @example\n   * function onBeforeCreate (mapperName, props, opts) {\n   *   // do something\n   * }\n   * store.on('beforeCreate', onBeforeCreate);\n   *\n   * @callback Container~beforeCreateListener\n   * @param {string} name The `name` argument received by {@link Mapper#beforeCreate}.\n   * @param {object} props The `props` argument received by {@link Mapper#beforeCreate}.\n   * @param {object} opts The `opts` argument received by {@link Mapper#beforeCreate}.\n   * @see Container#event:beforeCreate\n   * @see Container#create\n   * @since 3.0.0\n   */\n  /**\n   * Fired during {@link Container#create}. See\n   * {@link Container~afterCreateListener} for how to listen for this event.\n   *\n   * @event Container#afterCreate\n   * @see Container~afterCreateListener\n   * @see Container#create\n   */\n  /**\n   * Callback signature for the {@link Container#event:afterCreate} event.\n   *\n   * @example\n   * function onAfterCreate (mapperName, props, opts, result) {\n   *   // do something\n   * }\n   * store.on('afterCreate', onAfterCreate);\n   *\n   * @callback Container~afterCreateListener\n   * @param {string} name The `name` argument received by {@link Mapper#afterCreate}.\n   * @param {object} props The `props` argument received by {@link Mapper#afterCreate}.\n   * @param {object} opts The `opts` argument received by {@link Mapper#afterCreate}.\n   * @param {object} result The `result` argument received by {@link Mapper#afterCreate}.\n   * @see Container#event:afterCreate\n   * @see Container#create\n   * @since 3.0.0\n   */\n  /**\n   * Wrapper for {@link Mapper#create}.\n   *\n   * @example\n   * // Create and save a new blog post\n   * import { Container } from 'js-data';\n   * import RethinkDBAdapter from 'js-data-rethinkdb';\n   * const store = new Container();\n   * store.registerAdapter('rethinkdb', new RethinkDBAdapter(), { default: true });\n   * store.defineMapper('post');\n   *\n   * store.create('post', {\n   *   title: 'Modeling your data',\n   *   status: 'draft'\n   * }).then((post) => {\n   *   console.log(post); // { id: 1234, status: 'draft', ... }\n   * });\n   *\n   * @fires Container#beforeCreate\n   * @fires Container#afterCreate\n   * @method Container#create\n   * @param {string} name Name of the {@link Mapper} to target.\n   * @param {object} props See {@link Mapper#create}.\n   * @param {object} [opts] See {@link Mapper#create}.\n   * @returns {Promise} See {@link Mapper#create}.\n   * @see Mapper#create\n   * @since 3.0.0\n   */\n  'create',\n\n  /**\n   * Fired during {@link Container#createMany}. See\n   * {@link Container~beforeCreateManyListener} for how to listen for this event.\n   *\n   * @event Container#beforeCreateMany\n   * @see Container~beforeCreateManyListener\n   * @see Container#createMany\n   */\n  /**\n   * Callback signature for the {@link Container#event:beforeCreateMany} event.\n   *\n   * @example\n   * function onBeforeCreateMany (mapperName, records, opts) {\n   *   // do something\n   * }\n   * store.on('beforeCreateMany', onBeforeCreateMany);\n   *\n   * @callback Container~beforeCreateManyListener\n   * @param {string} name The `name` argument received by {@link Mapper#beforeCreateMany}.\n   * @param {object} records The `records` argument received by {@link Mapper#beforeCreateMany}.\n   * @param {object} opts The `opts` argument received by {@link Mapper#beforeCreateMany}.\n   * @see Container#event:beforeCreateMany\n   * @see Container#createMany\n   * @since 3.0.0\n   */\n  /**\n   * Fired during {@link Container#createMany}. See\n   * {@link Container~afterCreateManyListener} for how to listen for this event.\n   *\n   * @event Container#afterCreateMany\n   * @see Container~afterCreateManyListener\n   * @see Container#createMany\n   */\n  /**\n   * Callback signature for the {@link Container#event:afterCreateMany} event.\n   *\n   * @example\n   * function onAfterCreateMany (mapperName, records, opts, result) {\n   *   // do something\n   * }\n   * store.on('afterCreateMany', onAfterCreateMany);\n   *\n   * @callback Container~afterCreateManyListener\n   * @param {string} name The `name` argument received by {@link Mapper#afterCreateMany}.\n   * @param {object} records The `records` argument received by {@link Mapper#afterCreateMany}.\n   * @param {object} opts The `opts` argument received by {@link Mapper#afterCreateMany}.\n   * @param {object} result The `result` argument received by {@link Mapper#afterCreateMany}.\n   * @see Container#event:afterCreateMany\n   * @see Container#createMany\n   * @since 3.0.0\n   */\n  /**\n   * Wrapper for {@link Mapper#createMany}.\n   *\n   * @example\n   * // Create and save several new blog posts\n   * import { Container } from 'js-data';\n   * import RethinkDBAdapter from 'js-data-rethinkdb';\n   * const store = new Container();\n   * store.registerAdapter('rethinkdb', new RethinkDBAdapter(), { default: true });\n   * store.defineMapper('post');\n   *\n   * store.createMany('post', [{\n   *   title: 'Modeling your data',\n   *   status: 'draft'\n   * }, {\n   *   title: 'Reading data',\n   *   status: 'draft'\n   * }]).then((posts) => {\n   *   console.log(posts[0]); // { id: 1234, status: 'draft', ... }\n   *   console.log(posts[1]); // { id: 1235, status: 'draft', ... }\n   * });\n   *\n   * @fires Container#beforeCreateMany\n   * @fires Container#afterCreateMany\n   * @method Container#createMany\n   * @param {string} name Name of the {@link Mapper} to target.\n   * @param {Record[]} records See {@link Mapper#createMany}.\n   * @param {object} [opts] See {@link Mapper#createMany}.\n   * @returns {Promise} See {@link Mapper#createMany}.\n   * @see Mapper#createMany\n   * @since 3.0.0\n   */\n  'createMany',\n\n  /**\n   * Wrapper for {@link Mapper#createRecord}.\n   *\n   * __Note:__ This method does __not__ interact with any adapter, and does\n   * __not__ save any data. It only creates new objects in memory.\n   *\n   * @example\n   * // Create empty unsaved record instance\n   * import { Container } from 'js-data';\n   * const store = new Container();\n   * store.defineMapper('post');\n   * const post = PostMapper.createRecord();\n   *\n   * @method Container#createRecord\n   * @param {string} name Name of the {@link Mapper} to target.\n   * @param {Object|Object[]} props See {@link Mapper#createRecord}.\n   * @param {object} [opts] See {@link Mapper#createRecord}.\n   * @returns {Promise} See {@link Mapper#createRecord}.\n   * @see Mapper#createRecord\n   * @since 3.0.0\n   */\n  'createRecord',\n\n  /**\n   * Fired during {@link Container#destroy}. See\n   * {@link Container~beforeDestroyListener} for how to listen for this event.\n   *\n   * @event Container#beforeDestroy\n   * @see Container~beforeDestroyListener\n   * @see Container#destroy\n   */\n  /**\n   * Callback signature for the {@link Container#event:beforeDestroy} event.\n   *\n   * @example\n   * function onBeforeDestroy (mapperName, id, opts) {\n   *   // do something\n   * }\n   * store.on('beforeDestroy', onBeforeDestroy);\n   *\n   * @callback Container~beforeDestroyListener\n   * @param {string} name The `name` argument received by {@link Mapper#beforeDestroy}.\n   * @param {string|number} id The `id` argument received by {@link Mapper#beforeDestroy}.\n   * @param {object} opts The `opts` argument received by {@link Mapper#beforeDestroy}.\n   * @see Container#event:beforeDestroy\n   * @see Container#destroy\n   * @since 3.0.0\n   */\n  /**\n   * Fired during {@link Container#destroy}. See\n   * {@link Container~afterDestroyListener} for how to listen for this event.\n   *\n   * @event Container#afterDestroy\n   * @see Container~afterDestroyListener\n   * @see Container#destroy\n   */\n  /**\n   * Callback signature for the {@link Container#event:afterDestroy} event.\n   *\n   * @example\n   * function onAfterDestroy (mapperName, id, opts, result) {\n   *   // do something\n   * }\n   * store.on('afterDestroy', onAfterDestroy);\n   *\n   * @callback Container~afterDestroyListener\n   * @param {string} name The `name` argument received by {@link Mapper#afterDestroy}.\n   * @param {string|number} id The `id` argument received by {@link Mapper#afterDestroy}.\n   * @param {object} opts The `opts` argument received by {@link Mapper#afterDestroy}.\n   * @param {object} result The `result` argument received by {@link Mapper#afterDestroy}.\n   * @see Container#event:afterDestroy\n   * @see Container#destroy\n   * @since 3.0.0\n   */\n  /**\n   * Wrapper for {@link Mapper#destroy}.\n   *\n   * @example\n   * // Destroy a specific blog post\n   * import { Container } from 'js-data';\n   * import RethinkDBAdapter from 'js-data-rethinkdb';\n   * const store = new Container();\n   * store.registerAdapter('rethinkdb', new RethinkDBAdapter(), { default: true });\n   * store.defineMapper('post');\n   *\n   * store.destroy('post', 1234).then(() => {\n   *   // Blog post #1234 has been destroyed\n   * });\n   *\n   * @fires Container#beforeDestroy\n   * @fires Container#afterDestroy\n   * @method Container#destroy\n   * @param {string} name Name of the {@link Mapper} to target.\n   * @param {(string|number)} id See {@link Mapper#destroy}.\n   * @param {object} [opts] See {@link Mapper#destroy}.\n   * @returns {Promise} See {@link Mapper#destroy}.\n   * @see Mapper#destroy\n   * @since 3.0.0\n   */\n  'destroy',\n\n  /**\n   * Fired during {@link Container#destroyAll}. See\n   * {@link Container~beforeDestroyAllListener} for how to listen for this event.\n   *\n   * @event Container#beforeDestroyAll\n   * @see Container~beforeDestroyAllListener\n   * @see Container#destroyAll\n   */\n  /**\n   * Callback signature for the {@link Container#event:beforeDestroyAll} event.\n   *\n   * @example\n   * function onBeforeDestroyAll (mapperName, query, opts) {\n   *   // do something\n   * }\n   * store.on('beforeDestroyAll', onBeforeDestroyAll);\n   *\n   * @callback Container~beforeDestroyAllListener\n   * @param {string} name The `name` argument received by {@link Mapper#beforeDestroyAll}.\n   * @param {object} query The `query` argument received by {@link Mapper#beforeDestroyAll}.\n   * @param {object} opts The `opts` argument received by {@link Mapper#beforeDestroyAll}.\n   * @see Container#event:beforeDestroyAll\n   * @see Container#destroyAll\n   * @since 3.0.0\n   */\n  /**\n   * Fired during {@link Container#destroyAll}. See\n   * {@link Container~afterDestroyAllListener} for how to listen for this event.\n   *\n   * @event Container#afterDestroyAll\n   * @see Container~afterDestroyAllListener\n   * @see Container#destroyAll\n   */\n  /**\n   * Callback signature for the {@link Container#event:afterDestroyAll} event.\n   *\n   * @example\n   * function onAfterDestroyAll (mapperName, query, opts, result) {\n   *   // do something\n   * }\n   * store.on('afterDestroyAll', onAfterDestroyAll);\n   *\n   * @callback Container~afterDestroyAllListener\n   * @param {string} name The `name` argument received by {@link Mapper#afterDestroyAll}.\n   * @param {object} query The `query` argument received by {@link Mapper#afterDestroyAll}.\n   * @param {object} opts The `opts` argument received by {@link Mapper#afterDestroyAll}.\n   * @param {object} result The `result` argument received by {@link Mapper#afterDestroyAll}.\n   * @see Container#event:afterDestroyAll\n   * @see Container#destroyAll\n   * @since 3.0.0\n   */\n  /**\n   * Wrapper for {@link Mapper#destroyAll}.\n   *\n   * @example\n   * // Destroy all \"draft\" blog posts\n   * import { Container } from 'js-data';\n   * import RethinkDBAdapter from 'js-data-rethinkdb';\n   * const store = new Container();\n   * store.registerAdapter('rethinkdb', new RethinkDBAdapter(), { default: true });\n   * store.defineMapper('post');\n   *\n   * store.destroyAll('post', { status: 'draft' }).then(() => {\n   *   // All \"draft\" blog posts have been destroyed\n   * });\n   *\n   * @fires Container#beforeDestroyAll\n   * @fires Container#afterDestroyAll\n   * @method Container#destroyAll\n   * @param {string} name Name of the {@link Mapper} to target.\n   * @param {object} [query] See {@link Mapper#destroyAll}.\n   * @param {object} [opts] See {@link Mapper#destroyAll}.\n   * @returns {Promise} See {@link Mapper#destroyAll}.\n   * @see Mapper#destroyAll\n   * @since 3.0.0\n   */\n  'destroyAll',\n\n  /**\n   * Fired during {@link Container#find}. See\n   * {@link Container~beforeFindListener} for how to listen for this event.\n   *\n   * @event Container#beforeFind\n   * @see Container~beforeFindListener\n   * @see Container#find\n   */\n  /**\n   * Callback signature for the {@link Container#event:beforeFind} event.\n   *\n   * @example\n   * function onBeforeFind (mapperName, id, opts) {\n   *   // do something\n   * }\n   * store.on('beforeFind', onBeforeFind);\n   *\n   * @callback Container~beforeFindListener\n   * @param {string} name The `name` argument received by {@link Mapper#beforeFind}.\n   * @param {string|number} id The `id` argument received by {@link Mapper#beforeFind}.\n   * @param {object} opts The `opts` argument received by {@link Mapper#beforeFind}.\n   * @see Container#event:beforeFind\n   * @see Container#find\n   * @since 3.0.0\n   */\n  /**\n   * Fired during {@link Container#find}. See\n   * {@link Container~afterFindListener} for how to listen for this event.\n   *\n   * @event Container#afterFind\n   * @see Container~afterFindListener\n   * @see Container#find\n   */\n  /**\n   * Callback signature for the {@link Container#event:afterFind} event.\n   *\n   * @example\n   * function onAfterFind (mapperName, id, opts, result) {\n   *   // do something\n   * }\n   * store.on('afterFind', onAfterFind);\n   *\n   * @callback Container~afterFindListener\n   * @param {string} name The `name` argument received by {@link Mapper#afterFind}.\n   * @param {string|number} id The `id` argument received by {@link Mapper#afterFind}.\n   * @param {object} opts The `opts` argument received by {@link Mapper#afterFind}.\n   * @param {object} result The `result` argument received by {@link Mapper#afterFind}.\n   * @see Container#event:afterFind\n   * @see Container#find\n   * @since 3.0.0\n   */\n  /**\n   * Wrapper for {@link Mapper#find}.\n   *\n   * @example\n   * import { Container } from 'js-data';\n   * import RethinkDBAdapter from 'js-data-rethinkdb';\n   * const store = new Container();\n   * store.registerAdapter('rethinkdb', new RethinkDBAdapter(), { default: true });\n   * store.defineMapper('post');\n   *\n   * store.find('post', 1).then((post) => {\n   *   console.log(post) // { id: 1, ...}\n   * });\n   *\n   * @fires Container#beforeFind\n   * @fires Container#afterFind\n   * @method Container#find\n   * @param {string} name Name of the {@link Mapper} to target.\n   * @param {(string|number)} id See {@link Mapper#find}.\n   * @param {object} [opts] See {@link Mapper#find}.\n   * @returns {Promise} See {@link Mapper#find}.\n   * @see Mapper#find\n   * @since 3.0.0\n   */\n  'find',\n\n  /**\n   * Fired during {@link Container#findAll}. See\n   * {@link Container~beforeFindAllListener} for how to listen for this event.\n   *\n   * @event Container#beforeFindAll\n   * @see Container~beforeFindAllListener\n   * @see Container#findAll\n   */\n  /**\n   * Callback signature for the {@link Container#event:beforeFindAll} event.\n   *\n   * @example\n   * function onBeforeFindAll (mapperName, query, opts) {\n   *   // do something\n   * }\n   * store.on('beforeFindAll', onBeforeFindAll);\n   *\n   * @callback Container~beforeFindAllListener\n   * @param {string} name The `name` argument received by {@link Mapper#beforeFindAll}.\n   * @param {object} query The `query` argument received by {@link Mapper#beforeFindAll}.\n   * @param {object} opts The `opts` argument received by {@link Mapper#beforeFindAll}.\n   * @see Container#event:beforeFindAll\n   * @see Container#findAll\n   * @since 3.0.0\n   */\n  /**\n   * Fired during {@link Container#findAll}. See\n   * {@link Container~afterFindAllListener} for how to listen for this event.\n   *\n   * @event Container#afterFindAll\n   * @see Container~afterFindAllListener\n   * @see Container#findAll\n   */\n  /**\n   * Callback signature for the {@link Container#event:afterFindAll} event.\n   *\n   * @example\n   * function onAfterFindAll (mapperName, query, opts, result) {\n   *   // do something\n   * }\n   * store.on('afterFindAll', onAfterFindAll);\n   *\n   * @callback Container~afterFindAllListener\n   * @param {string} name The `name` argument received by {@link Mapper#afterFindAll}.\n   * @param {object} query The `query` argument received by {@link Mapper#afterFindAll}.\n   * @param {object} opts The `opts` argument received by {@link Mapper#afterFindAll}.\n   * @param {object} result The `result` argument received by {@link Mapper#afterFindAll}.\n   * @see Container#event:afterFindAll\n   * @see Container#findAll\n   * @since 3.0.0\n   */\n  /**\n   * Wrapper for {@link Mapper#createRecord}.\n   *\n   * @example\n   * // Find all \"published\" blog posts\n   * import { Container } from 'js-data';\n   * import RethinkDBAdapter from 'js-data-rethinkdb';\n   * const store = new Container();\n   * store.registerAdapter('rethinkdb', new RethinkDBAdapter(), { default: true });\n   * store.defineMapper('post');\n   *\n   * store.findAll('post', { status: 'published' }).then((posts) => {\n   *   console.log(posts); // [{ id: 1, ...}, ...]\n   * });\n   *\n   * @fires Container#beforeFindAll\n   * @fires Container#afterFindAll\n   * @method Container#findAll\n   * @param {string} name Name of the {@link Mapper} to target.\n   * @param {object} [query] See {@link Mapper#findAll}.\n   * @param {object} [opts] See {@link Mapper#findAll}.\n   * @returns {Promise} See {@link Mapper#findAll}.\n   * @see Mapper#findAll\n   * @since 3.0.0\n   */\n  'findAll',\n\n  /**\n   * Wrapper for {@link Mapper#getSchema}.\n   *\n   * @method Container#getSchema\n   * @param {string} name Name of the {@link Mapper} to target.\n   * @returns {Schema} See {@link Mapper#getSchema}.\n   * @see Mapper#getSchema\n   * @since 3.0.0\n   */\n  'getSchema',\n\n  /**\n   * Wrapper for {@link Mapper#is}.\n   *\n   * @example\n   * import { Container } from 'js-data';\n   * const store = new Container();\n   * store.defineMapper('post');\n   * const post = store.createRecord();\n   *\n   * console.log(store.is('post', post)); // true\n   * // Equivalent to what's above\n   * console.log(post instanceof store.getMapper('post').recordClass); // true\n   *\n   * @method Container#is\n   * @param {string} name Name of the {@link Mapper} to target.\n   * @param {Object|Record} record See {@link Mapper#is}.\n   * @returns {boolean} See {@link Mapper#is}.\n   * @see Mapper#is\n   * @since 3.0.0\n   */\n  'is',\n\n  /**\n   * Wrapper for {@link Mapper#sum}.\n   *\n   * @example\n   * import { Container } from 'js-data';\n   * import RethinkDBAdapter from 'js-data-rethinkdb';\n   * const store = new Container();\n   * store.registerAdapter('rethinkdb', new RethinkDBAdapter(), { default: true });\n   * store.defineMapper('purchase_order');\n   *\n   * store.sum('purchase_order', 'amount', { status: 'paid' }).then((amountPaid) => {\n   *   console.log(amountPaid); // e.g. 451125.34\n   * });\n   *\n   * @method Container#sum\n   * @param {string} name Name of the {@link Mapper} to target.\n   * @param {string} field See {@link Mapper#sum}.\n   * @param {object} [query] See {@link Mapper#sum}.\n   * @param {object} [opts] See {@link Mapper#sum}.\n   * @returns {Promise} See {@link Mapper#sum}.\n   * @see Mapper#sum\n   * @since 3.0.0\n   */\n  'sum',\n\n  /**\n   * Wrapper for {@link Mapper#toJSON}.\n   *\n   * @example\n   * import { Container } from 'js-data';\n   * import RethinkDBAdapter from 'js-data-rethinkdb';\n   * const store = new Container();\n   * store.registerAdapter('rethinkdb', new RethinkDBAdapter(), { default: true });\n   * store.defineMapper('person', {\n   *   schema: {\n   *     properties: {\n   *       name: { type: 'string' },\n   *       id: { type: 'string' }\n   *     }\n   *   }\n   * });\n   * const person = store.createRecord('person', { id: 1, name: 'John', foo: 'bar' });\n   * // \"foo\" is stripped by toJSON()\n   * console.log(store.toJSON('person', person)); // {\"id\":1,\"name\":\"John\"}\n   *\n   * store.defineMapper('personRelaxed', {\n   *   schema: {\n   *     properties: {\n   *       name: { type: 'string' },\n   *       id: { type: 'string' }\n   *     },\n   *     additionalProperties: true\n   *   }\n   * });\n   * const person2 = store.createRecord('personRelaxed', { id: 1, name: 'John', foo: 'bar' });\n   * // \"foo\" is not stripped by toJSON\n   * console.log(store.toJSON('personRelaxed', person2)); // {\"id\":1,\"name\":\"John\",\"foo\":\"bar\"}\n   *\n   * @method Container#toJSON\n   * @param {string} name Name of the {@link Mapper} to target.\n   * @param {Record|Record[]} records See {@link Mapper#toJSON}.\n   * @param {object} [opts] See {@link Mapper#toJSON}.\n   * @returns {Object|Object[]} See {@link Mapper#toJSON}.\n   * @see Mapper#toJSON\n   * @since 3.0.0\n   */\n  'toJSON',\n\n  /**\n   * Fired during {@link Container#update}. See\n   * {@link Container~beforeUpdateListener} for how to listen for this event.\n   *\n   * @event Container#beforeUpdate\n   * @see Container~beforeUpdateListener\n   * @see Container#update\n   */\n  /**\n   * Callback signature for the {@link Container#event:beforeUpdate} event.\n   *\n   * @example\n   * function onBeforeUpdate (mapperName, id, props, opts) {\n   *   // do something\n   * }\n   * store.on('beforeUpdate', onBeforeUpdate);\n   *\n   * @callback Container~beforeUpdateListener\n   * @param {string} name The `name` argument received by {@link Mapper#beforeUpdate}.\n   * @param {string|number} id The `id` argument received by {@link Mapper#beforeUpdate}.\n   * @param {object} props The `props` argument received by {@link Mapper#beforeUpdate}.\n   * @param {object} opts The `opts` argument received by {@link Mapper#beforeUpdate}.\n   * @see Container#event:beforeUpdate\n   * @see Container#update\n   * @since 3.0.0\n   */\n  /**\n   * Fired during {@link Container#update}. See\n   * {@link Container~afterUpdateListener} for how to listen for this event.\n   *\n   * @event Container#afterUpdate\n   * @see Container~afterUpdateListener\n   * @see Container#update\n   */\n  /**\n   * Callback signature for the {@link Container#event:afterUpdate} event.\n   *\n   * @example\n   * function onAfterUpdate (mapperName, id, props, opts, result) {\n   *   // do something\n   * }\n   * store.on('afterUpdate', onAfterUpdate);\n   *\n   * @callback Container~afterUpdateListener\n   * @param {string} name The `name` argument received by {@link Mapper#afterUpdate}.\n   * @param {string|number} id The `id` argument received by {@link Mapper#afterUpdate}.\n   * @param {object} props The `props` argument received by {@link Mapper#afterUpdate}.\n   * @param {object} opts The `opts` argument received by {@link Mapper#afterUpdate}.\n   * @param {object} result The `result` argument received by {@link Mapper#afterUpdate}.\n   * @see Container#event:afterUpdate\n   * @see Container#update\n   * @since 3.0.0\n   */\n  /**\n   * Wrapper for {@link Mapper#update}.\n   *\n   * @example\n   * import { Container } from 'js-data';\n   * import RethinkDBAdapter from 'js-data-rethinkdb';\n   * const store = new Container();\n   * store.registerAdapter('rethinkdb', new RethinkDBAdapter(), { default: true });\n   * store.defineMapper('post');\n   *\n   * store.update('post', 1234, {\n   *   status: 'published',\n   *   published_at: new Date()\n   * }).then((post) => {\n   *   console.log(post); // { id: 1234, status: 'published', ... }\n   * });\n   *\n   * @fires Container#beforeUpdate\n   * @fires Container#afterUpdate\n   * @method Container#update\n   * @param {string} name Name of the {@link Mapper} to target.\n   * @param {(string|number)} id See {@link Mapper#update}.\n   * @param {object} record See {@link Mapper#update}.\n   * @param {object} [opts] See {@link Mapper#update}.\n   * @returns {Promise} See {@link Mapper#update}.\n   * @see Mapper#update\n   * @since 3.0.0\n   * @tutorial [\"http://www.js-data.io/v3.0/docs/saving-data\",\"Saving data\"]\n   */\n  'update',\n\n  /**\n   * Fired during {@link Container#updateAll}. See\n   * {@link Container~beforeUpdateAllListener} for how to listen for this event.\n   *\n   * @event Container#beforeUpdateAll\n   * @see Container~beforeUpdateAllListener\n   * @see Container#updateAll\n   */\n  /**\n   * Callback signature for the {@link Container#event:beforeUpdateAll} event.\n   *\n   * @example\n   * function onBeforeUpdateAll (mapperName, props, query, opts) {\n   *   // do something\n   * }\n   * store.on('beforeUpdateAll', onBeforeUpdateAll);\n   *\n   * @callback Container~beforeUpdateAllListener\n   * @param {string} name The `name` argument received by {@link Mapper#beforeUpdateAll}.\n   * @param {object} props The `props` argument received by {@link Mapper#beforeUpdateAll}.\n   * @param {object} query The `query` argument received by {@link Mapper#beforeUpdateAll}.\n   * @param {object} opts The `opts` argument received by {@link Mapper#beforeUpdateAll}.\n   * @see Container#event:beforeUpdateAll\n   * @see Container#updateAll\n   * @since 3.0.0\n   */\n  /**\n   * Fired during {@link Container#updateAll}. See\n   * {@link Container~afterUpdateAllListener} for how to listen for this event.\n   *\n   * @event Container#afterUpdateAll\n   * @see Container~afterUpdateAllListener\n   * @see Container#updateAll\n   */\n  /**\n   * Callback signature for the {@link Container#event:afterUpdateAll} event.\n   *\n   * @example\n   * function onAfterUpdateAll (mapperName, props, query, opts, result) {\n   *   // do something\n   * }\n   * store.on('afterUpdateAll', onAfterUpdateAll);\n   *\n   * @callback Container~afterUpdateAllListener\n   * @param {string} name The `name` argument received by {@link Mapper#afterUpdateAll}.\n   * @param {object} props The `props` argument received by {@link Mapper#afterUpdateAll}.\n   * @param {object} query The `query` argument received by {@link Mapper#afterUpdateAll}.\n   * @param {object} opts The `opts` argument received by {@link Mapper#afterUpdateAll}.\n   * @param {object} result The `result` argument received by {@link Mapper#afterUpdateAll}.\n   * @see Container#event:afterUpdateAll\n   * @see Container#updateAll\n   * @since 3.0.0\n   */\n  /**\n   * Wrapper for {@link Mapper#updateAll}.\n   *\n   * @example\n   * // Turn all of John's blog posts into drafts.\n   * import { Container } from 'js-data';\n   * import RethinkDBAdapter from 'js-data-rethinkdb';\n   * const store = new Container();\n   * store.registerAdapter('rethinkdb', new RethinkDBAdapter(), { default: true });\n   * store.defineMapper('post');\n   *\n   * const update = { status: draft: published_at: null };\n   * const query = { userId: 1234 };\n   * store.updateAll('post', update, query).then((posts) => {\n   *   console.log(posts); // [...]\n   * });\n   *\n   * @fires Container#beforeUpdateAll\n   * @fires Container#afterUpdateAll\n   * @method Container#updateAll\n   * @param {string} name Name of the {@link Mapper} to target.\n   * @param {object} update See {@link Mapper#updateAll}.\n   * @param {object} [query] See {@link Mapper#updateAll}.\n   * @param {object} [opts] See {@link Mapper#updateAll}.\n   * @returns {Promise} See {@link Mapper#updateAll}.\n   * @see Mapper#updateAll\n   * @since 3.0.0\n   */\n  'updateAll',\n\n  /**\n   * Fired during {@link Container#updateMany}. See\n   * {@link Container~beforeUpdateManyListener} for how to listen for this event.\n   *\n   * @event Container#beforeUpdateMany\n   * @see Container~beforeUpdateManyListener\n   * @see Container#updateMany\n   */\n  /**\n   * Callback signature for the {@link Container#event:beforeUpdateMany} event.\n   *\n   * @example\n   * function onBeforeUpdateMany (mapperName, records, opts) {\n   *   // do something\n   * }\n   * store.on('beforeUpdateMany', onBeforeUpdateMany);\n   *\n   * @callback Container~beforeUpdateManyListener\n   * @param {string} name The `name` argument received by {@link Mapper#beforeUpdateMany}.\n   * @param {object} records The `records` argument received by {@link Mapper#beforeUpdateMany}.\n   * @param {object} opts The `opts` argument received by {@link Mapper#beforeUpdateMany}.\n   * @see Container#event:beforeUpdateMany\n   * @see Container#updateMany\n   * @since 3.0.0\n   */\n  /**\n   * Fired during {@link Container#updateMany}. See\n   * {@link Container~afterUpdateManyListener} for how to listen for this event.\n   *\n   * @event Container#afterUpdateMany\n   * @see Container~afterUpdateManyListener\n   * @see Container#updateMany\n   */\n  /**\n   * Callback signature for the {@link Container#event:afterUpdateMany} event.\n   *\n   * @example\n   * function onAfterUpdateMany (mapperName, records, opts, result) {\n   *   // do something\n   * }\n   * store.on('afterUpdateMany', onAfterUpdateMany);\n   *\n   * @callback Container~afterUpdateManyListener\n   * @param {string} name The `name` argument received by {@link Mapper#afterUpdateMany}.\n   * @param {object} records The `records` argument received by {@link Mapper#afterUpdateMany}.\n   * @param {object} opts The `opts` argument received by {@link Mapper#afterUpdateMany}.\n   * @param {object} result The `result` argument received by {@link Mapper#afterUpdateMany}.\n   * @see Container#event:afterUpdateMany\n   * @see Container#updateMany\n   * @since 3.0.0\n   */\n  /**\n   * Wrapper for {@link Mapper#updateMany}.\n   *\n   * @example\n   * import { Container } from 'js-data';\n   * import RethinkDBAdapter from 'js-data-rethinkdb';\n   * const store = new Container();\n   * store.registerAdapter('rethinkdb', new RethinkDBAdapter(), { default: true });\n   * store.defineMapper('post');\n   *\n   * store.updateMany('post', [\n   *   { id: 1234, status: 'draft' },\n   *   { id: 2468, status: 'published', published_at: new Date() }\n   * ]).then((posts) => {\n   *   console.log(posts); // [...]\n   * });\n   *\n   * @fires Container#beforeUpdateMany\n   * @fires Container#afterUpdateMany\n   * @method Container#updateMany\n   * @param {string} name Name of the {@link Mapper} to target.\n   * @param {(Object[]|Record[])} records See {@link Mapper#updateMany}.\n   * @param {object} [opts] See {@link Mapper#updateMany}.\n   * @returns {Promise} See {@link Mapper#updateMany}.\n   * @see Mapper#updateMany\n   * @since 3.0.0\n   */\n  'updateMany',\n\n  /**\n   * Wrapper for {@link Mapper#validate}.\n   *\n   * @example\n   * import { Container } from 'js-data';\n   * const store = new Container();\n   * store.defineMapper('post', {\n   *   schema: {\n   *     properties: {\n   *       name: { type: 'string' },\n   *       id: { type: 'string' }\n   *     }\n   *   }\n   * });\n   * let errors = store.validate('post', { name: 'John' });\n   * console.log(errors); // undefined\n   * errors = store.validate('post', { name: 123 });\n   * console.log(errors); // [{ expected: 'one of (string)', actual: 'number', path: 'name' }]\n   *\n   * @method Container#validate\n   * @param {string} name Name of the {@link Mapper} to target.\n   * @param {(Object[]|Record[])} records See {@link Mapper#validate}.\n   * @param {object} [opts] See {@link Mapper#validate}.\n   * @returns {Promise} See {@link Mapper#validate}.\n   * @see Mapper#validate\n   * @since 3.0.0\n   */\n  'validate'\n]\n\n/**\n * The `Container` class is a place to define and store {@link Mapper} instances.\n *\n * `Container` makes it easy to manage your Mappers. Without a container, you\n * need to manage Mappers yourself, including resolving circular dependencies\n * among relations. All Mappers in a container share the same adapters, so you\n * don't have to register adapters for every single Mapper.\n *\n * @example <caption>Container#constructor</caption>\n * // import { Container } from 'js-data';\n * const JSData = require('js-data');\n * const {Container} = JSData;\n * console.log('Using JSData v' + JSData.version.full);\n *\n * const store = new Container();\n *\n * @class Container\n * @extends Component\n * @param {object} [opts] Configuration options.\n * @param {boolean} [opts.debug=false] See {@link Component#debug}.\n * @param {Constructor} [opts.mapperClass] See {@link Container#mapperClass}.\n * @param {object} [opts.mapperDefaults] See {@link Container#mapperDefaults}.\n * @since 3.0.0\n */\nexport function Container (opts) {\n  utils.classCallCheck(this, Container)\n  Component.call(this)\n  opts || (opts = {})\n\n  Object.defineProperties(this, {\n    /**\n     * The adapters registered with this Container, which are also shared by all\n     * Mappers in this Container.\n     *\n     * @name Container#_adapters\n     * @see Container#registerAdapter\n     * @since 3.0.0\n     * @type {Object}\n     */\n    _adapters: {\n      value: {}\n    },\n\n    /**\n     * The the mappers in this container\n     *\n     * @name Container#_mappers\n     * @see Mapper\n     * @since 3.0.0\n     * @type {Object}\n     */\n    _mappers: {\n      value: {}\n    },\n\n    /**\n     * Constructor function to use in {@link Container#defineMapper} to create new\n     * {@link Mapper} instances. {@link Container#mapperClass} should extend\n     * {@link Mapper}. By default {@link Mapper} is used to instantiate Mappers.\n     *\n     * @example <caption>Container#mapperClass</caption>\n     * // import { Container, Mapper } from 'js-data';\n     * const JSData = require('js-data');\n     * const { Container, Mapper } = JSData;\n     * console.log('Using JSData v' + JSData.version.full);\n     *\n     * class MyMapperClass extends Mapper {\n     *   foo () { return 'bar' }\n     * }\n     * const store = new Container({\n     *   mapperClass: MyMapperClass\n     * });\n     * store.defineMapper('user');\n     * console.log(store.getMapper('user').foo());\n     *\n     * @name Container#mapperClass\n     * @see Mapper\n     * @since 3.0.0\n     * @type {Constructor}\n     */\n    mapperClass: {\n      value: undefined,\n      writable: true\n    }\n  })\n\n  // Apply options provided by the user\n  utils.fillIn(this, opts)\n\n  /**\n   * Defaults options to pass to {@link Container#mapperClass} when creating a\n   * new {@link Mapper}.\n   *\n   * @example <caption>Container#mapperDefaults</caption>\n   * // import { Container } from 'js-data';\n   * const JSData = require('js-data');\n   * const { Container } = JSData;\n   * console.log('Using JSData v' + JSData.version.full);\n   *\n   * const store = new Container({\n   *   mapperDefaults: {\n   *     idAttribute: '_id'\n   *   }\n   * });\n   * store.defineMapper('user');\n   * console.log(store.getMapper('user').idAttribute);\n   *\n   * @default {}\n   * @name Container#mapperDefaults\n   * @since 3.0.0\n   * @type {Object}\n   */\n  this.mapperDefaults = this.mapperDefaults || {}\n\n  // Use the Mapper class if the user didn't provide a mapperClass\n  this.mapperClass || (this.mapperClass = Mapper)\n}\n\nconst props = {\n  constructor: Container,\n\n  /**\n   * Register a new event listener on this Container.\n   *\n   * Proxy for {@link Component#on}. If an event was emitted by a {@link Mapper}\n   * in the Container, then the name of the {@link Mapper} will be prepended to\n   * the arugments passed to the listener.\n   *\n   * @example <caption>Container#on</caption>\n   * // import { Container } from 'js-data';\n   * const JSData = require('js-data');\n   * const { Container } = JSData;\n   * console.log('Using JSData v' + JSData.version.full);\n   *\n   * const store = new Container();\n   * store.on('foo', function (...args) { console.log(args.join(':')) });\n   * store.defineMapper('user');\n   * store.emit('foo', 'arg1', 'arg2');\n   * store.getMapper('user').emit('foo', 'arg1', 'arg2');\n   *\n   * @method Container#on\n   * @param {string} event Name of event to subsribe to.\n   * @param {Function} listener Listener function to handle the event.\n   * @param {*} [ctx] Optional content in which to invoke the listener.\n   * @since 3.0.0\n   */\n\n  /**\n   * Used to bind to events emitted by mappers in this container.\n   *\n   * @method Container#_onMapperEvent\n   * @param {string} name Name of the mapper that emitted the event.\n   * @param {...*} [args] Args See {@link Mapper#emit}.\n   * @private\n   * @since 3.0.0\n   */\n  _onMapperEvent (name, ...args) {\n    const type = args.shift()\n    this.emit(type, name, ...args)\n  },\n\n  /**\n   * Return a container scoped to a particular mapper.\n   *\n   * @example <caption>Container#as</caption>\n   * // import { Container } from 'js-data';\n   * const JSData = require('js-data');\n   * const { Container } = JSData;\n   * console.log('Using JSData v' + JSData.version.full);\n   *\n   * const store = new Container();\n   * const UserMapper = store.defineMapper('user');\n   * const UserStore = store.as('user');\n   *\n   * const user1 = store.createRecord('user', { name: 'John' });\n   * const user2 = UserStore.createRecord({ name: 'John' });\n   * const user3 = UserMapper.createRecord({ name: 'John' });\n   * console.log(user1 === user2);\n   * console.log(user2 === user3);\n   * console.log(user1 === user3);\n   *\n   * @method Container#as\n   * @param {string} name Name of the {@link Mapper}.\n   * @returns {Object} A container scoped to a particular mapper.\n   * @since 3.0.0\n   */\n  as (name) {\n    const props = {}\n    const original = this\n    proxiedMapperMethods.forEach(function (method) {\n      props[method] = {\n        writable: true,\n        value (...args) {\n          return original[method](name, ...args)\n        }\n      }\n    })\n    props.getMapper = {\n      writable: true,\n      value () {\n        return original.getMapper(name)\n      }\n    }\n    return Object.create(this, props)\n  },\n\n  /**\n   * Create a new mapper and register it in this container.\n   *\n   * @example <caption>Container#defineMapper</caption>\n   * // import { Container } from 'js-data';\n   * const JSData = require('js-data');\n   * const { Container } = JSData;\n   * console.log('Using JSData v' + JSData.version.full);\n   *\n   * const store = new Container({\n   *   mapperDefaults: { foo: 'bar' }\n   * });\n   * // Container#defineMapper returns a direct reference to the newly created\n   * // Mapper.\n   * const UserMapper = store.defineMapper('user');\n   * console.log(UserMapper === store.getMapper('user'));\n   * console.log(UserMapper === store.as('user').getMapper());\n   * console.log(UserMapper.foo);\n   *\n   * @method Container#defineMapper\n   * @param {string} name Name under which to register the new {@link Mapper}.\n   * {@link Mapper#name} will be set to this value.\n   * @param {object} [opts] Configuration options. Passed to\n   * {@link Container#mapperClass} when creating the new {@link Mapper}.\n   * @returns {Mapper} The newly created instance of {@link Mapper}.\n   * @see Container#as\n   * @since 3.0.0\n   */\n  defineMapper (name, opts) {\n    // For backwards compatibility with defineResource\n    if (utils.isObject(name)) {\n      opts = name\n      name = opts.name\n    }\n    if (!utils.isString(name)) {\n      throw utils.err(`${DOMAIN}#defineMapper`, 'name')(400, 'string', name)\n    }\n\n    // Default values for arguments\n    opts || (opts = {})\n    // Set Mapper#name\n    opts.name = name\n    opts.relations || (opts.relations = {})\n\n    // Check if the user is overriding the datastore's default mapperClass\n    const mapperClass = opts.mapperClass || this.mapperClass\n    delete opts.mapperClass\n\n    // Apply the datastore's defaults to the options going into the mapper\n    utils.fillIn(opts, this.mapperDefaults)\n\n    // Instantiate a mapper\n    const mapper = this._mappers[name] = new mapperClass(opts) // eslint-disable-line\n    mapper.relations || (mapper.relations = {})\n    // Make sure the mapper's name is set\n    mapper.name = name\n    // All mappers in this datastore will share adapters\n    mapper._adapters = this.getAdapters()\n\n    mapper.datastore = this\n\n    mapper.on('all', (...args) => this._onMapperEvent(name, ...args))\n    mapper.defineRelations()\n\n    return mapper\n  },\n\n  defineResource (name, opts) {\n    console.warn('DEPRECATED: defineResource is deprecated, use defineMapper instead')\n    return this.defineMapper(name, opts)\n  },\n\n  /**\n   * Return the registered adapter with the given name or the default adapter if\n   * no name is provided.\n   *\n   * @method Container#getAdapter\n   * @param {string} [name] The name of the adapter to retrieve.\n   * @returns {Adapter} The adapter.\n   * @since 3.0.0\n   */\n  getAdapter (name) {\n    const adapter = this.getAdapterName(name)\n    if (!adapter) {\n      throw utils.err(`${DOMAIN}#getAdapter`, 'name')(400, 'string', name)\n    }\n    return this.getAdapters()[adapter]\n  },\n\n  /**\n   * Return the name of a registered adapter based on the given name or options,\n   * or the name of the default adapter if no name provided.\n   *\n   * @method Container#getAdapterName\n   * @param {(Object|string)} [opts] The name of an adapter or options, if any.\n   * @returns {string} The name of the adapter.\n   * @since 3.0.0\n   */\n  getAdapterName (opts) {\n    opts || (opts = {})\n    if (utils.isString(opts)) {\n      opts = { adapter: opts }\n    }\n    return opts.adapter || this.mapperDefaults.defaultAdapter\n  },\n\n  /**\n   * Return the registered adapters of this container.\n   *\n   * @method Container#getAdapters\n   * @returns {Adapter}\n   * @since 3.0.0\n   */\n  getAdapters () {\n    return this._adapters\n  },\n\n  /**\n   * Return the mapper registered under the specified name.\n   *\n   * @example <caption>Container#getMapper</caption>\n   * // import { Container } from 'js-data';\n   * const JSData = require('js-data');\n   * const { Container } = JSData;\n   * console.log('Using JSData v' + JSData.version.full);\n   *\n   * const store = new Container();\n   * // Container#defineMapper returns a direct reference to the newly created\n   * // Mapper.\n   * const UserMapper = store.defineMapper('user');\n   * console.log(UserMapper === store.getMapper('user'));\n   * console.log(UserMapper === store.as('user').getMapper());\n   * store.getMapper('profile'); // throws Error, there is no mapper with name \"profile\"\n   *\n   * @method Container#getMapper\n   * @param {string} name {@link Mapper#name}.\n   * @returns {Mapper}\n   * @since 3.0.0\n   */\n  getMapper (name) {\n    const mapper = this.getMapperByName(name)\n    if (!mapper) {\n      throw utils.err(`${DOMAIN}#getMapper`, name)(404, 'mapper')\n    }\n    return mapper\n  },\n\n  /**\n   * Return the mapper registered under the specified name.\n   * Doesn't throw error if mapper doesn't exist.\n   *\n   * @example <caption>Container#getMapperByName</caption>\n   * // import { Container } from 'js-data';\n   * const JSData = require('js-data');\n   * const { Container } = JSData;\n   * console.log('Using JSData v' + JSData.version.full);\n   *\n   * const store = new Container();\n   * // Container#defineMapper returns a direct reference to the newly created\n   * // Mapper.\n   * const UserMapper = store.defineMapper('user');\n   * console.log(UserMapper === store.getMapper('user'));\n   * console.log(UserMapper === store.as('user').getMapper());\n   * console.log(store.getMapper('profile')); // Does NOT throw an error\n   *\n   * @method Container#getMapperByName\n   * @param {string} name {@link Mapper#name}.\n   * @returns {Mapper}\n   * @since 3.0.0\n   */\n  getMapperByName (name) {\n    return this._mappers[name]\n  },\n\n  /**\n   * Register an adapter on this container under the given name. Adapters\n   * registered on a container are shared by all mappers in the container.\n   *\n   * @example\n   * import { Container } from 'js-data';\n   * import { RethinkDBAdapter } from 'js-data-rethinkdb';\n   * const store = new Container();\n   * store.registerAdapter('rethinkdb', new RethinkDBAdapter(), { default: true });\n   *\n   * @method Container#registerAdapter\n   * @param {string} name The name of the adapter to register.\n   * @param {Adapter} adapter The adapter to register.\n   * @param {object} [opts] Configuration options.\n   * @param {boolean} [opts.default=false] Whether to make the adapter the\n   * default adapter for all Mappers in this container.\n   * @since 3.0.0\n   * @tutorial [\"http://www.js-data.io/v3.0/docs/connecting-to-a-data-source\",\"Connecting to a data source\"]\n   */\n  registerAdapter (name, adapter, opts) {\n    opts || (opts = {})\n    this.getAdapters()[name] = adapter\n    // Optionally make it the default adapter for the target.\n    if (opts === true || opts.default) {\n      this.mapperDefaults.defaultAdapter = name\n      utils.forOwn(this._mappers, function (mapper) {\n        mapper.defaultAdapter = name\n      })\n    }\n  }\n}\n\nproxiedMapperMethods.forEach(function (method) {\n  props[method] = function (name, ...args) {\n    return this.getMapper(name)[method](...args)\n  }\n})\n\nComponent.extend(props)\n\n/**\n * Create a subclass of this Container:\n * @example <caption>Container.extend</caption>\n * const JSData = require('js-data');\n * const { Container } = JSData;\n * console.log('Using JSData v' + JSData.version.full);\n *\n * // Extend the class using ES2015 class syntax.\n * class CustomContainerClass extends Container {\n *   foo () { return 'bar' }\n *   static beep () { return 'boop' }\n * }\n * const customContainer = new CustomContainerClass();\n * console.log(customContainer.foo());\n * console.log(CustomContainerClass.beep());\n *\n * // Extend the class using alternate method.\n * const OtherContainerClass = Container.extend({\n *   foo () { return 'bar'; }\n * }, {\n *   beep () { return 'boop'; }\n * });\n * const otherContainer = new OtherContainerClass();\n * console.log(otherContainer.foo());\n * console.log(OtherContainerClass.beep());\n *\n * // Extend the class, providing a custom constructor.\n * function AnotherContainerClass () {\n *   Container.call(this);\n *   this.created_at = new Date().getTime();\n * }\n * Container.extend({\n *   constructor: AnotherContainerClass,\n *   foo () { return 'bar'; }\n * }, {\n *   beep () { return 'boop'; }\n * })\n * const anotherContainer = new AnotherContainerClass();\n * console.log(anotherContainer.created_at);\n * console.log(anotherContainer.foo());\n * console.log(AnotherContainerClass.beep());\n *\n * @method Container.extend\n * @param {object} [props={}] Properties to add to the prototype of the\n * subclass.\n * @param {object} [props.constructor] Provide a custom constructor function\n * to be used as the subclass itself.\n * @param {object} [classProps={}] Static properties to add to the subclass.\n * @returns {Constructor} Subclass of this Container class.\n * @since 3.0.0\n */\n","import utils from './utils'\n\nimport {\n  belongsToType,\n  hasManyType,\n  hasOneType\n} from './decorators'\nimport {proxiedMapperMethods, Container} from './Container'\nimport Collection from './Collection'\n\nconst DOMAIN = 'SimpleStore'\nconst proxiedCollectionMethods = [\n  /**\n   * Wrapper for {@link Collection#add}.\n   *\n   * @example <caption>SimpleStore#add</caption>\n   * const JSData = require('js-data');\n   * const { SimpleStore } = JSData;\n   * console.log('Using JSData v' + JSData.version.full);\n   *\n   * const store = new SimpleStore();\n   * store.defineMapper('book');\n   *\n   * // Add one book to the in-memory store:\n   * store.add('book', { id: 1, title: 'Respect your Data' });\n   * // Add multiple books to the in-memory store:\n   * store.add('book', [\n   *   { id: 2, title: 'Easy data recipes' },\n   *   { id: 3, title: 'Active Record 101' }\n   * ]);\n   *\n   * @fires SimpleStore#add\n   * @method SimpleStore#add\n   * @param {(string|number)} name Name of the {@link Mapper} to target.\n   * @param {(Object|Object[]|Record|Record[])} data See {@link Collection#add}.\n   * @param {object} [opts] Configuration options. See {@link Collection#add}.\n   * @returns {(Object|Object[]|Record|Record[])} See {@link Collection#add}.\n   * @see Collection#add\n   * @see Collection#add\n   * @since 3.0.0\n   */\n  'add',\n\n  /**\n   * Wrapper for {@link Collection#between}.\n   *\n   * @example\n   * // Get all users ages 18 to 30\n   * const users = store.between('user', 18, 30, { index: 'age' });\n   *\n   * @example\n   * // Same as above\n   * const users = store.between('user', [18], [30], { index: 'age' });\n   *\n   * @method SimpleStore#between\n   * @param {(string|number)} name Name of the {@link Mapper} to target.\n   * @param {array} leftKeys See {@link Collection#between}.\n   * @param {array} rightKeys See {@link Collection#between}.\n   * @param {object} [opts] Configuration options. See {@link Collection#between}.\n   * @returns {Object[]|Record[]} See {@link Collection#between}.\n   * @see Collection#between\n   * @see Collection#between\n   * @since 3.0.0\n   */\n  'between',\n\n  /**\n   * Wrapper for {@link Collection#createIndex}.\n   *\n   * @example\n   * // Index users by age\n   * store.createIndex('user', 'age');\n   *\n   * @example\n   * // Index users by status and role\n   * store.createIndex('user', 'statusAndRole', ['status', 'role']);\n   *\n   * @method SimpleStore#createIndex\n   * @param {(string|number)} name Name of the {@link Mapper} to target.\n   * @param {string} name See {@link Collection#createIndex}.\n   * @param {string[]} [fieldList] See {@link Collection#createIndex}.\n   * @see Collection#createIndex\n   * @see Collection#createIndex\n   * @since 3.0.0\n   */\n  'createIndex',\n\n  /**\n   * Wrapper for {@link Collection#filter}.\n   *\n   * @example <caption>SimpleStore#filter</caption>\n   * const JSData = require('js-data');\n   * const { SimpleStore } = JSData;\n   * console.log('Using JSData v' + JSData.version.full);\n   *\n   * const store = new SimpleStore();\n   * store.defineMapper('post');\n   * store.add('post', [\n   *   { id: 1, status: 'draft', created_at_timestamp: new Date().getTime() }\n   * ]);\n   *\n   * // Get the draft posts created less than three months ago\n   * let posts = store.filter('post', {\n   *   where: {\n   *     status: {\n   *       '==': 'draft'\n   *     },\n   *     created_at_timestamp: {\n   *       '>=': (new Date().getTime() - (1000 \\* 60 \\* 60 \\* 24 \\* 30 \\* 3)) // 3 months ago\n   *     }\n   *   }\n   * });\n   * console.log(posts);\n   *\n   * // Use a custom filter function\n   * posts = store.filter('post', function (post) { return post.id % 2 === 0 });\n   *\n   * @method SimpleStore#filter\n   * @param {(string|number)} name Name of the {@link Mapper} to target.\n   * @param {(Object|Function)} [queryOrFn={}] See {@link Collection#filter}.\n   * @param {object} [thisArg] See {@link Collection#filter}.\n   * @returns {Array} See {@link Collection#filter}.\n   * @see Collection#filter\n   * @see Collection#filter\n   * @since 3.0.0\n   */\n  'filter',\n\n  /**\n   * Wrapper for {@link Collection#get}.\n   *\n   * @example <caption>SimpleStore#get</caption>\n   * const JSData = require('js-data');\n   * const { SimpleStore } = JSData;\n   * console.log('Using JSData v' + JSData.version.full);\n   *\n   * const store = new SimpleStore();\n   * store.defineMapper('post');\n   * store.add('post', [\n   *   { id: 1, status: 'draft', created_at_timestamp: new Date().getTime() }\n   * ]);\n   *\n   * console.log(store.get('post', 1)); // {...}\n   * console.log(store.get('post', 2)); // undefined\n   *\n   * @method SimpleStore#get\n   * @param {(string|number)} name Name of the {@link Mapper} to target.\n   * @param {(string|number)} id See {@link Collection#get}.\n   * @returns {(Object|Record)} See {@link Collection#get}.\n   * @see Collection#get\n   * @see Collection#get\n   * @since 3.0.0\n   */\n  'get',\n\n  /**\n   * Wrapper for {@link Collection#getAll}.\n   *\n   * @example\n   * // Get the posts where \"status\" is \"draft\" or \"inReview\"\n   * const posts = store.getAll('post', 'draft', 'inReview', { index: 'status' });\n   *\n   * @example\n   * // Same as above\n   * const posts = store.getAll('post', ['draft'], ['inReview'], { index: 'status' });\n   *\n   * @method SimpleStore#getAll\n   * @param {(string|number)} name Name of the {@link Mapper} to target.\n   * @param {...Array} [keyList] See {@link Collection#getAll}.\n   * @param {object} [opts] See {@link Collection#getAll}.\n   * @returns {Array} See {@link Collection#getAll}.\n   * @see Collection#getAll\n   * @see Collection#getAll\n   * @since 3.0.0\n   */\n  'getAll',\n\n  /**\n   * Wrapper for {@link Collection#prune}.\n   *\n   * @method SimpleStore#prune\n   * @param {object} [opts] See {@link Collection#prune}.\n   * @returns {Array} See {@link Collection#prune}.\n   * @see Collection#prune\n   * @see Collection#prune\n   * @since 3.0.0\n   */\n  'prune',\n\n  /**\n   * Wrapper for {@link Collection#query}.\n   *\n   * @example\n   * // Grab page 2 of users between ages 18 and 30\n   * store.query('user')\n   *   .between(18, 30, { index: 'age' }) // between ages 18 and 30\n   *   .skip(10) // second page\n   *   .limit(10) // page size\n   *   .run();\n   *\n   * @method SimpleStore#query\n   * @param {(string|number)} name Name of the {@link Mapper} to target.\n   * @returns {Query} See {@link Collection#query}.\n   * @see Collection#query\n   * @see Collection#query\n   * @since 3.0.0\n   */\n  'query',\n\n  /**\n   * Wrapper for {@link Collection#toJSON}.\n   *\n   * @example\n   * store.defineMapper('post', {\n   *   schema: {\n   *     properties: {\n   *       id: { type: 'number' },\n   *       title: { type: 'string' }\n   *     }\n   *   }\n   * });\n   * store.add('post', [\n   *   { id: 1, status: 'published', title: 'Respect your Data' },\n   *   { id: 2, status: 'draft', title: 'Connecting to a data source' }\n   * ]);\n   * console.log(store.toJSON('post'));\n   * const draftsJSON = store.query('post')\n   *   .filter({ status: 'draft' })\n   *   .mapCall('toJSON')\n   *   .run();\n   *\n   * @method SimpleStore#toJSON\n   * @param {(string|number)} name Name of the {@link Mapper} to target.\n   * @param {object} [opts] See {@link Collection#toJSON}.\n   * @returns {Array} See {@link Collection#toJSON}.\n   * @see Collection#toJSON\n   * @see Collection#toJSON\n   * @since 3.0.0\n   */\n  'toJSON',\n\n  /**\n   * Wrapper for {@link Collection#unsaved}.\n   *\n   * @method SimpleStore#unsaved\n   * @returns {Array} See {@link Collection#unsaved}.\n   * @see Collection#unsaved\n   * @see Collection#unsaved\n   * @since 3.0.0\n   */\n  'unsaved'\n]\nconst ownMethodsForScoping = [\n  'addToCache',\n  'cachedFind',\n  'cachedFindAll',\n  'cacheFind',\n  'cacheFindAll',\n  'hashQuery'\n]\n\nconst cachedFn = function (name, hashOrId, opts) {\n  const cached = this._completedQueries[name][hashOrId]\n  if (utils.isFunction(cached)) {\n    return cached(name, hashOrId, opts)\n  }\n  return cached\n}\n\nconst SIMPLESTORE_DEFAULTS = {\n  /**\n   * Whether to use the pending query if a `find` request for the specified\n   * record is currently underway. Can be set to `true`, `false`, or to a\n   * function that returns `true` or `false`.\n   *\n   * @default true\n   * @name SimpleStore#usePendingFind\n   * @since 3.0.0\n   * @type {boolean|Function}\n   */\n  usePendingFind: true,\n\n  /**\n   * Whether to use the pending query if a `findAll` request for the given query\n   * is currently underway. Can be set to `true`, `false`, or to a function that\n   * returns `true` or `false`.\n   *\n   * @default true\n   * @name SimpleStore#usePendingFindAll\n   * @since 3.0.0\n   * @type {boolean|Function}\n   */\n  usePendingFindAll: true\n}\n\n/**\n * The `SimpleStore` class is an extension of {@link Container}. Not only does\n * `SimpleStore` manage mappers, but also collections. `SimpleStore` implements the\n * asynchronous {@link Mapper} methods, such as {@link Mapper#find} and\n * {@link Mapper#create}. If you use the asynchronous `SimpleStore` methods\n * instead of calling them directly on the mappers, then the results of the\n * method calls will be inserted into the store's collections. You can think of\n * a `SimpleStore` as an [Identity Map](https://en.wikipedia.org/wiki/Identity_map_pattern)\n * for the [ORM](https://en.wikipedia.org/wiki/Object-relational_mapping)\n * (the Mappers).\n *\n * ```javascript\n * import { SimpleStore } from 'js-data';\n * ```\n *\n * @example\n * import { SimpleStore } from 'js-data';\n * import { HttpAdapter } from 'js-data-http';\n * const store = new SimpleStore();\n *\n * // SimpleStore#defineMapper returns a direct reference to the newly created\n * // Mapper.\n * const UserMapper = store.defineMapper('user');\n *\n * // SimpleStore#as returns the store scoped to a particular Mapper.\n * const UserStore = store.as('user');\n *\n * // Call \"find\" on \"UserMapper\" (Stateless ORM)\n * UserMapper.find(1).then((user) => {\n *   // retrieved a \"user\" record via the http adapter, but that's it\n *\n *   // Call \"find\" on \"store\" targeting \"user\" (Stateful SimpleStore)\n *   return store.find('user', 1); // same as \"UserStore.find(1)\"\n * }).then((user) => {\n *   // not only was a \"user\" record retrieved, but it was added to the\n *   // store's \"user\" collection\n *   const cachedUser = store.getCollection('user').get(1);\n *   console.log(user === cachedUser); // true\n * });\n *\n * @class SimpleStore\n * @extends Container\n * @param {object} [opts] Configuration options. See {@link Container}.\n * @param {boolean} [opts.collectionClass={@link Collection}] See {@link SimpleStore#collectionClass}.\n * @param {boolean} [opts.debug=false] See {@link Component#debug}.\n * @param {boolean|Function} [opts.usePendingFind=true] See {@link SimpleStore#usePendingFind}.\n * @param {boolean|Function} [opts.usePendingFindAll=true] See {@link SimpleStore#usePendingFindAll}.\n * @returns {SimpleStore}\n * @see Container\n * @since 3.0.0\n * @tutorial [\"http://www.js-data.io/v3.0/docs/components-of-jsdata#SimpleStore\",\"Components of JSData: SimpleStore\"]\n * @tutorial [\"http://www.js-data.io/v3.0/docs/working-with-the-SimpleStore\",\"Working with the SimpleStore\"]\n * @tutorial [\"http://www.js-data.io/v3.0/docs/jsdata-and-the-browser\",\"Notes on using JSData in the Browser\"]\n */\nfunction SimpleStore (opts) {\n  utils.classCallCheck(this, SimpleStore)\n\n  opts || (opts = {})\n  // Fill in any missing options with the defaults\n  utils.fillIn(opts, SIMPLESTORE_DEFAULTS)\n  Container.call(this, opts)\n\n  this.collectionClass = this.collectionClass || Collection\n  this._collections = {}\n  this._pendingQueries = {}\n  this._completedQueries = {}\n}\n\nconst props = {\n  constructor: SimpleStore,\n\n  /**\n   * Internal method used to handle Mapper responses.\n   *\n   * @method SimpleStore#_end\n   * @private\n   * @param {string} name Name of the {@link Collection} to which to\n   * add the data.\n   * @param {object} result The result from a Mapper.\n   * @param {object} [opts] Configuration options.\n   * @returns {(Object|Array)} Result.\n   */\n  _end (name, result, opts) {\n    let data = opts.raw ? result.data : result\n    if (data && utils.isFunction(this.addToCache)) {\n      data = this.addToCache(name, data, opts)\n      if (opts.raw) {\n        result.data = data\n      } else {\n        result = data\n      }\n    }\n    return result\n  },\n\n  /**\n   * Register a new event listener on this SimpleStore.\n   *\n   * Proxy for {@link Container#on}. If an event was emitted by a Mapper or\n   * Collection in the SimpleStore, then the name of the Mapper or Collection will\n   * be prepended to the arugments passed to the provided event handler.\n   *\n   * @example\n   * // Listen for all \"afterCreate\" events in a SimpleStore\n   * store.on('afterCreate', (mapperName, props, opts, result) => {\n   *   console.log(mapperName); // \"post\"\n   *   console.log(props.id); // undefined\n   *   console.log(result.id); // 1234\n   * });\n   * store.create('post', { title: 'Modeling your data' }).then((post) => {\n   *   console.log(post.id); // 1234\n   * });\n   *\n   * @example\n   * // Listen for the \"add\" event on a collection\n   * store.on('add', (mapperName, records) => {\n   *   console.log(records); // [...]\n   * });\n   *\n   * @example\n   * // Listen for \"change\" events on a record\n   * store.on('change', (mapperName, record, changes) => {\n   *   console.log(changes); // { changed: { title: 'Modeling your data' } }\n   * });\n   * post.title = 'Modeling your data';\n   *\n   * @method SimpleStore#on\n   * @param {string} event Name of event to subsribe to.\n   * @param {Function} listener Listener function to handle the event.\n   * @param {*} [ctx] Optional content in which to invoke the listener.\n   */\n\n  /**\n   * Used to bind to events emitted by collections in this store.\n   *\n   * @method SimpleStore#_onCollectionEvent\n   * @private\n   * @param {string} name Name of the collection that emitted the event.\n   * @param {...*} [args] Args passed to {@link Collection#emit}.\n   */\n  _onCollectionEvent (name, ...args) {\n    const type = args.shift()\n    this.emit(type, name, ...args)\n  },\n\n  /**\n   * This method takes the data received from {@link SimpleStore#find},\n   * {@link SimpleStore#findAll}, {@link SimpleStore#update}, etc., and adds the\n   * data to the store. _You don't need to call this method directly._\n   *\n   * If you're using the http adapter and your response data is in an unexpected\n   * format, you may need to override this method so the right data gets added\n   * to the store.\n   *\n   * @example\n   * const store = new SimpleStore({\n   *   addToCache (mapperName, data, opts) {\n   *     // Let's say for a particular Resource, response data is in a weird format\n   *     if (name === 'comment') {\n   *       // Re-assign the variable to add the correct records into the stores\n   *       data = data.items;\n   *     }\n   *     // Now perform default behavior\n   *     return SimpleStore.prototype.addToCache.call(this, mapperName, data, opts);\n   *   }\n   * });\n   *\n   * @example\n   * // Extend using ES2015 class syntax.\n   * class MyStore extends SimpleStore {\n   *   addToCache (mapperName, data, opts) {\n   *     // Let's say for a particular Resource, response data is in a weird format\n   *     if (name === 'comment') {\n   *       // Re-assign the variable to add the correct records into the stores\n   *       data = data.items;\n   *     }\n   *     // Now perform default behavior\n   *     return super.addToCache(mapperName, data, opts);\n   *   }\n   * }\n   * const store = new MyStore();\n   *\n   * @method SimpleStore#addToCache\n   * @param {string} name Name of the {@link Mapper} to target.\n   * @param {*} data Data from which data should be selected for add.\n   * @param {object} [opts] Configuration options.\n   */\n  addToCache (name, data, opts) {\n    return this.getCollection(name).add(data, opts)\n  },\n\n  /**\n   * Return the store scoped to a particular mapper/collection pair.\n   *\n   * @example <caption>SimpleStore.as</caption>\n   * const JSData = require('js-data');\n   * const { SimpleStore } = JSData;\n   * console.log('Using JSData v' + JSData.version.full);\n   *\n   * const store = new SimpleStore();\n   * const UserMapper = store.defineMapper('user');\n   * const UserStore = store.as('user');\n   *\n   * const user1 = store.createRecord('user', { name: 'John' });\n   * const user2 = UserStore.createRecord({ name: 'John' });\n   * const user3 = UserMapper.createRecord({ name: 'John' });\n   * console.log(user1 === user2);\n   * console.log(user2 === user3);\n   * console.log(user1 === user3);\n   *\n   * @method SimpleStore#as\n   * @param {string} name Name of the {@link Mapper}.\n   * @returns {Object} The store, scoped to a particular Mapper/Collection pair.\n   * @since 3.0.0\n   */\n  as (name) {\n    const props = {}\n    const original = this\n    const methods = ownMethodsForScoping\n      .concat(proxiedMapperMethods)\n      .concat(proxiedCollectionMethods)\n\n    methods.forEach(function (method) {\n      props[method] = {\n        writable: true,\n        value (...args) {\n          return original[method](name, ...args)\n        }\n      }\n    })\n    props.getMapper = {\n      writable: true,\n      value () {\n        return original.getMapper(name)\n      }\n    }\n    props.getCollection = {\n      writable: true,\n      value () {\n        return original.getCollection(name)\n      }\n    }\n    return Object.create(this, props)\n  },\n\n  /**\n   * Retrieve a cached `find` result, if any. This method is called during\n   * {@link SimpleStore#find} to determine if {@link Mapper#find} needs to be\n   * called. If this method returns `undefined` then {@link Mapper#find} will\n   * be called. Otherwise {@link SimpleStore#find} will immediately resolve with\n   * the return value of this method.\n   *\n   * When using {@link SimpleStore} in the browser, you can override this method\n   * to implement your own cache-busting strategy.\n   *\n   * @example\n   * const store = new SimpleStore({\n   *   cachedFind (mapperName, id, opts) {\n   *     // Let's say for a particular Resource, we always want to pull fresh from the server\n   *     if (mapperName === 'schedule') {\n   *       // Return undefined to trigger a Mapper#find call\n   *       return;\n   *     }\n   *     // Otherwise perform default behavior\n   *     return SimpleStore.prototype.cachedFind.call(this, mapperName, id, opts);\n   *   }\n   * });\n   *\n   * @example\n   * // Extend using ES2015 class syntax.\n   * class MyStore extends SimpleStore {\n   *   cachedFind (mapperName, id, opts) {\n   *     // Let's say for a particular Resource, we always want to pull fresh from the server\n   *     if (mapperName === 'schedule') {\n   *       // Return undefined to trigger a Mapper#find call\n   *       return;\n   *     }\n   *     // Otherwise perform default behavior\n   *     return super.cachedFind(mapperName, id, opts);\n   *   }\n   * }\n   * const store = new MyStore();\n   *\n   * @method SimpleStore#cachedFind\n   * @param {string} name The `name` argument passed to {@link SimpleStore#find}.\n   * @param {(string|number)} id The `id` argument passed to {@link SimpleStore#find}.\n   * @param {object} opts The `opts` argument passed to {@link SimpleStore#find}.\n   * @since 3.0.0\n   */\n  cachedFind: cachedFn,\n\n  /**\n   * Retrieve a cached `findAll` result, if any. This method is called during\n   * {@link SimpleStore#findAll} to determine if {@link Mapper#findAll} needs to be\n   * called. If this method returns `undefined` then {@link Mapper#findAll} will\n   * be called. Otherwise {@link SimpleStore#findAll} will immediately resolve with\n   * the return value of this method.\n   *\n   * When using {@link SimpleStore} in the browser, you can override this method\n   * to implement your own cache-busting strategy.\n   *\n   * @example\n   * const store = new SimpleStore({\n   *   cachedFindAll (mapperName, hash, opts) {\n   *     // Let's say for a particular Resource, we always want to pull fresh from the server\n   *     if (mapperName === 'schedule') {\n   *       // Return undefined to trigger a Mapper#findAll call\n   *       return undefined;\n   *     }\n   *     // Otherwise perform default behavior\n   *     return SimpleStore.prototype.cachedFindAll.call(this, mapperName, hash, opts);\n   *   }\n   * });\n   *\n   * @example\n   * // Extend using ES2015 class syntax.\n   * class MyStore extends SimpleStore {\n   *   cachedFindAll (mapperName, hash, opts) {\n   *     // Let's say for a particular Resource, we always want to pull fresh from the server\n   *     if (mapperName === 'schedule') {\n   *       // Return undefined to trigger a Mapper#findAll call\n   *       return undefined;\n   *     }\n   *     // Otherwise perform default behavior\n   *     return super.cachedFindAll(mapperName, hash, opts);\n   *   }\n   * }\n   * const store = new MyStore();\n   *\n   * @method SimpleStore#cachedFindAll\n   * @param {string} name The `name` argument passed to {@link SimpleStore#findAll}.\n   * @param {string} hash The result of calling {@link SimpleStore#hashQuery} on\n   * the `query` argument passed to {@link SimpleStore#findAll}.\n   * @param {object} opts The `opts` argument passed to {@link SimpleStore#findAll}.\n   * @since 3.0.0\n   */\n  cachedFindAll: cachedFn,\n\n  /**\n   * Mark a {@link Mapper#find} result as cached by adding an entry to\n   * {@link SimpleStore#_completedQueries}. By default, once a `find` entry is\n   * added it means subsequent calls to the same Resource with the same `id`\n   * argument will immediately resolve with the result of calling\n   * {@link SimpleStore#get} instead of delegating to {@link Mapper#find}.\n   *\n   * As part of implementing your own caching strategy, you may choose to\n   * override this method.\n   *\n   * @example\n   * const store = new SimpleStore({\n   *   cacheFind (mapperName, data, id, opts) {\n   *     // Let's say for a particular Resource, we always want to pull fresh from the server\n   *     if (mapperName === 'schedule') {\n   *       // Return without saving an entry to SimpleStore#_completedQueries\n   *       return;\n   *     }\n   *     // Otherwise perform default behavior\n   *     return SimpleStore.prototype.cacheFind.call(this, mapperName, data, id, opts);\n   *   }\n   * });\n   *\n   * @example\n   * // Extend using ES2015 class syntax.\n   * class MyStore extends SimpleStore {\n   *   cacheFind (mapperName, data, id, opts) {\n   *     // Let's say for a particular Resource, we always want to pull fresh from the server\n   *     if (mapperName === 'schedule') {\n   *       // Return without saving an entry to SimpleStore#_completedQueries\n   *       return;\n   *     }\n   *     // Otherwise perform default behavior\n   *     return super.cacheFind(mapperName, data, id, opts);\n   *   }\n   * }\n   * const store = new MyStore();\n   *\n   * @method SimpleStore#cacheFind\n   * @param {string} name The `name` argument passed to {@link SimpleStore#find}.\n   * @param {*} data The result to cache.\n   * @param {(string|number)} id The `id` argument passed to {@link SimpleStore#find}.\n   * @param {object} opts The `opts` argument passed to {@link SimpleStore#find}.\n   * @since 3.0.0\n   */\n  cacheFind (name, data, id, opts) {\n    this._completedQueries[name][id] = (name, id, opts) => this.get(name, id)\n  },\n\n  /**\n   * Mark a {@link Mapper#findAll} result as cached by adding an entry to\n   * {@link SimpleStore#_completedQueries}. By default, once a `findAll` entry is\n   * added it means subsequent calls to the same Resource with the same `query`\n   * argument will immediately resolve with the result of calling\n   * {@link SimpleStore#filter} instead of delegating to {@link Mapper#findAll}.\n   *\n   * As part of implementing your own caching strategy, you may choose to\n   * override this method.\n   *\n   * @example\n   * const store = new SimpleStore({\n   *   cachedFindAll (mapperName, data, hash, opts) {\n   *     // Let's say for a particular Resource, we always want to pull fresh from the server\n   *     if (mapperName === 'schedule') {\n   *       // Return without saving an entry to SimpleStore#_completedQueries\n   *       return;\n   *     }\n   *     // Otherwise perform default behavior.\n   *     return SimpleStore.prototype.cachedFindAll.call(this, mapperName, data, hash, opts);\n   *   }\n   * });\n   *\n   * @example\n   * // Extend using ES2015 class syntax.\n   * class MyStore extends SimpleStore {\n   *   cachedFindAll (mapperName, data, hash, opts) {\n   *     // Let's say for a particular Resource, we always want to pull fresh from the server\n   *     if (mapperName === 'schedule') {\n   *       // Return without saving an entry to SimpleStore#_completedQueries\n   *       return;\n   *     }\n   *     // Otherwise perform default behavior.\n   *     return super.cachedFindAll(mapperName, data, hash, opts);\n   *   }\n   * }\n   * const store = new MyStore();\n   *\n   * @method SimpleStore#cacheFindAll\n   * @param {string} name The `name` argument passed to {@link SimpleStore#findAll}.\n   * @param {*} data The result to cache.\n   * @param {string} hash The result of calling {@link SimpleStore#hashQuery} on\n   * the `query` argument passed to {@link SimpleStore#findAll}.\n   * @param {object} opts The `opts` argument passed to {@link SimpleStore#findAll}.\n   * @since 3.0.0\n   */\n  cacheFindAll (name, data, hash, opts) {\n    this._completedQueries[name][hash] = (name, hash, opts) => this.filter(name, utils.fromJson(hash))\n  },\n\n  /**\n   * Remove __all__ records from the in-memory store and reset\n   * {@link SimpleStore#_completedQueries}.\n   *\n   * @method SimpleStore#clear\n   * @returns {Object} Object containing all records that were in the store.\n   * @see SimpleStore#remove\n   * @see SimpleStore#removeAll\n   * @since 3.0.0\n   */\n  clear () {\n    const removed = {}\n    utils.forOwn(this._collections, (collection, name) => {\n      removed[name] = collection.removeAll()\n      this._completedQueries[name] = {}\n    })\n    return removed\n  },\n\n  /**\n   * Fired during {@link SimpleStore#create}. See\n   * {@link SimpleStore~beforeCreateListener} for how to listen for this event.\n   *\n   * @event SimpleStore#beforeCreate\n   * @see SimpleStore~beforeCreateListener\n   * @see SimpleStore#create\n   */\n  /**\n   * Callback signature for the {@link SimpleStore#event:beforeCreate} event.\n   *\n   * @example\n   * function onBeforeCreate (mapperName, props, opts) {\n   *   // do something\n   * }\n   * store.on('beforeCreate', onBeforeCreate);\n   *\n   * @callback SimpleStore~beforeCreateListener\n   * @param {string} name The `name` argument received by {@link Mapper#beforeCreate}.\n   * @param {object} props The `props` argument received by {@link Mapper#beforeCreate}.\n   * @param {object} opts The `opts` argument received by {@link Mapper#beforeCreate}.\n   * @see SimpleStore#event:beforeCreate\n   * @see SimpleStore#create\n   * @since 3.0.0\n   */\n  /**\n   * Fired during {@link SimpleStore#create}. See\n   * {@link SimpleStore~afterCreateListener} for how to listen for this event.\n   *\n   * @event SimpleStore#afterCreate\n   * @see SimpleStore~afterCreateListener\n   * @see SimpleStore#create\n   */\n  /**\n   * Callback signature for the {@link SimpleStore#event:afterCreate} event.\n   *\n   * @example\n   * function onAfterCreate (mapperName, props, opts, result) {\n   *   // do something\n   * }\n   * store.on('afterCreate', onAfterCreate);\n   *\n   * @callback SimpleStore~afterCreateListener\n   * @param {string} name The `name` argument received by {@link Mapper#afterCreate}.\n   * @param {object} props The `props` argument received by {@link Mapper#afterCreate}.\n   * @param {object} opts The `opts` argument received by {@link Mapper#afterCreate}.\n   * @param {object} result The `result` argument received by {@link Mapper#afterCreate}.\n   * @see SimpleStore#event:afterCreate\n   * @see SimpleStore#create\n   * @since 3.0.0\n   */\n  /**\n   * Wrapper for {@link Mapper#create}. Adds the created record to the store.\n   *\n   * @example\n   * import { SimpleStore } from 'js-data';\n   * import { HttpAdapter } from 'js-data-http';\n   *\n   * const store = new SimpleStore();\n   * store.registerAdapter('http', new HttpAdapter(), { default: true });\n   *\n   * store.defineMapper('book');\n   *\n   * // Since this example uses the http adapter, we'll get something like:\n   * //\n   * //   POST /book {\"author_id\":1234,...}\n   * store.create('book', {\n   *   author_id: 1234,\n   *   edition: 'First Edition',\n   *   title: 'Respect your Data'\n   * }).then((book) => {\n   *   console.log(book.id); // 120392\n   *   console.log(book.title); // \"Respect your Data\"\n   * });\n   *\n   * @fires SimpleStore#beforeCreate\n   * @fires SimpleStore#afterCreate\n   * @fires SimpleStore#add\n   * @method SimpleStore#create\n   * @param {string} name Name of the {@link Mapper} to target.\n   * @param {object} record Passed to {@link Mapper#create}.\n   * @param {object} [opts] Passed to {@link Mapper#create}. See\n   * {@link Mapper#create} for more configuration options.\n   * @returns {Promise} Resolves with the result of the create.\n   * @since 3.0.0\n   */\n  create (name, record, opts) {\n    opts || (opts = {})\n    return Container.prototype.create.call(this, name, record, opts)\n      .then((result) => this._end(name, result, opts))\n  },\n\n  /**\n   * Fired during {@link SimpleStore#createMany}. See\n   * {@link SimpleStore~beforeCreateManyListener} for how to listen for this event.\n   *\n   * @event SimpleStore#beforeCreateMany\n   * @see SimpleStore~beforeCreateManyListener\n   * @see SimpleStore#createMany\n   */\n  /**\n   * Callback signature for the {@link SimpleStore#event:beforeCreateMany} event.\n   *\n   * @example\n   * function onBeforeCreateMany (mapperName, records, opts) {\n   *   // do something\n   * }\n   * store.on('beforeCreateMany', onBeforeCreateMany);\n   *\n   * @callback SimpleStore~beforeCreateManyListener\n   * @param {string} name The `name` argument received by {@link Mapper#beforeCreateMany}.\n   * @param {object} records The `records` argument received by {@link Mapper#beforeCreateMany}.\n   * @param {object} opts The `opts` argument received by {@link Mapper#beforeCreateMany}.\n   * @see SimpleStore#event:beforeCreateMany\n   * @see SimpleStore#createMany\n   * @since 3.0.0\n   */\n  /**\n   * Fired during {@link SimpleStore#createMany}. See\n   * {@link SimpleStore~afterCreateManyListener} for how to listen for this event.\n   *\n   * @event SimpleStore#afterCreateMany\n   * @see SimpleStore~afterCreateManyListener\n   * @see SimpleStore#createMany\n   */\n  /**\n   * Callback signature for the {@link SimpleStore#event:afterCreateMany} event.\n   *\n   * @example\n   * function onAfterCreateMany (mapperName, records, opts, result) {\n   *   // do something\n   * }\n   * store.on('afterCreateMany', onAfterCreateMany);\n   *\n   * @callback SimpleStore~afterCreateManyListener\n   * @param {string} name The `name` argument received by {@link Mapper#afterCreateMany}.\n   * @param {object} records The `records` argument received by {@link Mapper#afterCreateMany}.\n   * @param {object} opts The `opts` argument received by {@link Mapper#afterCreateMany}.\n   * @param {object} result The `result` argument received by {@link Mapper#afterCreateMany}.\n   * @see SimpleStore#event:afterCreateMany\n   * @see SimpleStore#createMany\n   * @since 3.0.0\n   */\n  /**\n   * Wrapper for {@link Mapper#createMany}. Adds the created records to the\n   * store.\n   *\n   * @example\n   * import { SimpleStore } from 'js-data';\n   * import { HttpAdapter } from 'js-data-http';\n   *\n   * const store = new SimpleStore();\n   * store.registerAdapter('http', new HttpAdapter(), { default: true });\n   *\n   * store.defineMapper('book');\n   *\n   * // Since this example uses the http adapter, we'll get something like:\n   * //\n   * //   POST /book [{\"author_id\":1234,...},{...}]\n   * store.createMany('book', [{\n   *   author_id: 1234,\n   *   edition: 'First Edition',\n   *   title: 'Respect your Data'\n   * }, {\n   *   author_id: 1234,\n   *   edition: 'Second Edition',\n   *   title: 'Respect your Data'\n   * }]).then((books) => {\n   *   console.log(books[0].id); // 142394\n   *   console.log(books[0].title); // \"Respect your Data\"\n   * });\n   *\n   * @fires SimpleStore#beforeCreateMany\n   * @fires SimpleStore#afterCreateMany\n   * @fires SimpleStore#add\n   * @method SimpleStore#createMany\n   * @param {string} name Name of the {@link Mapper} to target.\n   * @param {array} records Passed to {@link Mapper#createMany}.\n   * @param {object} [opts] Passed to {@link Mapper#createMany}. See\n   * {@link Mapper#createMany} for more configuration options.\n   * @returns {Promise} Resolves with the result of the create.\n   * @since 3.0.0\n   */\n  createMany (name, records, opts) {\n    opts || (opts = {})\n    return Container.prototype.createMany.call(this, name, records, opts)\n      .then((result) => this._end(name, result, opts))\n  },\n\n  defineMapper (name, opts) {\n    const self = this\n    const mapper = Container.prototype.defineMapper.call(self, name, opts)\n    self._pendingQueries[name] = {}\n    self._completedQueries[name] = {}\n    mapper.relationList || Object.defineProperty(mapper, 'relationList', { value: [] })\n\n    let collectionOpts = {\n      // Make sure the collection has somewhere to store \"added\" timestamps\n      _added: {},\n      // Give the collection a reference to this SimpleStore\n      datastore: self,\n      // The mapper tied to the collection\n      mapper\n    }\n\n    if (opts && ('onConflict' in opts)) {\n      collectionOpts.onConflict = opts.onConflict\n    }\n\n    // The SimpleStore uses a subclass of Collection that is \"SimpleStore-aware\"\n    const collection = self._collections[name] = new self.collectionClass(null, collectionOpts)  // eslint-disable-line\n\n    const schema = mapper.schema || {}\n    const properties = schema.properties || {}\n    // TODO: Make it possible index nested properties?\n    utils.forOwn(properties, function (opts, prop) {\n      if (opts.indexed) {\n        collection.createIndex(prop)\n      }\n    })\n\n    // Create a secondary index on the \"added\" timestamps of records in the\n    // collection\n    collection.createIndex('addedTimestamps', ['$'], {\n      fieldGetter (obj) {\n        return collection._added[collection.recordId(obj)]\n      }\n    })\n\n    collection.on('all', function (...args) {\n      self._onCollectionEvent(name, ...args)\n    })\n\n    return mapper\n  },\n\n  /**\n   * Fired during {@link SimpleStore#destroy}. See\n   * {@link SimpleStore~beforeDestroyListener} for how to listen for this event.\n   *\n   * @event SimpleStore#beforeDestroy\n   * @see SimpleStore~beforeDestroyListener\n   * @see SimpleStore#destroy\n   */\n  /**\n   * Callback signature for the {@link SimpleStore#event:beforeDestroy} event.\n   *\n   * @example\n   * function onBeforeDestroy (mapperName, id, opts) {\n   *   // do something\n   * }\n   * store.on('beforeDestroy', onBeforeDestroy);\n   *\n   * @callback SimpleStore~beforeDestroyListener\n   * @param {string} name The `name` argument received by {@link Mapper#beforeDestroy}.\n   * @param {string|number} id The `id` argument received by {@link Mapper#beforeDestroy}.\n   * @param {object} opts The `opts` argument received by {@link Mapper#beforeDestroy}.\n   * @see SimpleStore#event:beforeDestroy\n   * @see SimpleStore#destroy\n   * @since 3.0.0\n   */\n  /**\n   * Fired during {@link SimpleStore#destroy}. See\n   * {@link SimpleStore~afterDestroyListener} for how to listen for this event.\n   *\n   * @event SimpleStore#afterDestroy\n   * @see SimpleStore~afterDestroyListener\n   * @see SimpleStore#destroy\n   */\n  /**\n   * Callback signature for the {@link SimpleStore#event:afterDestroy} event.\n   *\n   * @example\n   * function onAfterDestroy (mapperName, id, opts, result) {\n   *   // do something\n   * }\n   * store.on('afterDestroy', onAfterDestroy);\n   *\n   * @callback SimpleStore~afterDestroyListener\n   * @param {string} name The `name` argument received by {@link Mapper#afterDestroy}.\n   * @param {string|number} id The `id` argument received by {@link Mapper#afterDestroy}.\n   * @param {object} opts The `opts` argument received by {@link Mapper#afterDestroy}.\n   * @param {object} result The `result` argument received by {@link Mapper#afterDestroy}.\n   * @see SimpleStore#event:afterDestroy\n   * @see SimpleStore#destroy\n   * @since 3.0.0\n   */\n  /**\n   * Wrapper for {@link Mapper#destroy}. Removes any destroyed record from the\n   * in-memory store. Clears out any {@link SimpleStore#_completedQueries} entries\n   * associated with the provided `id`.\n   *\n   * @example\n   * import { SimpleStore } from 'js-data';\n   * import { HttpAdapter } from 'js-data-http';\n   *\n   * const store = new SimpleStore();\n   * store.registerAdapter('http', new HttpAdapter(), { default: true });\n   *\n   * store.defineMapper('book');\n   *\n   * store.add('book', { id: 1234, title: 'Data Management is Hard' });\n   *\n   * // Since this example uses the http adapter, we'll get something like:\n   * //\n   * //   DELETE /book/1234\n   * store.destroy('book', 1234).then(() => {\n   *   // The book record is no longer in the in-memory store\n   *   console.log(store.get('book', 1234)); // undefined\n   *\n   *   return store.find('book', 1234);\n   * }).then((book) {\n   *   // The book was deleted from the database too\n   *   console.log(book); // undefined\n   * });\n   *\n   * @fires SimpleStore#beforeDestroy\n   * @fires SimpleStore#afterDestroy\n   * @fires SimpleStore#remove\n   * @method SimpleStore#destroy\n   * @param {string} name Name of the {@link Mapper} to target.\n   * @param {(string|number)} id Passed to {@link Mapper#destroy}.\n   * @param {object} [opts] Passed to {@link Mapper#destroy}. See\n   * {@link Mapper#destroy} for more configuration options.\n   * @returns {Promise} Resolves when the destroy operation completes.\n   * @since 3.0.0\n   */\n  destroy (name, id, opts) {\n    opts || (opts = {})\n    return Container.prototype.destroy.call(this, name, id, opts).then((result) => {\n      const record = this.getCollection(name).remove(id, opts)\n\n      if (opts.raw) {\n        result.data = record\n      } else {\n        result = record\n      }\n      delete this._pendingQueries[name][id]\n      delete this._completedQueries[name][id]\n      return result\n    })\n  },\n\n  /**\n   * Fired during {@link SimpleStore#destroyAll}. See\n   * {@link SimpleStore~beforeDestroyAllListener} for how to listen for this event.\n   *\n   * @event SimpleStore#beforeDestroyAll\n   * @see SimpleStore~beforeDestroyAllListener\n   * @see SimpleStore#destroyAll\n   */\n  /**\n   * Callback signature for the {@link SimpleStore#event:beforeDestroyAll} event.\n   *\n   * @example\n   * function onBeforeDestroyAll (mapperName, query, opts) {\n   *   // do something\n   * }\n   * store.on('beforeDestroyAll', onBeforeDestroyAll);\n   *\n   * @callback SimpleStore~beforeDestroyAllListener\n   * @param {string} name The `name` argument received by {@link Mapper#beforeDestroyAll}.\n   * @param {object} query The `query` argument received by {@link Mapper#beforeDestroyAll}.\n   * @param {object} opts The `opts` argument received by {@link Mapper#beforeDestroyAll}.\n   * @see SimpleStore#event:beforeDestroyAll\n   * @see SimpleStore#destroyAll\n   * @since 3.0.0\n   */\n  /**\n   * Fired during {@link SimpleStore#destroyAll}. See\n   * {@link SimpleStore~afterDestroyAllListener} for how to listen for this event.\n   *\n   * @event SimpleStore#afterDestroyAll\n   * @see SimpleStore~afterDestroyAllListener\n   * @see SimpleStore#destroyAll\n   */\n  /**\n   * Callback signature for the {@link SimpleStore#event:afterDestroyAll} event.\n   *\n   * @example\n   * function onAfterDestroyAll (mapperName, query, opts, result) {\n   *   // do something\n   * }\n   * store.on('afterDestroyAll', onAfterDestroyAll);\n   *\n   * @callback SimpleStore~afterDestroyAllListener\n   * @param {string} name The `name` argument received by {@link Mapper#afterDestroyAll}.\n   * @param {object} query The `query` argument received by {@link Mapper#afterDestroyAll}.\n   * @param {object} opts The `opts` argument received by {@link Mapper#afterDestroyAll}.\n   * @param {object} result The `result` argument received by {@link Mapper#afterDestroyAll}.\n   * @see SimpleStore#event:afterDestroyAll\n   * @see SimpleStore#destroyAll\n   * @since 3.0.0\n   */\n  /**\n   * Wrapper for {@link Mapper#destroyAll}. Removes any destroyed records from\n   * the in-memory store.\n   *\n   * @example\n   * import { SimpleStore } from 'js-data';\n   * import { HttpAdapter } from 'js-data-http';\n   *\n   * const store = new SimpleStore();\n   * store.registerAdapter('http', new HttpAdapter(), { default: true });\n   *\n   * store.defineMapper('book');\n   *\n   * store.add('book', { id: 1234, title: 'Data Management is Hard' });\n   *\n   * // Since this example uses the http adapter, we'll get something like:\n   * //\n   * //   DELETE /book/1234\n   * store.destroy('book', 1234).then(() => {\n   *   // The book record is gone from the in-memory store\n   *   console.log(store.get('book', 1234)); // undefined\n   *   return store.find('book', 1234);\n   * }).then((book) {\n   *   // The book was deleted from the database too\n   *   console.log(book); // undefined\n   * });\n   *\n   * @fires SimpleStore#beforeDestroyAll\n   * @fires SimpleStore#afterDestroyAll\n   * @fires SimpleStore#remove\n   * @method SimpleStore#destroyAll\n   * @param {string} name Name of the {@link Mapper} to target.\n   * @param {object} [query] Passed to {@link Mapper#destroyAll}.\n   * @param {object} [opts] Passed to {@link Mapper#destroyAll}. See\n   * {@link Mapper#destroyAll} for more configuration options.\n   * @returns {Promise} Resolves when the delete completes.\n   * @since 3.0.0\n   */\n  destroyAll (name, query, opts) {\n    opts || (opts = {})\n    return Container.prototype.destroyAll.call(this, name, query, opts).then((result) => {\n      const records = this.getCollection(name).removeAll(query, opts)\n\n      if (opts.raw) {\n        result.data = records\n      } else {\n        result = records\n      }\n      const hash = this.hashQuery(name, query, opts)\n      delete this._pendingQueries[name][hash]\n      delete this._completedQueries[name][hash]\n      return result\n    })\n  },\n\n  eject (name, id, opts) {\n    console.warn('DEPRECATED: \"eject\" is deprecated, use \"remove\" instead')\n    return this.remove(name, id, opts)\n  },\n\n  ejectAll (name, query, opts) {\n    console.warn('DEPRECATED: \"ejectAll\" is deprecated, use \"removeAll\" instead')\n    return this.removeAll(name, query, opts)\n  },\n\n  /**\n   * Fired during {@link SimpleStore#find}. See\n   * {@link SimpleStore~beforeFindListener} for how to listen for this event.\n   *\n   * @event SimpleStore#beforeFind\n   * @see SimpleStore~beforeFindListener\n   * @see SimpleStore#find\n   */\n  /**\n   * Callback signature for the {@link SimpleStore#event:beforeFind} event.\n   *\n   * @example\n   * function onBeforeFind (mapperName, id, opts) {\n   *   // do something\n   * }\n   * store.on('beforeFind', onBeforeFind);\n   *\n   * @callback SimpleStore~beforeFindListener\n   * @param {string} name The `name` argument received by {@link Mapper#beforeFind}.\n   * @param {string|number} id The `id` argument received by {@link Mapper#beforeFind}.\n   * @param {object} opts The `opts` argument received by {@link Mapper#beforeFind}.\n   * @see SimpleStore#event:beforeFind\n   * @see SimpleStore#find\n   * @since 3.0.0\n   */\n  /**\n   * Fired during {@link SimpleStore#find}. See\n   * {@link SimpleStore~afterFindListener} for how to listen for this event.\n   *\n   * @event SimpleStore#afterFind\n   * @see SimpleStore~afterFindListener\n   * @see SimpleStore#find\n   */\n  /**\n   * Callback signature for the {@link SimpleStore#event:afterFind} event.\n   *\n   * @example\n   * function onAfterFind (mapperName, id, opts, result) {\n   *   // do something\n   * }\n   * store.on('afterFind', onAfterFind);\n   *\n   * @callback SimpleStore~afterFindListener\n   * @param {string} name The `name` argument received by {@link Mapper#afterFind}.\n   * @param {string|number} id The `id` argument received by {@link Mapper#afterFind}.\n   * @param {object} opts The `opts` argument received by {@link Mapper#afterFind}.\n   * @param {object} result The `result` argument received by {@link Mapper#afterFind}.\n   * @see SimpleStore#event:afterFind\n   * @see SimpleStore#find\n   * @since 3.0.0\n   */\n  /**\n   * Wrapper for {@link Mapper#find}. Adds any found record to the store.\n   *\n   * @example\n   * import { SimpleStore } from 'js-data';\n   * import { HttpAdapter } from 'js-data-http';\n   *\n   * const store = new SimpleStore();\n   * store.registerAdapter('http', new HttpAdapter(), { default: true });\n   *\n   * store.defineMapper('book');\n   *\n   * // Since this example uses the http adapter, we'll get something like:\n   * //\n   * //   GET /book/1234\n   * store.find('book', 1234).then((book) => {\n   *   // The book record is now in the in-memory store\n   *   console.log(store.get('book', 1234) === book); // true\n   * });\n   *\n   * @fires SimpleStore#beforeFind\n   * @fires SimpleStore#afterFind\n   * @fires SimpleStore#add\n   * @method SimpleStore#find\n   * @param {string} name Name of the {@link Mapper} to target.\n   * @param {(string|number)} id Passed to {@link Mapper#find}.\n   * @param {object} [opts] Passed to {@link Mapper#find}.\n   * @param {boolean} [opts.force] Bypass cacheFind\n   * @param {boolean|Function} [opts.usePendingFind] See {@link SimpleStore#usePendingFind}\n   * @returns {Promise} Resolves with the result, if any.\n   * @since 3.0.0\n   */\n  find (name, id, opts) {\n    opts || (opts = {})\n    const mapper = this.getMapper(name)\n    const pendingQuery = this._pendingQueries[name][id]\n    const usePendingFind = opts.usePendingFind === undefined ? this.usePendingFind : opts.usePendingFind\n    utils._(opts, mapper)\n\n    if (pendingQuery && (utils.isFunction(usePendingFind) ? usePendingFind.call(this, name, id, opts) : usePendingFind)) {\n      return pendingQuery\n    }\n    const item = this.cachedFind(name, id, opts)\n\n    if (opts.force || !item) {\n      const promise = this._pendingQueries[name][id] = Container.prototype.find.call(this, name, id, opts)\n      return promise\n        .then((result) => {\n          delete this._pendingQueries[name][id]\n          result = this._end(name, result, opts)\n          this.cacheFind(name, result, id, opts)\n          return result\n        }, (err) => {\n          delete this._pendingQueries[name][id]\n          return utils.reject(err)\n        })\n    }\n\n    return utils.resolve(item)\n  },\n\n  /**\n   * Fired during {@link SimpleStore#findAll}. See\n   * {@link SimpleStore~beforeFindAllListener} for how to listen for this event.\n   *\n   * @event SimpleStore#beforeFindAll\n   * @see SimpleStore~beforeFindAllListener\n   * @see SimpleStore#findAll\n   */\n  /**\n   * Callback signature for the {@link SimpleStore#event:beforeFindAll} event.\n   *\n   * @example\n   * function onBeforeFindAll (mapperName, query, opts) {\n   *   // do something\n   * }\n   * store.on('beforeFindAll', onBeforeFindAll);\n   *\n   * @callback SimpleStore~beforeFindAllListener\n   * @param {string} name The `name` argument received by {@link Mapper#beforeFindAll}.\n   * @param {object} query The `query` argument received by {@link Mapper#beforeFindAll}.\n   * @param {object} opts The `opts` argument received by {@link Mapper#beforeFindAll}.\n   * @see SimpleStore#event:beforeFindAll\n   * @see SimpleStore#findAll\n   * @since 3.0.0\n   */\n  /**\n   * Fired during {@link SimpleStore#findAll}. See\n   * {@link SimpleStore~afterFindAllListener} for how to listen for this event.\n   *\n   * @event SimpleStore#afterFindAll\n   * @see SimpleStore~afterFindAllListener\n   * @see SimpleStore#findAll\n   */\n  /**\n   * Callback signature for the {@link SimpleStore#event:afterFindAll} event.\n   *\n   * @example\n   * function onAfterFindAll (mapperName, query, opts, result) {\n   *   // do something\n   * }\n   * store.on('afterFindAll', onAfterFindAll);\n   *\n   * @callback SimpleStore~afterFindAllListener\n   * @param {string} name The `name` argument received by {@link Mapper#afterFindAll}.\n   * @param {object} query The `query` argument received by {@link Mapper#afterFindAll}.\n   * @param {object} opts The `opts` argument received by {@link Mapper#afterFindAll}.\n   * @param {object} result The `result` argument received by {@link Mapper#afterFindAll}.\n   * @see SimpleStore#event:afterFindAll\n   * @see SimpleStore#findAll\n   * @since 3.0.0\n   */\n  /**\n   * Wrapper for {@link Mapper#findAll}. Adds any found records to the store.\n   *\n   * @example\n   * import { SimpleStore } from 'js-data';\n   * import { HttpAdapter } from 'js-data-http';\n   *\n   * const store = new SimpleStore();\n   * store.registerAdapter('http', new HttpAdapter(), { default: true });\n   *\n   * store.defineMapper('movie');\n   *\n   * // Since this example uses the http adapter, we'll get something like:\n   * //\n   * //   GET /movie?rating=PG\n   * store.find('movie', { rating: 'PG' }).then((movies) => {\n   *   // The movie records are now in the in-memory store\n   *   console.log(store.filter('movie'));\n   * });\n   *\n   * @fires SimpleStore#beforeFindAll\n   * @fires SimpleStore#afterFindAll\n   * @fires SimpleStore#add\n   * @method SimpleStore#findAll\n   * @param {string} name Name of the {@link Mapper} to target.\n   * @param {object} [query] Passed to {@link Mapper.findAll}.\n   * @param {object} [opts] Passed to {@link Mapper.findAll}.\n   * @param {boolean} [opts.force] Bypass cacheFindAll\n   * @param {boolean|Function} [opts.usePendingFindAll] See {@link SimpleStore#usePendingFindAll}\n   * @returns {Promise} Resolves with the result, if any.\n   * @since 3.0.0\n   */\n  findAll (name, query, opts) {\n    opts || (opts = {})\n    const mapper = this.getMapper(name)\n    const hash = this.hashQuery(name, query, opts)\n    const pendingQuery = this._pendingQueries[name][hash]\n    const usePendingFindAll = opts.usePendingFindAll === undefined ? this.usePendingFindAll : opts.usePendingFindAll\n    utils._(opts, mapper)\n\n    if (pendingQuery && (utils.isFunction(usePendingFindAll) ? usePendingFindAll.call(this, name, query, opts) : usePendingFindAll)) {\n      return pendingQuery\n    }\n\n    const items = this.cachedFindAll(name, hash, opts)\n\n    if (opts.force || !items) {\n      const promise = this._pendingQueries[name][hash] = Container.prototype.findAll.call(this, name, query, opts)\n      return promise\n        .then((result) => {\n          delete this._pendingQueries[name][hash]\n          result = this._end(name, result, opts)\n          this.cacheFindAll(name, result, hash, opts)\n          return result\n        }, (err) => {\n          delete this._pendingQueries[name][hash]\n          return utils.reject(err)\n        })\n    }\n\n    return utils.resolve(items)\n  },\n\n  /**\n   * Return the {@link Collection} with the given name, if for some\n   * reason you need a direct reference to the collection.\n   *\n   * @method SimpleStore#getCollection\n   * @param {string} name Name of the {@link Collection} to retrieve.\n   * @returns {Collection}\n   * @since 3.0.0\n   * @throws {Error} Thrown if the specified {@link Collection} does not\n   * exist.\n   */\n  getCollection (name) {\n    const collection = this._collections[name]\n    if (!collection) {\n      throw utils.err(`${DOMAIN}#getCollection`, name)(404, 'collection')\n    }\n    return collection\n  },\n\n  /**\n   * Hashing function used to cache {@link SimpleStore#find} and\n   * {@link SimpleStore#findAll} requests. This method simply JSONifies the\n   * `query` argument passed to {@link SimpleStore#find} or\n   * {@link SimpleStore#findAll}.\n   *\n   * Override this method for custom hashing behavior.\n   * @method SimpleStore#hashQuery\n   * @param {string} name The `name` argument passed to {@link SimpleStore#find}\n   * or {@link SimpleStore#findAll}.\n   * @param {object} query The `query` argument passed to {@link SimpleStore#find}\n   * or {@link SimpleStore#findAll}.\n   * @returns {string} The JSONified `query`.\n   * @since 3.0.0\n   */\n  hashQuery (name, query, opts) {\n    return utils.toJson(query || {})\n  },\n\n  inject (name, records, opts) {\n    console.warn('DEPRECATED: \"inject\" is deprecated, use \"add\" instead')\n    return this.add(name, records, opts)\n  },\n\n  /**\n   * Wrapper for {@link Collection#remove}. Removes the specified\n   * {@link Record} from the store.\n   *\n   * @example <caption>SimpleStore#remove</caption>\n   * const JSData = require('js-data');\n   * const { SimpleStore } = JSData;\n   * console.log('Using JSData v' + JSData.version.full);\n   *\n   * const store = new SimpleStore();\n   * store.defineMapper('book');\n   * console.log(store.getAll('book').length);\n   * store.add('book', { id: 1234 });\n   * console.log(store.getAll('book').length);\n   * store.remove('book', 1234);\n   * console.log(store.getAll('book').length);\n   *\n   * @fires SimpleStore#remove\n   * @method SimpleStore#remove\n   * @param {string} name The name of the {@link Collection} to target.\n   * @param {string|number} id The primary key of the {@link Record} to remove.\n   * @param {object} [opts] Configuration options.\n   * @param {string[]} [opts.with] Relations of the {@link Record} to also\n   * remove from the store.\n   * @returns {Record} The removed {@link Record}, if any.\n   * @see Collection#add\n   * @see Collection#add\n   * @since 3.0.0\n   */\n  remove (name, id, opts) {\n    const record = this.getCollection(name).remove(id, opts)\n    if (record) {\n      this.removeRelated(name, [record], opts)\n    }\n    return record\n  },\n\n  /**\n   * Wrapper for {@link Collection#removeAll}. Removes the selected\n   * {@link Record}s from the store.\n   *\n   * @example <caption>SimpleStore#removeAll</caption>\n   * const JSData = require('js-data');\n   * const { SimpleStore } = JSData;\n   * console.log('Using JSData v' + JSData.version.full);\n   *\n   * const store = new SimpleStore();\n   * store.defineMapper('movie');\n   * console.log(store.getAll('movie').length);\n   * store.add('movie', [{ id: 3, rating: 'R' }, { id: 4, rating: 'PG-13' });\n   * console.log(store.getAll('movie').length);\n   * store.removeAll('movie', { rating: 'R' });\n   * console.log(store.getAll('movie').length);\n   *\n   * @fires SimpleStore#remove\n   * @method SimpleStore#removeAll\n   * @param {string} name The name of the {@link Collection} to target.\n   * @param {object} [query={}] Selection query. See {@link query}.\n   * @param {object} [query.where] See {@link query.where}.\n   * @param {number} [query.offset] See {@link query.offset}.\n   * @param {number} [query.limit] See {@link query.limit}.\n   * @param {string|Array[]} [query.orderBy] See {@link query.orderBy}.\n   * @param {object} [opts] Configuration options.\n   * @param {string[]} [opts.with] Relations of the {@link Record} to also\n   * remove from the store.\n   * @returns {Record} The removed {@link Record}s, if any.\n   * @see Collection#add\n   * @see Collection#add\n   * @since 3.0.0\n   */\n  removeAll (name, query, opts) {\n    if (!query || !Object.keys(query).length) {\n      this._completedQueries[name] = {}\n    } else {\n      this._completedQueries[name][this.hashQuery(name, query, opts)] = undefined\n    }\n    const records = this.getCollection(name).removeAll(query, opts)\n    if (records.length) {\n      this.removeRelated(name, records, opts)\n    }\n    return records\n  },\n\n  /**\n   * Remove from the store {@link Record}s that are related to the provided\n   * {@link Record}(s).\n   *\n   * @fires SimpleStore#remove\n   * @method SimpleStore#removeRelated\n   * @param {string} name The name of the {@link Collection} to target.\n   * @param {Record|Record[]} records {@link Record}s whose relations are to be\n   * removed.\n   * @param {object} [opts] Configuration options.\n   * @param {string[]} [opts.with] Relations of the {@link Record}(s) to remove\n   * from the store.\n   * @since 3.0.0\n   */\n  removeRelated (name, records, opts) {\n    if (!utils.isArray(records)) {\n      records = [records]\n    }\n    utils.forEachRelation(this.getMapper(name), opts, (def, optsCopy) => {\n      records.forEach((record) => {\n        let relatedData\n        let query\n        if (def.foreignKey && (def.type === hasOneType || def.type === hasManyType)) {\n          query = { [def.foreignKey]: def.getForeignKey(record) }\n        } else if (def.type === hasManyType && def.localKeys) {\n          query = {\n            where: {\n              [def.getRelation().idAttribute]: {\n                'in': utils.get(record, def.localKeys)\n              }\n            }\n          }\n        } else if (def.type === hasManyType && def.foreignKeys) {\n          query = {\n            where: {\n              [def.foreignKeys]: {\n                'contains': def.getForeignKey(record)\n              }\n            }\n          }\n        } else if (def.type === belongsToType) {\n          relatedData = this.remove(def.relation, def.getForeignKey(record), optsCopy)\n        }\n        if (query) {\n          relatedData = this.removeAll(def.relation, query, optsCopy)\n        }\n        if (relatedData) {\n          if (utils.isArray(relatedData) && !relatedData.length) {\n            return\n          }\n          if (def.type === hasOneType) {\n            relatedData = relatedData[0]\n          }\n          def.setLocalField(record, relatedData)\n        }\n      })\n    })\n  },\n\n  /**\n   * Fired during {@link SimpleStore#update}. See\n   * {@link SimpleStore~beforeUpdateListener} for how to listen for this event.\n   *\n   * @event SimpleStore#beforeUpdate\n   * @see SimpleStore~beforeUpdateListener\n   * @see SimpleStore#update\n   */\n  /**\n   * Callback signature for the {@link SimpleStore#event:beforeUpdate} event.\n   *\n   * @example\n   * function onBeforeUpdate (mapperName, id, props, opts) {\n   *   // do something\n   * }\n   * store.on('beforeUpdate', onBeforeUpdate);\n   *\n   * @callback SimpleStore~beforeUpdateListener\n   * @param {string} name The `name` argument received by {@link Mapper#beforeUpdate}.\n   * @param {string|number} id The `id` argument received by {@link Mapper#beforeUpdate}.\n   * @param {object} props The `props` argument received by {@link Mapper#beforeUpdate}.\n   * @param {object} opts The `opts` argument received by {@link Mapper#beforeUpdate}.\n   * @see SimpleStore#event:beforeUpdate\n   * @see SimpleStore#update\n   * @since 3.0.0\n   */\n  /**\n   * Fired during {@link SimpleStore#update}. See\n   * {@link SimpleStore~afterUpdateListener} for how to listen for this event.\n   *\n   * @event SimpleStore#afterUpdate\n   * @see SimpleStore~afterUpdateListener\n   * @see SimpleStore#update\n   */\n  /**\n   * Callback signature for the {@link SimpleStore#event:afterUpdate} event.\n   *\n   * @example\n   * function onAfterUpdate (mapperName, id, props, opts, result) {\n   *   // do something\n   * }\n   * store.on('afterUpdate', onAfterUpdate);\n   *\n   * @callback SimpleStore~afterUpdateListener\n   * @param {string} name The `name` argument received by {@link Mapper#afterUpdate}.\n   * @param {string|number} id The `id` argument received by {@link Mapper#afterUpdate}.\n   * @param {object} props The `props` argument received by {@link Mapper#afterUpdate}.\n   * @param {object} opts The `opts` argument received by {@link Mapper#afterUpdate}.\n   * @param {object} result The `result` argument received by {@link Mapper#afterUpdate}.\n   * @see SimpleStore#event:afterUpdate\n   * @see SimpleStore#update\n   * @since 3.0.0\n   */\n  /**\n   * Wrapper for {@link Mapper#update}. Adds the updated {@link Record} to the\n   * store.\n   *\n   * @example\n   * import { SimpleStore } from 'js-data';\n   * import { HttpAdapter } from 'js-data-http';\n   *\n   * const store = new SimpleStore();\n   * store.registerAdapter('http', new HttpAdapter(), { default: true });\n   *\n   * store.defineMapper('post');\n   *\n   * // Since this example uses the http adapter, we'll get something like:\n   * //\n   * //   PUT /post/1234 {\"status\":\"published\"}\n   * store.update('post', 1, { status: 'published' }).then((post) => {\n   *   // The post record has also been updated in the in-memory store\n   *   console.log(store.get('post', 1234));\n   * });\n   *\n   * @fires SimpleStore#beforeUpdate\n   * @fires SimpleStore#afterUpdate\n   * @fires SimpleStore#add\n   * @method SimpleStore#update\n   * @param {string} name Name of the {@link Mapper} to target.\n   * @param {(string|number)} id Passed to {@link Mapper#update}.\n   * @param {object} record Passed to {@link Mapper#update}.\n   * @param {object} [opts] Passed to {@link Mapper#update}. See\n   * {@link Mapper#update} for more configuration options.\n   * @returns {Promise} Resolves with the result of the update.\n   * @since 3.0.0\n   */\n  update (name, id, record, opts) {\n    opts || (opts = {})\n    return Container.prototype.update.call(this, name, id, record, opts)\n      .then((result) => this._end(name, result, opts))\n  },\n\n  /**\n   * Fired during {@link SimpleStore#updateAll}. See\n   * {@link SimpleStore~beforeUpdateAllListener} for how to listen for this event.\n   *\n   * @event SimpleStore#beforeUpdateAll\n   * @see SimpleStore~beforeUpdateAllListener\n   * @see SimpleStore#updateAll\n   */\n  /**\n   * Callback signature for the {@link SimpleStore#event:beforeUpdateAll} event.\n   *\n   * @example\n   * function onBeforeUpdateAll (mapperName, props, query, opts) {\n   *   // do something\n   * }\n   * store.on('beforeUpdateAll', onBeforeUpdateAll);\n   *\n   * @callback SimpleStore~beforeUpdateAllListener\n   * @param {string} name The `name` argument received by {@link Mapper#beforeUpdateAll}.\n   * @param {object} props The `props` argument received by {@link Mapper#beforeUpdateAll}.\n   * @param {object} query The `query` argument received by {@link Mapper#beforeUpdateAll}.\n   * @param {object} opts The `opts` argument received by {@link Mapper#beforeUpdateAll}.\n   * @see SimpleStore#event:beforeUpdateAll\n   * @see SimpleStore#updateAll\n   * @since 3.0.0\n   */\n  /**\n   * Fired during {@link SimpleStore#updateAll}. See\n   * {@link SimpleStore~afterUpdateAllListener} for how to listen for this event.\n   *\n   * @event SimpleStore#afterUpdateAll\n   * @see SimpleStore~afterUpdateAllListener\n   * @see SimpleStore#updateAll\n   */\n  /**\n   * Callback signature for the {@link SimpleStore#event:afterUpdateAll} event.\n   *\n   * @example\n   * function onAfterUpdateAll (mapperName, props, query, opts, result) {\n   *   // do something\n   * }\n   * store.on('afterUpdateAll', onAfterUpdateAll);\n   *\n   * @callback SimpleStore~afterUpdateAllListener\n   * @param {string} name The `name` argument received by {@link Mapper#afterUpdateAll}.\n   * @param {object} props The `props` argument received by {@link Mapper#afterUpdateAll}.\n   * @param {object} query The `query` argument received by {@link Mapper#afterUpdateAll}.\n   * @param {object} opts The `opts` argument received by {@link Mapper#afterUpdateAll}.\n   * @param {object} result The `result` argument received by {@link Mapper#afterUpdateAll}.\n   * @see SimpleStore#event:afterUpdateAll\n   * @see SimpleStore#updateAll\n   * @since 3.0.0\n   */\n  /**\n   * Wrapper for {@link Mapper#updateAll}. Adds the updated {@link Record}s to\n   * the store.\n   *\n   * @example\n   * import { SimpleStore } from 'js-data';\n   * import { HttpAdapter } from 'js-data-http';\n   *\n   * const store = new SimpleStore();\n   * store.registerAdapter('http', new HttpAdapter(), { default: true });\n   *\n   * store.defineMapper('post');\n   *\n   * // Since this example uses the http adapter, we'll get something like:\n   * //\n   * //   PUT /post?author_id=1234 {\"status\":\"published\"}\n   * store.updateAll('post', { author_id: 1234 }, { status: 'published' }).then((posts) => {\n   *   // The post records have also been updated in the in-memory store\n   *   console.log(store.filter('posts', { author_id: 1234 }));\n   * });\n   *\n   * @fires SimpleStore#beforeUpdateAll\n   * @fires SimpleStore#afterUpdateAll\n   * @fires SimpleStore#add\n   * @method SimpleStore#updateAll\n   * @param {string} name Name of the {@link Mapper} to target.\n   * @param {object} props Passed to {@link Mapper#updateAll}.\n   * @param {object} [query] Passed to {@link Mapper#updateAll}.\n   * @param {object} [opts] Passed to {@link Mapper#updateAll}. See\n   * {@link Mapper#updateAll} for more configuration options.\n   * @returns {Promise} Resolves with the result of the update.\n   * @since 3.0.0\n   */\n  updateAll (name, props, query, opts) {\n    opts || (opts = {})\n    return Container.prototype.updateAll.call(this, name, props, query, opts)\n      .then((result) => this._end(name, result, opts))\n  },\n\n  /**\n   * Fired during {@link SimpleStore#updateMany}. See\n   * {@link SimpleStore~beforeUpdateManyListener} for how to listen for this event.\n   *\n   * @event SimpleStore#beforeUpdateMany\n   * @see SimpleStore~beforeUpdateManyListener\n   * @see SimpleStore#updateMany\n   */\n  /**\n   * Callback signature for the {@link SimpleStore#event:beforeUpdateMany} event.\n   *\n   * @example\n   * function onBeforeUpdateMany (mapperName, records, opts) {\n   *   // do something\n   * }\n   * store.on('beforeUpdateMany', onBeforeUpdateMany);\n   *\n   * @callback SimpleStore~beforeUpdateManyListener\n   * @param {string} name The `name` argument received by {@link Mapper#beforeUpdateMany}.\n   * @param {object} records The `records` argument received by {@link Mapper#beforeUpdateMany}.\n   * @param {object} opts The `opts` argument received by {@link Mapper#beforeUpdateMany}.\n   * @see SimpleStore#event:beforeUpdateMany\n   * @see SimpleStore#updateMany\n   * @since 3.0.0\n   */\n  /**\n   * Fired during {@link SimpleStore#updateMany}. See\n   * {@link SimpleStore~afterUpdateManyListener} for how to listen for this event.\n   *\n   * @event SimpleStore#afterUpdateMany\n   * @see SimpleStore~afterUpdateManyListener\n   * @see SimpleStore#updateMany\n   */\n  /**\n   * Callback signature for the {@link SimpleStore#event:afterUpdateMany} event.\n   *\n   * @example\n   * function onAfterUpdateMany (mapperName, records, opts, result) {\n   *   // do something\n   * }\n   * store.on('afterUpdateMany', onAfterUpdateMany);\n   *\n   * @callback SimpleStore~afterUpdateManyListener\n   * @param {string} name The `name` argument received by {@link Mapper#afterUpdateMany}.\n   * @param {object} records The `records` argument received by {@link Mapper#afterUpdateMany}.\n   * @param {object} opts The `opts` argument received by {@link Mapper#afterUpdateMany}.\n   * @param {object} result The `result` argument received by {@link Mapper#afterUpdateMany}.\n   * @see SimpleStore#event:afterUpdateMany\n   * @see SimpleStore#updateMany\n   * @since 3.0.0\n   */\n  /**\n   * Wrapper for {@link Mapper#updateMany}. Adds the updated {@link Record}s to\n   * the store.\n   *\n   * @example\n   * import { SimpleStore } from 'js-data';\n   * import { HttpAdapter } from 'js-data-http';\n   *\n   * const store = new SimpleStore();\n   * store.registerAdapter('http', new HttpAdapter(), { default: true });\n   *\n   * store.defineMapper('post');\n   *\n   * // Since this example uses the http adapter, we'll get something like:\n   * //\n   * //   PUT /post [{\"id\":3,status\":\"published\"},{\"id\":4,status\":\"published\"}]\n   * store.updateMany('post', [\n   *   { id: 3, status: 'published' },\n   *   { id: 4, status: 'published' }\n   * ]).then((posts) => {\n   *   // The post records have also been updated in the in-memory store\n   *   console.log(store.getAll('post', 3, 4));\n   * });\n   *\n   * @fires SimpleStore#beforeUpdateMany\n   * @fires SimpleStore#afterUpdateMany\n   * @fires SimpleStore#add\n   * @method SimpleStore#updateMany\n   * @param {string} name Name of the {@link Mapper} to target.\n   * @param {(Object[]|Record[])} records Passed to {@link Mapper#updateMany}.\n   * @param {object} [opts] Passed to {@link Mapper#updateMany}. See\n   * {@link Mapper#updateMany} for more configuration options.\n   * @returns {Promise} Resolves with the result of the update.\n   * @since 3.0.0\n   */\n  updateMany (name, records, opts) {\n    opts || (opts = {})\n    return Container.prototype.updateMany.call(this, name, records, opts)\n      .then((result) => this._end(name, result, opts))\n  }\n}\n\nproxiedCollectionMethods.forEach(function (method) {\n  props[method] = function (name, ...args) {\n    return this.getCollection(name)[method](...args)\n  }\n})\n\nexport default Container.extend(props)\n\n/**\n * Fired when a record changes. Only works for records that have tracked fields.\n * See {@link SimpleStore~changeListener} on how to listen for this event.\n *\n * @event SimpleStore#change\n * @see SimpleStore~changeListener\n */\n\n/**\n * Callback signature for the {@link SimpleStore#event:change} event.\n *\n * @example\n * function onChange (mapperName, record, changes) {\n *   // do something\n * }\n * store.on('change', onChange);\n *\n * @callback SimpleStore~changeListener\n * @param {string} name The name of the associated {@link Mapper}.\n * @param {Record} record The Record that changed.\n * @param {object} changes The changes.\n * @see SimpleStore#event:change\n * @since 3.0.0\n */\n\n/**\n * Fired when one or more records are added to the in-memory store. See\n * {@link SimpleStore~addListener} on how to listen for this event.\n *\n * @event SimpleStore#add\n * @see SimpleStore~addListener\n * @see SimpleStore#event:add\n * @see SimpleStore#add\n * @see SimpleStore#create\n * @see SimpleStore#createMany\n * @see SimpleStore#find\n * @see SimpleStore#findAll\n * @see SimpleStore#update\n * @see SimpleStore#updateAll\n * @see SimpleStore#updateMany\n */\n\n/**\n * Callback signature for the {@link SimpleStore#event:add} event.\n *\n * @example\n * function onAdd (mapperName, recordOrRecords) {\n *   // do something\n * }\n * store.on('add', onAdd);\n *\n * @callback SimpleStore~addListener\n * @param {string} name The name of the associated {@link Mapper}.\n * @param {Record|Record[]} The Record or Records that were added.\n * @see SimpleStore#event:add\n * @see SimpleStore#add\n * @see SimpleStore#create\n * @see SimpleStore#createMany\n * @see SimpleStore#find\n * @see SimpleStore#findAll\n * @see SimpleStore#update\n * @see SimpleStore#updateAll\n * @see SimpleStore#updateMany\n * @since 3.0.0\n */\n\n/**\n * Fired when one or more records are removed from the in-memory store. See\n * {@link SimpleStore~removeListener} for how to listen for this event.\n *\n * @event SimpleStore#remove\n * @see SimpleStore~removeListener\n * @see SimpleStore#event:remove\n * @see SimpleStore#clear\n * @see SimpleStore#destroy\n * @see SimpleStore#destroyAll\n * @see SimpleStore#remove\n * @see SimpleStore#removeAll\n */\n\n/**\n * Callback signature for the {@link SimpleStore#event:remove} event.\n *\n * @example\n * function onRemove (mapperName, recordsOrRecords) {\n *   // do something\n * }\n * store.on('remove', onRemove);\n *\n * @callback SimpleStore~removeListener\n * @param {string} name The name of the associated {@link Mapper}.\n * @param {Record|Record[]} Record or Records that were removed.\n * @see SimpleStore#event:remove\n * @see SimpleStore#clear\n * @see SimpleStore#destroy\n * @see SimpleStore#destroyAll\n * @see SimpleStore#remove\n * @see SimpleStore#removeAll\n * @since 3.0.0\n */\n\n/**\n * Create a subclass of this SimpleStore:\n * @example <caption>SimpleStore.extend</caption>\n * const JSData = require('js-data');\n * const { SimpleStore } = JSData;\n * console.log('Using JSData v' + JSData.version.full);\n *\n * // Extend the class using ES2015 class syntax.\n * class CustomSimpleStoreClass extends SimpleStore {\n *   foo () { return 'bar'; }\n *   static beep () { return 'boop'; }\n * }\n * const customSimpleStore = new CustomSimpleStoreClass();\n * console.log(customSimpleStore.foo());\n * console.log(CustomSimpleStoreClass.beep());\n *\n * // Extend the class using alternate method.\n * const OtherSimpleStoreClass = SimpleStore.extend({\n *   foo () { return 'bar'; }\n * }, {\n *   beep () { return 'boop'; }\n * })\n * const otherSimpleStore = new OtherSimpleStoreClass();\n * console.log(otherSimpleStore.foo());\n * console.log(OtherSimpleStoreClass.beep());\n *\n * // Extend the class, providing a custom constructor.\n * function AnotherSimpleStoreClass () {\n *   SimpleStore.call(this)\n *   this.created_at = new Date().getTime()\n * }\n * SimpleStore.extend({\n *   constructor: AnotherSimpleStoreClass,\n *   foo () { return 'bar'; }\n * }, {\n *   beep () { return 'boop'; }\n * })\n * const anotherSimpleStore = new AnotherSimpleStoreClass();\n * console.log(anotherSimpleStore.created_at);\n * console.log(anotherSimpleStore.foo());\n * console.log(AnotherSimpleStoreClass.beep());\n *\n * @method SimpleStore.extend\n * @param {object} [props={}] Properties to add to the prototype of the\n * subclass.\n * @param {object} [props.constructor] Provide a custom constructor function\n * to be used as the subclass itself.\n * @param {object} [classProps={}] Static properties to add to the subclass.\n * @returns {Constructor} Subclass of this SimpleStore class.\n * @since 3.0.0\n */\n","import utils from './utils'\nimport './decorators'\nimport Collection from './Collection'\n\nconst DOMAIN = 'LinkedCollection'\n\n/**\n * Extends {@link Collection}. Used by a {@link DataStore} to implement an\n * Identity Map.\n *\n * ```javascript\n * import {LinkedCollection} from 'js-data'\n * ```\n *\n * @class LinkedCollection\n * @extends Collection\n * @param {array} [records] Initial set of records to insert into the\n * collection. See {@link Collection}.\n * @param {object} [opts] Configuration options. See {@link Collection}.\n * @returns {Mapper}\n */\nfunction LinkedCollection (records, opts) {\n  utils.classCallCheck(this, LinkedCollection)\n  // Make sure this collection has somewhere to store \"added\" timestamps\n  Object.defineProperties(this, {\n    _added: {\n      value: {}\n    },\n    datastore: {\n      writable: true,\n      value: undefined\n    }\n  })\n\n  Collection.call(this, records, opts)\n\n  // Make sure this collection has a reference to a datastore\n  if (!this.datastore) {\n    throw utils.err(`new ${DOMAIN}`, 'opts.datastore')(400, 'DataStore', this.datastore)\n  }\n}\n\nexport default Collection.extend({\n  constructor: LinkedCollection,\n\n  _addMeta (record, timestamp) {\n    // Track when this record was added\n    this._added[this.recordId(record)] = timestamp\n\n    if (utils.isFunction(record._set)) {\n      record._set('$', timestamp)\n    }\n  },\n\n  _clearMeta (record) {\n    delete this._added[this.recordId(record)]\n    if (utils.isFunction(record._set)) {\n      record._set('$') // unset\n    }\n  },\n\n  _onRecordEvent (...args) {\n    Collection.prototype._onRecordEvent.apply(this, args)\n    const event = args[0]\n    // This is a very brute force method\n    // Lots of room for optimization\n    if (utils.isString(event) && event.indexOf('change') === 0) {\n      this.updateIndexes(args[1])\n    }\n  },\n\n  add (records, opts) {\n    const mapper = this.mapper\n    const timestamp = new Date().getTime()\n    const singular = utils.isObject(records) && !utils.isArray(records)\n\n    if (singular) {\n      records = [records]\n    }\n    records = Collection.prototype.add.call(this, records, opts)\n\n    if (mapper.relationList.length && records.length) {\n      // Check the currently visited record for relations that need to be\n      // inserted into their respective collections.\n      mapper.relationList.forEach(function (def) {\n        def.addLinkedRecords(records)\n      })\n    }\n\n    records.forEach((record) => this._addMeta(record, timestamp))\n\n    return singular ? records[0] : records\n  },\n\n  remove (idOrRecord, opts) {\n    const mapper = this.mapper\n    const record = Collection.prototype.remove.call(this, idOrRecord, opts)\n    if (record) {\n      this._clearMeta(record)\n    }\n\n    if (mapper.relationList.length && record) {\n      mapper.relationList.forEach(function (def) {\n        def.removeLinkedRecords(mapper, [record])\n      })\n    }\n\n    return record\n  },\n\n  removeAll (query, opts) {\n    const mapper = this.mapper\n    const records = Collection.prototype.removeAll.call(this, query, opts)\n    records.forEach(this._clearMeta, this)\n\n    if (mapper.relationList.length && records.length) {\n      mapper.relationList.forEach(function (def) {\n        def.removeLinkedRecords(mapper, records)\n      })\n    }\n\n    return records\n  }\n})\n\n/**\n * Create a subclass of this LinkedCollection:\n *\n * @example <caption>LinkedCollection.extend</caption>\n * const JSData = require('js-data');\n * const { LinkedCollection } = JSData;\n * console.log('Using JSData v' + JSData.version.full);\n *\n * // Extend the class using ES2015 class syntax.\n * class CustomLinkedCollectionClass extends LinkedCollection {\n *   foo () { return 'bar'; }\n *   static beep () { return 'boop'; }\n * }\n * const customLinkedCollection = new CustomLinkedCollectionClass();\n * console.log(customLinkedCollection.foo());\n * console.log(CustomLinkedCollectionClass.beep());\n *\n * // Extend the class using alternate method.\n * const OtherLinkedCollectionClass = LinkedCollection.extend({\n *   foo () { return 'bar'; }\n * }, {\n *   beep () { return 'boop'; }\n * });\n * const otherLinkedCollection = new OtherLinkedCollectionClass();\n * console.log(otherLinkedCollection.foo());\n * console.log(OtherLinkedCollectionClass.beep());\n *\n * // Extend the class, providing a custom constructor.\n * function AnotherLinkedCollectionClass () {\n *   LinkedCollection.call(this);\n *   this.created_at = new Date().getTime();\n * }\n * LinkedCollection.extend({\n *   constructor: AnotherLinkedCollectionClass,\n *   foo () { return 'bar'; }\n * }, {\n *   beep () { return 'boop'; }\n * });\n * const anotherLinkedCollection = new AnotherLinkedCollectionClass();\n * console.log(anotherLinkedCollection.created_at);\n * console.log(anotherLinkedCollection.foo());\n * console.log(AnotherLinkedCollectionClass.beep());\n *\n * @method LinkedCollection.extend\n * @param {object} [props={}] Properties to add to the prototype of the\n * subclass.\n * @param {object} [props.constructor] Provide a custom constructor function\n * to be used as the subclass itself.\n * @param {object} [classProps={}] Static properties to add to the subclass.\n * @returns {Constructor} Subclass of this LinkedCollection class.\n * @since 3.0.0\n */\n","import utils, { safeSetLink, safeSetProp } from './utils'\n\nimport {\n  belongsToType,\n  hasManyType,\n  hasOneType\n} from './decorators'\nimport SimpleStore from './SimpleStore'\nimport LinkedCollection from './LinkedCollection'\n\nconst DATASTORE_DEFAULTS = {\n  /**\n   * Whether in-memory relations should be unlinked from records after they are\n   * destroyed.\n   *\n   * @default true\n   * @name DataStore#unlinkOnDestroy\n   * @since 3.0.0\n   * @type {boolean}\n   */\n  unlinkOnDestroy: true\n}\n\n/**\n * The `DataStore` class is an extension of {@link SimpleStore}. Not only does\n * `DataStore` manage mappers and store data in collections, it uses the\n * {@link LinkedCollection} class to link related records together in memory.\n *\n * ```javascript\n * import { DataStore } from 'js-data';\n * ```\n *\n * @example\n * import { DataStore } from 'js-data';\n * import HttpAdapter from 'js-data-http';\n * const store = new DataStore();\n *\n * // DataStore#defineMapper returns a direct reference to the newly created\n * // Mapper.\n * const UserMapper = store.defineMapper('user');\n *\n * // DataStore#as returns the store scoped to a particular Mapper.\n * const UserStore = store.as('user');\n *\n * // Call \"find\" on \"UserMapper\" (Stateless ORM)\n * UserMapper.find(1).then((user) => {\n *   // retrieved a \"user\" record via the http adapter, but that's it\n *\n *   // Call \"find\" on \"store\" targeting \"user\" (Stateful DataStore)\n *   return store.find('user', 1); // same as \"UserStore.find(1)\"\n * }).then((user) => {\n *   // not only was a \"user\" record retrieved, but it was added to the\n *   // store's \"user\" collection\n *   const cachedUser = store.getCollection('user').get(1);\n *   console.log(user === cachedUser); // true\n * });\n *\n * @class DataStore\n * @extends SimpleStore\n * @param {object} [opts] Configuration options. See {@link SimpleStore}.\n * @param {boolean} [opts.collectionClass={@link LinkedCollection}] See {@link DataStore#collectionClass}.\n * @param {boolean} [opts.debug=false] See {@link Component#debug}.\n * @param {boolean} [opts.unlinkOnDestroy=true] See {@link DataStore#unlinkOnDestroy}.\n * @param {boolean|Function} [opts.usePendingFind=true] See {@link DataStore#usePendingFind}.\n * @param {boolean|Function} [opts.usePendingFindAll=true] See {@link DataStore#usePendingFindAll}.\n * @returns {DataStore}\n * @see SimpleStore\n * @since 3.0.0\n * @tutorial [\"http://www.js-data.io/v3.0/docs/components-of-jsdata#datastore\",\"Components of JSData: DataStore\"]\n * @tutorial [\"http://www.js-data.io/v3.0/docs/working-with-the-datastore\",\"Working with the DataStore\"]\n * @tutorial [\"http://www.js-data.io/v3.0/docs/jsdata-and-the-browser\",\"Notes on using JSData in the Browser\"]\n */\nfunction DataStore (opts) {\n  utils.classCallCheck(this, DataStore)\n\n  opts || (opts = {})\n  // Fill in any missing options with the defaults\n  utils.fillIn(opts, DATASTORE_DEFAULTS)\n  opts.collectionClass || (opts.collectionClass = LinkedCollection)\n  SimpleStore.call(this, opts)\n}\n\nconst props = {\n  constructor: DataStore,\n\n  defineMapper (name, opts) {\n    // Complexity of this method is beyond simply using => functions to bind context\n    const self = this\n    const mapper = SimpleStore.prototype.defineMapper.call(self, name, opts)\n    const idAttribute = mapper.idAttribute\n    const collection = this.getCollection(name)\n\n    mapper.relationList.forEach(function (def) {\n      const relation = def.relation\n      const localField = def.localField\n      const path = `links.${localField}`\n      const foreignKey = def.foreignKey\n      const type = def.type\n      const updateOpts = { index: foreignKey }\n      let descriptor\n\n      const getter = function () { return this._get(path) }\n\n      if (type === belongsToType) {\n        if (!collection.indexes[foreignKey]) {\n          collection.createIndex(foreignKey)\n        }\n\n        descriptor = {\n          get: getter,\n          // e.g. profile.user = someUser\n          // or comment.post = somePost\n          set (record) {\n            // e.g. const otherUser = profile.user\n            const currentParent = this._get(path)\n            // e.g. profile.user === someUser\n            if (record === currentParent) {\n              return currentParent\n            }\n            const id = utils.get(this, idAttribute)\n            const inverseDef = def.getInverse(mapper)\n\n            // e.g. profile.user !== someUser\n            // or comment.post !== somePost\n            if (currentParent && inverseDef) {\n              this.removeInverseRelation(currentParent, id, inverseDef, idAttribute)\n            }\n            if (record) {\n              // e.g. profile.user = someUser\n              const relatedIdAttribute = def.getRelation().idAttribute\n              const relatedId = utils.get(record, relatedIdAttribute)\n\n              // Prefer store record\n              if (relatedId !== undefined && this._get('$')) {\n                record = self.get(relation, relatedId) || record\n              }\n\n              // Set locals\n              // e.g. profile.user = someUser\n              // or comment.post = somePost\n              safeSetLink(this, localField, record)\n              safeSetProp(this, foreignKey, relatedId)\n              collection.updateIndex(this, updateOpts)\n\n              if (inverseDef) {\n                this.setupInverseRelation(record, id, inverseDef, idAttribute)\n              }\n            } else {\n              // Unset in-memory link only\n              // e.g. profile.user = undefined\n              // or comment.post = undefined\n              safeSetLink(this, localField, undefined)\n            }\n            return record\n          }\n        }\n\n        let foreignKeyDescriptor = Object.getOwnPropertyDescriptor(mapper.recordClass.prototype, foreignKey)\n        if (!foreignKeyDescriptor) {\n          foreignKeyDescriptor = {\n            enumerable: true\n          }\n        }\n        const originalGet = foreignKeyDescriptor.get\n        foreignKeyDescriptor.get = function () {\n          if (originalGet) {\n            return originalGet.call(this)\n          }\n          return this._get(`props.${foreignKey}`)\n        }\n        const originalSet = foreignKeyDescriptor.set\n        foreignKeyDescriptor.set = function (value) {\n          if (originalSet) {\n            originalSet.call(this, value)\n          }\n          const currentParent = utils.get(this, localField)\n          const id = utils.get(this, idAttribute)\n          const inverseDef = def.getInverse(mapper)\n          const currentParentId = currentParent ? utils.get(currentParent, def.getRelation().idAttribute) : undefined\n\n          if (inverseDef && currentParent && currentParentId !== undefined && currentParentId !== value) {\n            if (inverseDef.type === hasOneType) {\n              safeSetLink(currentParent, inverseDef.localField, undefined)\n            } else if (inverseDef.type === hasManyType) {\n              const children = utils.get(currentParent, inverseDef.localField)\n              if (id === undefined) {\n                utils.remove(children, (child) => child === this)\n              } else {\n                utils.remove(children, (child) => child === this || id === utils.get(child, idAttribute))\n              }\n            }\n          }\n\n          safeSetProp(this, foreignKey, value)\n          collection.updateIndex(this, updateOpts)\n\n          if ((value === undefined || value === null)) {\n            if (currentParentId !== undefined) {\n              // Unset locals\n              utils.set(this, localField, undefined)\n            }\n          } else if (this._get('$')) {\n            const storeRecord = self.get(relation, value)\n            if (storeRecord) {\n              utils.set(this, localField, storeRecord)\n            }\n          }\n        }\n        Object.defineProperty(mapper.recordClass.prototype, foreignKey, foreignKeyDescriptor)\n      } else if (type === hasManyType) {\n        const localKeys = def.localKeys\n        const foreignKeys = def.foreignKeys\n\n        // TODO: Handle case when belongsTo relation isn't ever defined\n        if (self._collections[relation] && foreignKey && !self.getCollection(relation).indexes[foreignKey]) {\n          self.getCollection(relation).createIndex(foreignKey)\n        }\n\n        descriptor = {\n          get () {\n            let current = getter.call(this)\n            if (!current) {\n              this._set(path, [])\n            }\n            return getter.call(this)\n          },\n          // e.g. post.comments = someComments\n          // or user.groups = someGroups\n          // or group.users = someUsers\n          set (records) {\n            if (records && !utils.isArray(records)) {\n              records = [records]\n            }\n            const id = utils.get(this, idAttribute)\n            const relatedIdAttribute = def.getRelation().idAttribute\n            const inverseDef = def.getInverse(mapper)\n            const inverseLocalField = inverseDef.localField\n            const current = this._get(path) || []\n            const toLink = []\n            const toLinkIds = {}\n\n            if (records) {\n              records.forEach((record) => {\n                // e.g. comment.id\n                const relatedId = utils.get(record, relatedIdAttribute)\n                const currentParent = utils.get(record, inverseLocalField)\n                if (currentParent && currentParent !== this) {\n                  const currentChildrenOfParent = utils.get(currentParent, localField)\n                  // e.g. somePost.comments.remove(comment)\n                  if (relatedId === undefined) {\n                    utils.remove(currentChildrenOfParent, (child) => child === record)\n                  } else {\n                    utils.remove(currentChildrenOfParent, (child) => child === record || relatedId === utils.get(child, relatedIdAttribute))\n                  }\n                }\n                if (relatedId !== undefined) {\n                  if (this._get('$')) {\n                    // Prefer store record\n                    record = self.get(relation, relatedId) || record\n                  }\n                  // e.g. toLinkIds[comment.id] = comment\n                  toLinkIds[relatedId] = record\n                }\n                toLink.push(record)\n              })\n            }\n\n            // e.g. post.comments = someComments\n            if (foreignKey) {\n              current.forEach((record) => {\n                // e.g. comment.id\n                const relatedId = utils.get(record, relatedIdAttribute)\n                if ((relatedId === undefined && toLink.indexOf(record) === -1) || (relatedId !== undefined && !(relatedId in toLinkIds))) {\n                  // Update (unset) inverse relation\n                  if (records) {\n                    // e.g. comment.post_id = undefined\n                    safeSetProp(record, foreignKey, undefined)\n                    // e.g. CommentCollection.updateIndex(comment, { index: 'post_id' })\n                    self.getCollection(relation).updateIndex(record, updateOpts)\n                  }\n                  // e.g. comment.post = undefined\n                  safeSetLink(record, inverseLocalField, undefined)\n                }\n              })\n              toLink.forEach((record) => {\n                // Update (set) inverse relation\n                // e.g. comment.post_id = post.id\n                safeSetProp(record, foreignKey, id)\n                // e.g. CommentCollection.updateIndex(comment, { index: 'post_id' })\n                self.getCollection(relation).updateIndex(record, updateOpts)\n                // e.g. comment.post = post\n                safeSetLink(record, inverseLocalField, this)\n              })\n            } else if (localKeys) {\n              // Update locals\n              // e.g. group.users = someUsers\n              // Update (set) inverse relation\n              const ids = toLink.map((child) => utils.get(child, relatedIdAttribute)).filter((id) => id !== undefined)\n              // e.g. group.user_ids = [1,2,3,...]\n              utils.set(this, localKeys, ids)\n              // Update (unset) inverse relation\n              if (inverseDef.foreignKeys) {\n                current.forEach((child) => {\n                  const relatedId = utils.get(child, relatedIdAttribute)\n                  if ((relatedId === undefined && toLink.indexOf(child) === -1) || (relatedId !== undefined && !(relatedId in toLinkIds))) {\n                    // Update inverse relation\n                    // safeSetLink(child, inverseLocalField, undefined)\n                    const parents = utils.get(child, inverseLocalField) || []\n                    // e.g. someUser.groups.remove(group)\n                    if (id === undefined) {\n                      utils.remove(parents, (parent) => parent === this)\n                    } else {\n                      utils.remove(parents, (parent) => parent === this || id === utils.get(parent, idAttribute))\n                    }\n                  }\n                })\n                toLink.forEach((child) => {\n                  // Update (set) inverse relation\n                  const parents = utils.get(child, inverseLocalField)\n                  // e.g. someUser.groups.push(group)\n                  if (id === undefined) {\n                    utils.noDupeAdd(parents, this, (parent) => parent === this)\n                  } else {\n                    utils.noDupeAdd(parents, this, (parent) => parent === this || id === utils.get(parent, idAttribute))\n                  }\n                })\n              }\n            } else if (foreignKeys) {\n              // e.g. user.groups = someGroups\n              // Update (unset) inverse relation\n              current.forEach((parent) => {\n                const ids = utils.get(parent, foreignKeys) || []\n                // e.g. someGroup.user_ids.remove(user.id)\n                utils.remove(ids, (_key) => id === _key)\n                const children = utils.get(parent, inverseLocalField)\n                // e.g. someGroup.users.remove(user)\n                if (id === undefined) {\n                  utils.remove(children, (child) => child === this)\n                } else {\n                  utils.remove(children, (child) => child === this || id === utils.get(child, idAttribute))\n                }\n              })\n              // Update (set) inverse relation\n              toLink.forEach((parent) => {\n                const ids = utils.get(parent, foreignKeys) || []\n                utils.noDupeAdd(ids, id, (_key) => id === _key)\n                const children = utils.get(parent, inverseLocalField)\n                if (id === undefined) {\n                  utils.noDupeAdd(children, this, (child) => child === this)\n                } else {\n                  utils.noDupeAdd(children, this, (child) => child === this || id === utils.get(child, idAttribute))\n                }\n              })\n            }\n\n            this._set(path, toLink)\n            return toLink\n          }\n        }\n      } else if (type === hasOneType) {\n        // TODO: Handle case when belongsTo relation isn't ever defined\n        if (self._collections[relation] && foreignKey && !self.getCollection(relation).indexes[foreignKey]) {\n          self.getCollection(relation).createIndex(foreignKey)\n        }\n        descriptor = {\n          get: getter,\n          // e.g. user.profile = someProfile\n          set (record) {\n            const current = this._get(path)\n            if (record === current) {\n              return current\n            }\n            const inverseLocalField = def.getInverse(mapper).localField\n            // Update (unset) inverse relation\n            if (current) {\n              safeSetProp(current, foreignKey, undefined)\n              self.getCollection(relation).updateIndex(current, updateOpts)\n              safeSetLink(current, inverseLocalField, undefined)\n            }\n            if (record) {\n              const relatedId = utils.get(record, def.getRelation().idAttribute)\n              // Prefer store record\n              if (relatedId !== undefined) {\n                record = self.get(relation, relatedId) || record\n              }\n\n              // Set locals\n              safeSetLink(this, localField, record)\n\n              // Update (set) inverse relation\n              safeSetProp(record, foreignKey, utils.get(this, idAttribute))\n              self.getCollection(relation).updateIndex(record, updateOpts)\n              safeSetLink(record, inverseLocalField, this)\n            } else {\n              // Unset locals\n              safeSetLink(this, localField, undefined)\n            }\n            return record\n          }\n        }\n      }\n\n      if (descriptor) {\n        descriptor.enumerable = def.enumerable === undefined ? false : def.enumerable\n        if (def.get) {\n          let origGet = descriptor.get\n          descriptor.get = function () {\n            return def.get(def, this, (...args) => origGet.apply(this, args))\n          }\n        }\n        if (def.set) {\n          let origSet = descriptor.set\n          descriptor.set = function (related) {\n            return def.set(def, this, related, (value) => origSet.call(this, value === undefined ? related : value))\n          }\n        }\n        Object.defineProperty(mapper.recordClass.prototype, localField, descriptor)\n      }\n    })\n\n    return mapper\n  },\n\n  destroy (name, id, opts) {\n    opts || (opts = {})\n    return SimpleStore.prototype.destroy.call(this, name, id, opts).then((result) => {\n      let record\n      if (opts.raw) {\n        record = result.data\n      } else {\n        record = result\n      }\n\n      if (record && this.unlinkOnDestroy) {\n        const _opts = utils.plainCopy(opts)\n        _opts.withAll = true\n        utils.forEachRelation(this.getMapper(name), _opts, (def) => {\n          utils.set(record, def.localField, undefined)\n        })\n      }\n      return result\n    })\n  },\n\n  destroyAll (name, query, opts) {\n    opts || (opts = {})\n    return SimpleStore.prototype.destroyAll.call(this, name, query, opts).then((result) => {\n      let records\n      if (opts.raw) {\n        records = result.data\n      } else {\n        records = result\n      }\n\n      if (records && records.length && this.unlinkOnDestroy) {\n        const _opts = utils.plainCopy(opts)\n        _opts.withAll = true\n        utils.forEachRelation(this.getMapper(name), _opts, (def) => {\n          records.forEach((record) => {\n            utils.set(record, def.localField, undefined)\n          })\n        })\n      }\n      return result\n    })\n  }\n}\n\nexport default SimpleStore.extend(props)\n\n/**\n * Create a subclass of this DataStore:\n * @example <caption>DataStore.extend</caption>\n * const JSData = require('js-data');\n * const { DataStore } = JSData;\n * console.log('Using JSData v' + JSData.version.full);\n *\n * // Extend the class using ES2015 class syntax.\n * class CustomDataStoreClass extends DataStore {\n *   foo () { return 'bar'; }\n *   static beep () { return 'boop'; }\n * }\n * const customDataStore = new CustomDataStoreClass();\n * console.log(customDataStore.foo());\n * console.log(CustomDataStoreClass.beep());\n *\n * // Extend the class using alternate method.\n * const OtherDataStoreClass = DataStore.extend({\n *   foo () { return 'bar'; }\n * }, {\n *   beep () { return 'boop'; }\n * });\n * const otherDataStore = new OtherDataStoreClass();\n * console.log(otherDataStore.foo());\n * console.log(OtherDataStoreClass.beep());\n *\n * // Extend the class, providing a custom constructor.\n * function AnotherDataStoreClass () {\n *   DataStore.call(this);\n *   this.created_at = new Date().getTime();\n * }\n * DataStore.extend({\n *   constructor: AnotherDataStoreClass,\n *   foo () { return 'bar'; }\n * }, {\n *   beep () { return 'boop'; }\n * });\n * const anotherDataStore = new AnotherDataStoreClass();\n * console.log(anotherDataStore.created_at);\n * console.log(anotherDataStore.foo());\n * console.log(AnotherDataStoreClass.beep());\n *\n * @method DataStore.extend\n * @param {object} [props={}] Properties to add to the prototype of the\n * subclass.\n * @param {object} [props.constructor] Provide a custom constructor function\n * to be used as the subclass itself.\n * @param {object} [classProps={}] Static properties to add to the subclass.\n * @returns {Constructor} Subclass of this DataStore class.\n * @since 3.0.0\n */\n","/**\n * Registered as `js-data` in NPM and Bower.\n *\n * Also available from CDN.JS and JSDelivr.\n *\n * @module js-data\n *\n * @example <caption>Install from NPM</caption>\n * npm i --save js-data@beta\n * @example <caption>Install from Bower</caption>\n * bower i --save js-data@3.0.0-beta.1\n * @example <caption>Install from CDN.JS</caption>\n * <script src=\"https://cdnjs.cloudflare.com/ajax/libs/js-data/3.0.0-beta.1/js-data.min.js\"></script>\n * @example <caption>Install from JSDelivr</caption>\n * <script src=\"https://cdn.jsdelivr.net/js-data/3.0.0-beta.1/js-data.min.js\"></script>\n * @example <caption>Load into your app via script tag</caption>\n * <script src=\"/path/to/js-data.min.js\"></script>\n * <script>\n *   console.log(JSData.version.full); // \"3.0.0-beta.1\"\n * </script>\n * @example <caption>Load into your app via CommonJS</caption>\n * var JSData = require('js-data');\n * @example <caption>Load into your app via ES2015 Modules</caption>\n * import * as JSData from 'js-data';\n * @example <caption>Load into your app via AMD</caption>\n * define('myApp', ['js-data'], function (JSData) { ... });\n */\n\n/**\n * JSData's utility methods.\n *\n * @example\n * import { utils } from 'js-data';\n * console.log(utils.isString('foo')); // true\n *\n * @name module:js-data.utils\n * @property {Function} Promise See {@link utils.Promise}.\n * @see utils\n * @since 3.0.0\n * @type {Object}\n */\nimport utils from './utils'\n\n/**\n * JSData's {@link Collection} class.\n *\n * @example\n * import { Collection } from 'js-data';\n * const collection = new Collection();\n *\n * @name module:js-data.Collection\n * @see Collection\n * @since 3.0.0\n * @tutorial [\"http://www.js-data.io/v3.0/docs/components-of-jsdata#collection\",\"Components of JSData: Collection\"]\n * @type {Constructor}\n */\nimport Collection from './Collection'\n\n/**\n * JSData's {@link Component} class. Most components in JSData extend this\n * class.\n *\n * @example\n * import { Component } from 'js-data';\n * // Make a custom component.\n * const MyComponent = Component.extend({\n *   myMethod (someArg) { ... }\n * });\n *\n * @name module:js-data.Component\n * @see Component\n * @since 3.0.0\n * @type {Constructor}\n */\nimport Component from './Component'\n\n/**\n * JSData's {@link Container} class. Defines and manages {@link Mapper}s. Used\n * in Node.js and in the browser, though in the browser you may want to use\n * {@link DataStore} instead.\n *\n * @example\n * import { Container } from 'js-data';\n * const store = new Container();\n *\n * @name module:js-data.Container\n * @see Container\n * @since 3.0.0\n * @tutorial [\"http://www.js-data.io/v3.0/docs/components-of-jsdata#container\",\"Components of JSData: Container\"]\n * @type {Constructor}\n */\nimport {Container} from './Container'\n\n/**\n * JSData's {@link DataStore} class. Primarily for use in the browser. In\n * Node.js you probably want to use {@link Container} instead.\n *\n * @example\n * import { DataStore } from 'js-data';\n * const store = new DataStore();\n *\n * @name module:js-data.DataStore\n * @see DataStore\n * @since 3.0.0\n * @tutorial [\"http://www.js-data.io/v3.0/docs/components-of-jsdata#datastore\",\"Components of JSData: DataStore\"]\n * @type {Constructor}\n */\nimport DataStore from './DataStore'\n\n/**\n * JSData's {@link Index} class, based on [mindex]{@link https://github.com/internalfx/mindex}.\n *\n * @name module:js-data.Index\n * @see Index\n * @since 3.0.0\n * @type {Constructor}\n */\nimport Index from '../lib/mindex/index'\n\n/**\n * JSData's {@link LinkedCollection} class. Used by the {@link DataStore}\n * component. If you need to create a collection manually, you should probably\n * use the {@link Collection} class.\n *\n * @name module:js-data.LinkedCollection\n * @see DataStore\n * @see LinkedCollection\n * @since 3.0.0\n * @type {Constructor}\n */\nimport LinkedCollection from './LinkedCollection'\n\n/**\n * JSData's {@link Mapper} class. The core of the ORM.\n *\n * @example <caption>Recommended use</caption>\n * import { Container } from 'js-data';\n * const store = new Container();\n * store.defineMapper('user');\n *\n * @example <caption>Create Mapper manually</caption>\n * import { Mapper } from 'js-data';\n * const UserMapper = new Mapper({ name: 'user' });\n *\n * @name module:js-data.Mapper\n * @see Container\n * @see Mapper\n * @since 3.0.0\n * @tutorial [\"http://www.js-data.io/v3.0/docs/modeling-your-data\",\"Modeling your data\"]\n * @tutorial [\"http://www.js-data.io/v3.0/docs/components-of-jsdata#mapper\",\"Components of JSData: Mapper\"]\n * @type {Constructor}\n */\nimport Mapper from './Mapper'\n\n/**\n * JSData's {@link Query} class. Used by the {@link Collection} component.\n *\n * @name module:js-data.Query\n * @see Query\n * @since 3.0.0\n * @type {Constructor}\n */\nimport Query from './Query'\n\n/**\n * JSData's {@link Record} class.\n *\n * @example\n * import { Container } from 'js-data';\n * const store = new Container();\n * store.defineMapper('user');\n * const user = store.createRecord('user');\n *\n * @name module:js-data.Record\n * @see Record\n * @since 3.0.0\n * @tutorial [\"http://www.js-data.io/v3.0/docs/components-of-jsdata#record\",\"Components of JSData: Record\"]\n * @type {Constructor}\n */\nimport Record from './Record'\n\n/**\n * JSData's {@link Schema} class. Implements http://json-schema.org/draft-04.\n *\n * @example\n * import { Container, Schema } from 'js-data';\n * const userSchema = new Schema({\n *   properties: {\n *     id: { type: 'string' },\n *     name: { type: 'string' }\n *   }\n * });\n * const store = new Container();\n * store.defineMapper('user', {\n *   schema: userSchema\n * });\n *\n * @name module:js-data.Schema\n * @see Schema\n * @see http://json-schema.org/\n * @since 3.0.0\n * @tutorial [\"http://www.js-data.io/v3.0/docs/components-of-jsdata#schema\",\"Components of JSData: schema\"]\n * @tutorial [\"http://www.js-data.io/v3.0/docs/schemas\",\"JSData's Schema Syntax\"]\n * @type {Constructor}\n */\nimport Schema from './Schema'\n\n/**\n * JSData's {@link Settable} class.\n *\n * @example\n * import { Settable } from 'js-data';\n * const obj = new Settable();\n * obj.set('secret', 'value');\n * console.log(JSON.stringify(obj)); // {}\n *\n * @name module:js-data.Settable\n * @see Settable\n * @since 3.0.0\n * @type {Constructor}\n */\nimport Settable from './Settable'\n\n/**\n * JSData's {@link SimpleStore} class. Primarily for use in the browser. In\n * Node.js you probably want to use {@link Container} instead.\n *\n * @example\n * import { SimpleStore } from 'js-data';\n * const store = new SimpleStore();\n *\n * @name module:js-data.SimpleStore\n * @see SimpleStore\n * @since 3.0.0\n * @tutorial [\"http://www.js-data.io/v3.0/docs/components-of-jsdata#SimpleStore\",\"Components of JSData: SimpleStore\"]\n * @type {Constructor}\n */\nimport SimpleStore from './SimpleStore'\n\n/**\n * Describes the version of this `JSData` object.\n *\n * @example\n * console.log(JSData.version.full); // \"3.0.0-beta.1\"\n *\n * @name version\n * @memberof module:js-data\n * @property {string} full The full semver value.\n * @property {number} major The major version number.\n * @property {number} minor The minor version number.\n * @property {number} patch The patch version number.\n * @property {(string|boolean)} alpha The alpha version value, otherwise `false`\n * if the current version is not alpha.\n * @property {(string|boolean)} beta The beta version value, otherwise `false`\n * if the current version is not beta.\n * @since 2.0.0\n * @type {Object}\n */\nexport const version = '<%= version %>'\n\nexport * from './decorators'\n\nexport {\n  Collection,\n  Component,\n  Container,\n  DataStore,\n  Index,\n  LinkedCollection,\n  Mapper,\n  Query,\n  Record,\n  Schema,\n  Settable,\n  SimpleStore,\n  utils\n}\n"],"names":["DOMAIN","INFINITY","MAX_INTEGER","BOOL_TAG","DATE_TAG","FUNC_TAG","NUMBER_TAG","OBJECT_TAG","REGEXP_TAG","STRING_TAG","objToString","Object","prototype","toString","PATH","ERRORS","arguments","toInteger","value","sign","remainder","toStr","call","isPlainObject","constructor","mkdirP","object","path","parts","split","forEach","key","utils","Promise","_","dest","src","forOwn","undefined","isFunction","indexOf","_forRelation","opts","def","fn","thisArg","relationName","relation","containedName","index","with","_getIndex","localField","withAll","optsCopy","fillIn","getRelation","slice","_activeWith","splice","i","length","substr","list","_relation","isObject","addHiddenPropsToTarget","target","props","map","keys","propName","descriptor","getOwnPropertyDescriptor","enumerable","defineProperties","areDifferent","newObject","oldObject","diff","diffObjects","diffCount","added","removed","changed","classCallCheck","instance","ctor","err","name","copy","from","to","stackFrom","stackTo","blacklist","plain","isArray","isDate","Date","getTime","isRegExp","RegExp","source","match","lastIndex","create","getPrototypeOf","push","result","hasOwnProperty","isBlacklisted","deepFillIn","existing","deepMixIn","equalsFn","ignore","deepEqual","newKeys","filter","oldKeys","oldValue","newValue","equal","a","b","domain","code","prefix","message","apply","Array","Error","eventify","getter","setter","_events","emit","events","args","type","shift","listeners","f","c","all","unshift","off","func","on","extend","classProps","superClass","subClass","configurable","writable","obj","setPrototypeOf","strictEs6Class","__proto__","defineProperty","findIndex","array","record","forEachRelation","mapper","relationList","len","fromJson","json","isString","JSON","parse","prop","last","pop","getSuper","isCtor","__super__","intersection","array1","array2","item","matches","test","isBoolean","isInteger","isNull","isNumber","isSorN","isUndefined","logify","dbg","log","level","debug","toUpperCase","console","noDupeAdd","omit","_props","pick","reduce","plainCopy","reject","remove","resolve","set","_path","exec","_equal","toJson","stringify","unset","safeSetProp","field","_set","safeSetLink","Settable","_get","get","_unset","Component","_listeners","INDEX_ERR","reserved","limit","offset","orderBy","skip","sort","where","escapeRegExp","percentRegExp","underscoreRegExp","escape","pattern","replace","Query","collection","data","_applyWhereFromObject","fields","ops","predicates","clause","expr","op","_applyWhereFromArray","groups","_where","prev","parser","group","isOr","_testObjectGroup","keep","first","charAt","evaluate","_testArrayGroup","between","leftKeys","rightKeys","getIndex","compare","cA","cB","temp","predicate","like","query","getData","forEachFn","keyList","getAll","concat","flags","num","Math","min","mapFn","mapCall","funcName","run","belongsToType","hasManyType","hasOneType","Relation","relatedMapper","options","TYPE_NAME","validateOptions","canAutoAddLinks","add","relatedCollection","datastore","getCollection","related","DOMAIN_ERR","foreignKey","localKey","assignTo","relationFields","canFindLinkFor","getForeignKey","idAttribute","setForeignKey","relatedRecord","_setForeignKey","relatedRecords","getLocalField","setLocalField","relatedData","getInverse","inverse","findInverseRelation","isInversedTo","addLinkedRecords","records","linkRecord","isEmptyLinks","findExistingLinksFor","removeLinkedRecords","relatedId","unsaved","findExistingLinksByForeignKey","id","ensureLinkedDataHasProperType","relationData","is","createRecord","isRequiresParentId","isRequiresChildId","createChildRecord","createLinked","then","BelongsToRelation","createParentRecord","HasManyRelation","localKeys","foreignKeys","hasForeignKeys","recordId","ids","findExistingLinksByLocalKeys","findExistingLinksByForeignKeys","foreignIdField","createMany","HasOneRelation","RelationType","belongsTo","hasMany","hasOne","superMethod","store","bind","creatingPath","noValidatePath","keepChangeHistoryPath","previousPath","Record","noValidate","keepChangeHistory","validateOnSet","toJSON","_mapper","afterLoadRelations","beforeLoadRelations","changeHistory","changes","commit","destroy","hasChanges","quickHasChanges","isNew","isValid","validate","removeInverseRelation","currentParent","inverseDef","children","child","setupInverseRelation","loadRelations","relations","adapter","getAdapterName","tasks","task","raw","load","previous","revert","preserve","save","postProcess","changesOnly","silent","hashCode","insertAt","removeAt","binarySearch","lo","hi","compared","mid","found","Index","fieldList","fieldGetter","isIndex","values","pos","dataLocation","newIndex","results","order","visitAll","cb","leftInclusive","rightInclusive","_between","leftKey","rightKey","currKey","peek","clear","insertRecord","removeRecord","isUnique","j","updateRecord","COLLECTION_DEFAULTS","commitOnMerge","emitRecordEvents","onConflict","Collection","queryClass","indexes","_onRecordEvent","beforeAdd","singular","existingNoValidate","updateIndexes","afterAdd","afterRemove","afterRemoveAll","beforeRemove","beforeRemoveAll","createIndex","instances","prune","removeAll","Ctor","initialValue","idOrRecord","queryOrRecords","updateIndex","types","boolean","integer","number","string","segmentToString","segment","str","makePath","segments","makeError","actual","expected","addError","errors","maxLengthCommon","keyword","schema","max","minLengthCommon","validationKeywords","allOf","allErrors","_schema","anyOf","validated","dependencies","enum","possibleValues","join","items","checkingTuple","maximum","exclusiveMaximum","maxItems","maxLength","maxProperties","minimum","exclusiveMinimum","minItems","minLength","minProperties","multipleOf","not","oneOf","properties","additionalProperties","patternProperties","toValidate","undef","origProp","required","existingOnly","prevProp","validType","_type","validator","typeGroupValidators","uniqueItems","runOps","ANY_OPS","ARRAY_OPS","NUMERIC_OPS","OBJECT_OPS","STRING_OPS","validateAny","ctx","shouldPop","changingPath","changedPath","changeHistoryPath","eventIdPath","silentPath","validationFailureMsg","numeric","Schema","definition","_definition","extends","validationKeyword","unsetter","track","makeDescriptor","applyDefaults","hasSet","orig","keyPath","originalGet","error","current","changing","clearTimeout","setTimeout","changeRecord","timestamp","originalSet","_copy","applyDefaultsHooks","validatingHooks","makeNotify","getSchema","toProcess","originalExistingOnly","notify","notify2","LIFECYCLE_METHODS","count","defaults","destroyAll","find","findAll","sum","update","adapterArgs","beforeAssign","updateAll","updateMany","MAPPER_DEFAULTS","_adapters","applySchema","defaultAdapter","Mapper","lifecycleMethods","recordClass","methods","isPrototypeOf","afterCount","afterCreate","afterCreateMany","afterDestroy","afterDestroyAll","afterFind","afterFindAll","afterSum","afterUpdate","afterUpdateAll","afterUpdateMany","beforeCreate","beforeCreateMany","beforeCount","beforeDestroy","beforeDestroyAll","beforeFind","beforeFindAll","beforeSum","beforeUpdate","beforeUpdateAll","beforeUpdateMany","_end","_data","wrap","crud","originalRecord","parentRelationMap","adapterResponse","_runHook","_createParentRecordIfRequired","relationMap","_invokeAdapterMethod","createdProps","_createOrAssignChildRecordIfRequired","originalProps","_commitChanges","recordOrRecords","newValues","createInstance","context","parent","originalRecords","belongsToRelationData","Boolean","createdRecordsData","belongsToData","createdRecordData","RecordCtor","method","config","upper","before","after","_value","getAdapter","_result","getAdapters","registerAdapter","default","hookName","hookArgs","defaultValueIndex","overridenResult","propsOrRecords","conversionOptions","pass","_opts","_record","some","defineRelations","_name","getMapperByName","getMapper","proxiedMapperMethods","Container","_mappers","mapperClass","mapperDefaults","_onMapperEvent","as","original","defineMapper","defineResource","warn","proxiedCollectionMethods","ownMethodsForScoping","cachedFn","hashOrId","cached","_completedQueries","SIMPLESTORE_DEFAULTS","usePendingFind","usePendingFindAll","SimpleStore","collectionClass","_collections","_pendingQueries","addToCache","_onCollectionEvent","cachedFind","cachedFindAll","cacheFind","cacheFindAll","hash","self","collectionOpts","_added","indexed","hashQuery","eject","ejectAll","pendingQuery","force","promise","inject","removeRelated","LinkedCollection","_addMeta","_clearMeta","event","DATASTORE_DEFAULTS","unlinkOnDestroy","DataStore","updateOpts","relatedIdAttribute","foreignKeyDescriptor","currentParentId","storeRecord","inverseLocalField","toLink","toLinkIds","currentChildrenOfParent","parents","_key","origGet","origSet","version"],"mappings":"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"}